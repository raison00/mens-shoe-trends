const favicon = require('serve-favicon');
const fs = require('fs');
const winston = require('winston');
const dateFormat = require('dateformat');
require('winston-daily-rotate-file');

let instance;
const FORMAT = 'TIMESTAMP|**LOG_LEVEL**|MACYS_ONLINE_UID|CID=NAME||FILE|MESSAGE|EXCEPTION';
module.exports.getLogMeta = function (filename, pkg) {
  const meta = {
    file: filename,
    name: `${pkg.name}@${pkg.version}`,
    macysOnlineUid: 'GUEST',
  };
  return meta;
};
module.exports.getServerLogger = () => {
  function createInstance() {
    winston.remove(winston.transports.Console);
    if (process.env.DISABLE_CONSOLE_LOG !== 'on') {
      winston.add(winston.transports.Console, {
        handleExceptions: false,
        timestamp() {
          return dateFormat(new Date(), 'ddd mmm dd HH:MM:ss Z yyyy', true);
        },
        humanReadableUnhandledException: true,
        level: process.env.LOG_LEVEL || 'debug',
        formatter(options) {
          let macysOnlineUid;
          if (options.meta.cookies) {
            macysOnlineUid = options.meta.cookies.macys_online_uid || 'GUEST';
          } else {
            macysOnlineUid = 'GUEST';
          }

          const msg = FORMAT.replace('TIMESTAMP', options.timestamp)
            .replace('LOG_LEVEL', options.level)
            .replace('MESSAGE', options.message)
            .replace('MACYS_ONLINE_UID', macysOnlineUid)
            .replace('NAME', options.meta.name || 'NO_NAME')
            .replace('FILE', options.meta.file || 'NO_FILENAME')
            .replace('EXCEPTION', options.meta.exception || '');
          return msg;
        },
      });
    }
    if (process.env.LOG_FILES_ENABLED === 'on') {
      winston.add(winston.transports.DailyRotateFile, {
        filename: `${process.env.LOG_FILE_DIRECTORY || './logs'}./log`,
        datePattern: 'yyyy-MM-dd.',
        prepend: true,
        level: process.env.LOG_LEVEL || 'debug',
        maxsize: process.env.MAX_LOG_FILE_SIZE || 10000000,
        maxFiles: process.env.MAX_LOG_FILES || 10,
      });
    }
    return winston;
  }
  if (!instance) {
    // Prevent breaking error if 2 versions of @component/common are in the dep tree
    try {
      instance = createInstance();
    } catch (e) {
      instance = winston;
      instance.log('info', `Winston has already been instantiated - ${e}`, {});
    }
  }
  return instance;
};

module.exports.favicon = () => favicon(`${__dirname}/src/images/star.ico`);
module.exports.xapi = require('./src/util/Xapi');

// BEGIN - SECTION - Functions that traverse Polaris NPMs -----------------------------------
module.exports.getInstalledComponents = function getInstalledComponents(dirname, feature) {
  let pkg;
  if (feature) {
    if (fs.existsSync(`${dirname}/node_modules/${feature}/package.json`)) {
      pkg = require(`${dirname}/node_modules/${feature}/package.json`);
    }
  } else if (fs.existsSync(`${dirname}/package.json`)) {
    pkg = require(`${dirname}/package.json`);
  }

  const components = [];
  if (pkg) {
    const deps = pkg.dependencies;
    for (let i = 0; i < Object.keys(deps).length; i += 1) {
      const key = Object.keys(deps)[i];
      if (key.indexOf('@component/') > -1) {
        components.push(key);
        let inners;
        if (feature) {
          inners = this.getInstalledComponents(`${dirname}/node_modules/${feature}/node_modules/${key}`);
        } else {
          inners = this.getInstalledComponents(`${dirname}/node_modules/${key}`);
        }
        for (let j = 0; j < inners.length; j += 1) {
          const inner = inners[j];
          components.push(`${key}/node_modules/${inner}`);
        }
      }
    }
  }
  return components;
};

module.exports.getInstalledFeatures = (dirname) => {
  const pkg = require(`${dirname}/package.json`);
  const deps = pkg.dependencies;
  const features = [];
  for (let i = 0; i < Object.keys(deps).length; i += 1) {
    const key = Object.keys(deps)[i];
    if (key.indexOf('@feature/') > -1) {
      features.push(key);
    }
  }
  return features;
};

module.exports.getInstalledFeaturesPartials = (dirname) => {
  const pkg = require(`${dirname}/package.json`);
  const deps = pkg.dependencies;
  const features = [];
  for (let i = 0; i < Object.keys(deps).length; i += 1) {
    const key = Object.keys(deps)[i];
    if (key.indexOf('@feature/') > -1) {
      features.push(`${dirname}/node_modules/${key}/views/partials`);
    }
  }
  return features;
};

module.exports.getInstalledCommonPartials = dirname => `${dirname}/node_modules/@core/common/views/partials`;

module.exports.getInstalledCore = (dirname) => {
  let pkg;
  if (fs.existsSync(`${dirname}/package.json`)) {
    pkg = require(`${dirname}/package.json`);
  }

  const core = [];
  if (pkg) {
    const deps = pkg.dependencies;
    Object.keys(deps).forEach((key) => {
      if (key.indexOf('@core') > -1) {
        core.push(key);
      }
    });
  }
  return core;
};

// END --- SECTION - Functions that traverse Polaris NPMs -----------------------------------
