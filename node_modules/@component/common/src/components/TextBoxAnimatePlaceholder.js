// #MODULE - TextBoxAnimatePlaceholder.js
// > Author: Allen Chuang
// >
// > Create Date: Oct 5, 2016
// >
// ##DESCRIPTION:
// This module will attach to a text box element, and then simulate typing animation based on the parameters defined
// and cycle through the array of strings.
{
  const $ = require('jquery');
  const _ = require('underscore');

  // default options
  const defaults = {
    // default placeholder text
    defaultText: 'What are you looking for?',
    // default phrases, can hold as many phrases as needed
    phrases: ['Message 1', 'Message 2', 'Message 3'],
    // time in milliseconds before cycling through phrases
    startDelay: 2000,
    // typing speed of each character in milliseconds
    typeSpeed: 50,
    // pause time before cycling through the next phrase, in multiples of typeSpeed.
    pauseDelay: 30,
  };

  // ###Method: animatePlaceholder(elementSelector, options)
  // Public method that takes in the elementSelector of the input
  // field that we want to attach this component to.  It will attach itself to the input and initialize
  // the correct parameters and state.
  //
  // > parameters
  // >
  // + *elementSelector* - The CSS selector of the input element that we want this attached to (i.e. #searchBar or .searchField)
  //
  // + *opts* - object of optional parameters to pass through -  see above for options
  //
  // > returns
  // >
  // + Nothing.  This sets up events, and has no return value.
  const animatePlaceholder = function (elementSelector, opts) {
    let options = opts;
    const input = $(elementSelector);
    let cmds = [];

    // if not explicitly passed, pass in empty object
    if (options === undefined) {
      options = {};
    }

    // Setting options and applying defaults
    _.defaults(options, defaults);

    // Apply default text
    input.attr('placeholder', options.defaultText);

    function clear() {
      input.attr('placeholder', '');
    }

    function addLetter(a) {
      return function () {
        input.attr('placeholder', input.attr('placeholder') + a);
      };
    }

    function doLoop() {
      cmds = [];

      function pushLetterToArray(letter) {
        cmds.push(addLetter(letter));
      }

      for (let i = 0; i < options.phrases.length; i++) {
        cmds.push(clear);
        const sentence = options.phrases[i];
        sentence.split('').forEach(pushLetterToArray);
        // at the end of each sentence, there is a pause
        // time paused = pauseDelay * typeSpeed
        for (let nn = 0; nn < options.pauseDelay; nn++) {
          cmds.push(0);
        }
      }
      cmds.push(doLoop);
    }

    const start = setTimeout(() => { // eslint-disable-line no-unused-vars
      doLoop();

      const cyclePlaceholder = setInterval(() => {
        // is there a cmd waiting, pop it and run it.
        const cmd = cmds.shift();
        if (cmd) {
          cmd();
        }
      }, options.typeSpeed);

      input.focus(() => {
        clearInterval(cyclePlaceholder);
        cmds = [];
        input.attr('placeholder', options.defaultText);
      });
    }, options.startDelay);
  };

  module.exports = {
    animatePlaceholder,
  };
}
