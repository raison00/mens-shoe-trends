// #MODULE - Validators
// > Author: Catherine Sambula
// >
// > Create Date: <May 1, 2014>
// >
// ##DESCRIPTION: This hold the objects for the common validators.
{
  const $ = require('jquery');
  // const Globals = require('../../../util/Globals');
  // const Segmentation = require('../../../util/Segmentation');

  const standardStringPattern = /^[-a-zA-Z'\s.]+$/;
  const extendedStringPattern = /^[-a-zA-Z0-9'#\s./]+$/;
  const attentionOptionalValidator = {
    maxLength: 35,
    regexMatch: /^[a-zA-Z.\-' ]+$/,
  };
  const cardNumberOptionalValidator = {
    regexMatch: /^(\*{5,16}|\d{5,16})[0-9]{4}$/,
  };
  const cardNumberValidator = $.extend(
    true,
    {
      required: true,
    },
    cardNumberOptionalValidator,
  );
  const cardTypeValidator = {
    required: true,
  };
  const securityCodeValidator = {
    required: true,
    minLength: 3,
    maxLength: 4,
  };
  const dateValidator = {
    day: {
      required: true,
      requiredSelect: true,
    },
    month: {
      required: true,
      requiredSelect: true,
    },
    year: {
      required: true,
      requiredSelect: true,
    },
  };
  const emailValidator = {
    required: true,
    maxLength: 75,
    email: true,
  };
  const firstNameValidator = {
    required: true,
    maxLength: 20,
    regexMatch: standardStringPattern,
  };
  const lastNameValidator = {
    required: true,
    maxLength: 30,
    regexMatch: standardStringPattern,
  };
  const middleNameOptionalValidator = {
    maxLength: 20,
    regexMatch: standardStringPattern,
  };
  const offerCodeValidator = {
    required: true,
    alphaNumeric: true,
  };
  const passwordValidator = [
    {
      required: true,
    },
    {
      minLength: 5,
    },
    {
      maxLength: 16,
    },
  ];
  const passwordStrengthValidator = [
    {
      required: true,
    },
    {
      minLength: 7,
    },
    {
      maxLength: 16,
    },
    {
      regexMatch: /^[a-zA-Z0-9[\]?*<~#`!+@$%^&()}:";'>{]*$/,
    },
    {
      confirmValue: {
        related: {
          prefix: 'confirm',
        },
      },
    },
  ];
  const phoneOptionalValidator = {
    areaCode: {
      minLength: 3,
      maxLength: 3,
      numeric: true,
    },
    exchangeNumber: {
      minLength: 3,
      maxLength: 3,
      numeric: true,
    },
    subscriberNumber: {
      minLength: 4,
      maxLength: 4,
      numeric: true,
    },
  };
  const phoneValidator = $.extend(
    true,
    {
      areaCode: {
        required: true,
      },
      exchangeNumber: {
        required: true,
      },
      subscriberNumber: {
        required: true,
      },
    },
    phoneOptionalValidator,
  );
  const phoneNumberOptionalValidator = {
    // exactly 10-digit || "(ddd) ddd-dddd" || "(ddd)ddd-dddd"
    regexMatch: /^(?:(?:\d{10})|(?:\(\d{3}\)\s{0,1}\d{3}-\d{4}))$/,
  };
  const phoneNumberValidator = $.extend(
    true,
    {
      required: true,
    },
    phoneNumberOptionalValidator,
  );
  const securityQAValidator = {
    securityAnswer: {
      required: true,
      minLength: 2,
      maxLength: 20,
    },
    securityQuestion: {
      required: true,
      requiredSelect: true,
    },
  };

  const detection = () => {
  /*  // 1134 is for mcom and 1136 is bcom authweb signin experimental cookie value
    Segmentation.detect([1134, 1136], (segmentValue) => {
      const globalProps = Globals.getValue('props');
      if (typeof globalProps !== 'undefined' && globalProps.authwebEnabled === true) {
        if ((segmentValue === 1134 && globalProps.site === 'MCOM') || (segmentValue === 1136 && globalProps.site === 'BCOM')) {
          passwordValidator.push({
            regexMatch: /^[a-zA-Z0-9[\]?*<~#`!+@$%^&()}:";'>{]*$/,
          });
        }
      }
    });  */
  };
  detection();

  passwordStrengthValidator.hasRelatedFieldValidators = true;

  /* Validators = object to be returned with field: fieldValidator.
     * New field: fieldValidator associations should be added in this object in alphabetical order. */
  const Validators = {
    detection,
    address: {
      firstName: firstNameValidator,
      lastName: lastNameValidator,
      addressLine1: {
        required: true,
        maxLength: 35,
        regexMatch: extendedStringPattern,
      },
      addressLine2: {
        maxLength: 35,
        regexMatch: extendedStringPattern,
      },
      city: {
        required: true,
        maxLength: 25,
        regexMatch: standardStringPattern,
      },
      state: {
        required: true,
        requiredSelect: true,
      },
      zipCode: {
        required: true,
        minLength: 5,
        zipCode: true,
      },
      email: emailValidator,
    },
    cardNumber: cardNumberValidator,
    cardNumberOptional: cardNumberOptionalValidator,
    cardType: cardTypeValidator,
    creditCard: {
      // cardType is a nestedModel, can't be together with cardModel validators
      // that's why isn't included in the creditCard validator object
      cardNumber: cardNumberValidator,
      expMonth: dateValidator.month,
      expYear: dateValidator.year,
      securityCode: securityCodeValidator,
    },
    email: emailValidator,
    firstName: firstNameValidator,
    middleNameOptional: middleNameOptionalValidator,
    lastName: lastNameValidator,
    offerCode: offerCodeValidator,
    password: passwordValidator,
    passwordStrength: passwordStrengthValidator,
    // 3-field phone
    phone: phoneValidator,
    phoneOptional: phoneOptionalValidator,
    // single field phone
    phoneNumber: phoneNumberValidator,
    phoneNumberOptional: phoneNumberOptionalValidator,
    date: dateValidator,
    securityQA: securityQAValidator,
    attentionOptional: attentionOptionalValidator,
  };

  module.exports = Validators;
}
