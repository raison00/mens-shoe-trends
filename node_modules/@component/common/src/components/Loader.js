// #MODULE - LOADER
// > Author      : Ramesh Polishetti
// > URL         :
// > Create Date : May 03, 2014
// >
// >
// ##DESCRIPTION : Loads a loader gif image while the request is in progress.
{
  const $ = require('jquery');

  const TAGNAME = 'tagName';
  const INPUT = 'INPUT';
  const MARGIN = 'margin';
  const ARIA_BUSY = 'aria-busy';
  const LOADER_CONTAINER_CLASS = 'loader-container';
  const INLINE_LOADER_CLASS = 'wrap-loader';

  // ###Method - _initiateLoader(elementNode, [options])
  // Public method which initialize the loader and creates a loader container node in the given parent node.
  //
  //
  //
  // > parameters
  // >
  // + *elemNode* : *ID Selector| Class Selector* - ID or class attribute value of parent div in which the loader-container node to be created.
  // + *options* : *Object* - Cotaining 'className' property. The value will be appened as class name to loader-container div (argument is optional).
  // >
  // >
  // > returns
  // >
  // + Nothing. It initializes the loader and creates a loader container node in the given element node.
  // >
  function _initiateLoader(elemNode, options) {
    let elementNode = elemNode;
    const defaultLoaderHeight = 30;
    let parentWidth;
    let parentHeight;
    let loaderContainer;
    let loader;
    let parentLeftOffset;
    let parentTopOffset;
    let isBody = false;
    let isInput = false;
    let elementNodeMarginStyle;

    if (elementNode) {
      // converting to jQuery node
      elementNode = $(elementNode);
      isBody = elementNode.prop(TAGNAME) === 'BODY';
      isInput = elementNode.prop(TAGNAME) === INPUT;
      parentWidth = elementNode.outerWidth();
      parentHeight = elementNode.outerHeight();
      // Setting default height to loader div if the parent div has no height
      parentHeight = parentHeight === 0 ? defaultLoaderHeight : parentHeight;
      // Offset required to align the loader div to top-left corner irrespective of parent div position attribute.
      parentLeftOffset = parseInt(elementNode.css('padding-left'), 10) + parseInt(elementNode.css('border-left-width'), 10);
      parentTopOffset = parseInt(elementNode.css('padding-top'), 10) + parseInt(elementNode.css('border-top-width'), 10);
      // default class for loader
      loaderContainer = $(`<div class='${LOADER_CONTAINER_CLASS}'>`);
      loader = $("<div class='loader'>Loading...</div>");

      if (elementNode.prop(TAGNAME) === 'BUTTON' || (!isInput && elementNode.hasClass('button'))) {
        // styles if loader is wrapped in a button
        loaderContainer.css({
          width: `${parentWidth - 2}px`,
          height: `${25}px`,
        });
        $(elementNode).css({
          color: 'transparent',
          opacity: 0.8,
        });
        $(elementNode).attr(ARIA_BUSY, 'true');
      } else if (isInput) {
        // If is an input type, we'll wrap it with loader, in order to mimick the button one
        // For that we copy element's margin to container to keep same layout

        // get inline margin, if any
        elementNodeMarginStyle = elementNode.prop('style').margin;

        // add computed class to loader to keep same layout
        loaderContainer.addClass(INLINE_LOADER_CLASS).css(MARGIN, elementNode.css(MARGIN));
        elementNode.css(MARGIN, '0');

        elementNode.replaceWith(loaderContainer);
        loaderContainer.append(elementNode);

        elementNode.attr(ARIA_BUSY, 'true');

        // if margin was inline, let's save it to be used to restore it later
        // saving data after replaceWith/appen7d as those actions clear any data previously saved
        if (elementNodeMarginStyle) {
          elementNode.data('originalmargin', elementNodeMarginStyle);
        }
      } else {
        // standard loaders

        loaderContainer.css({
          width: `${parentWidth}px`,
          height: `${parentHeight}px`,
          'margin-left': -parentLeftOffset,
          'margin-top': -parentTopOffset,
        });

        if (isBody) {
          loader.css({
            position: 'fixed',
            top: '50%',
            left: '50%',
          });
        } else {
          loader.css({
            margin: `${(loaderContainer.height() / 2).toString()}px auto`,
          });
        }
      }
      if (options !== undefined && Object.prototype.hasOwnProperty.call(options, 'className')) {
        loader.addClass(options.className);
      }

      if (!isInput) {
        // loaderwrapper.append( loader );
        // prepend used to align the loader-container div to the top of elementNode div
        loaderContainer.append(loader).prependTo(elementNode);
      }
    }
  }

  // ###Method - showLoader(parentNode, [options])
  // Public method which shows the loader by calling _initiateLoader method.
  //
  //
  //
  // > parameters
  // >
  // + *pNode* : *ID Selector| Class Selector* - ID or class attribute value of parent div in which the loader-container node to be created.
  // + *options* : *Object* - Cotaining 'className' property. The value will be appened as class name to loader-container div (argument is optional).
  // >
  // >
  // > returns
  // >
  // + Initiates the loader module by calling _initiateLoader or shows the loader-container node if it is already intialized.
  // >

  function showLoader(pNode, options) {
    let parentNode = pNode;
    // Getting the jquery dom element
    if (parentNode) {
      parentNode = $(parentNode);
      const loaderChild = parentNode.children(`.${LOADER_CONTAINER_CLASS}`);

      if (loaderChild.length === 0) {
        this._initiate(parentNode, options);
      } else {
        parentNode.css({
          color: 'transparent',
          opacity: 0.8,
        });
        parentNode.attr('aria-busy', 'true');
        loaderChild.show();
      }
    }
  }

  // ###Method - removeInputLoader(parentNode)
  // private method which unwraps the parentNode from the loader-container node from the DOM.
  //
  //
  //
  // > parameters
  // >
  // + *parentNode* : jquery
  // >
  // >
  // >
  // > returns
  // >
  // + unwraps the parentNode from the loader-container node from the DOM.
  // >
  function removeInputLoader(parentNode) {
    // checks if node has the loader div as parent before unwrapping
    if (!parentNode.parent().hasClass(INLINE_LOADER_CLASS)) {
      return;
    }
    // reset margin to it's own and unwrap from loader-container
    if (parentNode.data('originalmargin')) {
      parentNode.css(MARGIN, parentNode.data('originalmargin'));
    } else {
      parentNode.css(MARGIN, '');
    }

    parentNode.unwrap();
  }

  // ###Method - hideLoader(parentNode)
  // Public method which hides the loader-container div which is alread created by showLoader method.
  //
  //
  //
  // > parameters
  // >
  // + *parentNode* : *ID Selector| Class Selector* - ID or class attribute value of parent div of which the loader-container node to be hidden.
  // >
  // >
  // >
  // > returns
  // >
  // + Null. Hides the loader-container div which is already created by showLoader method.
  // >

  function hideLoader(pNode) {
    let parentNode = pNode;
    // removing child node using default class
    if (parentNode) {
      parentNode = $(parentNode);
      parentNode.attr(ARIA_BUSY, 'false');

      if (parentNode.prop(TAGNAME) === INPUT) {
        removeInputLoader(parentNode);
      } else {
        parentNode.css({
          color: '',
          opacity: '',
        });
        parentNode.children(`.${LOADER_CONTAINER_CLASS}`).hide();
      }
    }
  }

  // ###Method - destroyLoader(parentNode)
  // Public method which removes the loader-container node from the DOM.
  //
  //
  //
  // > parameters
  // >
  // + *parentNode* : *ID Selector| Class Selector* - ID or class attribute value of parent div of which the loader-container node to be removed.
  // >
  // >
  // >
  // > returns
  // >
  // + Removes the loader-container node from the parent node we have passed selector of.
  // >

  function destroyLoader(parentEl) {
    // removing child node using default class
    if (parentEl) {
      const parentNode = $(parentEl);
      parentNode.attr(ARIA_BUSY, 'false');

      if (parentNode.prop(TAGNAME) === INPUT) {
        removeInputLoader(parentNode);
      } else {
        parentNode.css({
          color: '',
          opacity: '',
        });
        parentNode.children(`.${LOADER_CONTAINER_CLASS}`).remove();
      }
    }
  }

  module.exports = {
    show: showLoader,
    hide: hideLoader,
    destroy: destroyLoader,
    _initiate: _initiateLoader,
  };
}
