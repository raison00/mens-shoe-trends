// #MODULE - FormHandlerDisplay
// > Author: Kristine Lai + Lochan Chhetri
// >
// > Create Date: January 2016
// >
// ##DESCRIPTION:
// Supporting module for FormHandlerMain
// API for client-side error display

{
  const $ = require('jquery');
  const _ = require('underscore');
  const ERROR_CUE = 'error_visual_cue';
  const ERROR_CLASS = 'error';
  const VALID_CUE = 'valid_visual_cue';
  const VALID_CLASS = 'valid';

  const FormHandlerDisplay = function () {};

  FormHandlerDisplay.prototype.getDisplayObjectData = function () {
    return this;
  };

  // FormHandlerDisplay.prototype.setPageLevelHeader = function(header){
  //   $('#pageLevelErrorHeader').html(header);
  // };

  // process and create inputData object that binds each input field with its corresponding recovery and instructional messages
  function process(configObj) {
    const _this = this;

    let recovery;
    if (_.isString(configObj.recoveryText)) {
      // TODO not sure if this is the best approach?
      // Create a require context for all files in the src/components/formHandler/scripts directory that end in "Rules"
      // https://webpack.github.io/docs/context.html
      const requireContext = require.context('./', false, /RecoveryTexts$/);

      recovery = requireContext(configObj.recoveryText);
    } else {
      // Allow direct passing of an object
      recovery = configObj.recoveryText;
    }

    _this.recoveryHash = recovery;
  }

  function removeErrorMessages(obj) {
    if (!obj) {
      $('.error_msg').remove();
    } else {
      $(obj)
        .siblings('.error_msg')
        .remove();
    }
  }

  function removePageLevelErrors() {
    $('.page-notification-error').empty();
  }

  function removeGlobalErrorMessage() {
    $('.global-error-container').remove();
  }

  // visual cue (input field border color and error/validation icon display)

  function removeVisualCue(obj) {
    if (obj) {
      obj.removeClass(VALID_CLASS).removeClass(ERROR_CLASS);
      obj
        .closest('.row')
        .removeClass(VALID_CLASS)
        .removeClass(ERROR_CLASS);
      if (obj.siblings().hasClass('visual_cue')) {
        obj.siblings('.visual_cue').empty();
        obj
          .siblings('.visual_cue')
          .eq(0)
          .remove();
      }
    }
  }

  function showVisualCue(obj, cue) {
    if (cue === ERROR_CUE) {
      obj.removeClass(VALID_CLASS).addClass(ERROR_CLASS);
      obj
        .closest('.row')
        .removeClass(VALID_CLASS)
        .addClass(ERROR_CLASS);
      obj.siblings('.visual_cue').remove();
      $('<div class="visual_cue"><div class="icon-ui-error-f-medium"></div></div>').insertAfter(obj);
    } else if (cue === VALID_CUE) {
      obj.removeClass(ERROR_CLASS).addClass(VALID_CLASS);
      obj
        .closest('.row')
        .removeClass(ERROR_CLASS)
        .addClass(VALID_CLASS);
      obj.siblings('.visual_cue').remove();
      $('<div class="visual_cue"><div class="icon-ui-validation-f-medium"></div></div>').insertAfter(obj);
    }
  }

  FormHandlerDisplay.prototype.init = function (configObj) {
    this.pageLevelErrorHeader = configObj.pageLevelErrorHeader;
    this.inputData = {};

    this.formLevelErrorTemplate = configObj.formLevelErrorTemplate || false;

    // create the formDisplayObject and its sub-objects using process()
    _.bind(process, this, configObj)();
  };

  FormHandlerDisplay.prototype.displayFieldError = function (currentValidateField, fieldId, validator) {
    const element = $(`#${fieldId}`);
    const cue = ERROR_CUE;
    const errorMessage = this.recoveryHash[currentValidateField][validator];

    showVisualCue(element, cue);

    element.siblings('.error_msg').remove();
    element.after(`<small class="error_msg">${errorMessage}</small>`);
    element.attr('aria-invalid', 'true');
  };

  FormHandlerDisplay.prototype.clearFieldError = function (fieldId) {
    const element = $(`#${fieldId}`);
    const cue = VALID_CUE;

    showVisualCue(element, cue);

    element.siblings('.error_msg').remove();
    element.attr('aria-invalid', 'false');
  };

  FormHandlerDisplay.prototype.showPageLevelErrors = function (formErrorsObj, formElement) {
    const pageNotificationErrorElement = $('.page-notification-error', formElement);
    const formLevelErrorTemplate = require('../views/FormLevelErrorTemplate.hbs');

    pageNotificationErrorElement.html(formLevelErrorTemplate(formErrorsObj));
    pageNotificationErrorElement
      .find('ul>li:first')
      .attr('tabindex', -1)
      .focus();
    pageNotificationErrorElement.removeClass('hide');
  };

  FormHandlerDisplay.prototype.showGlobalErrorMessage = function (formId, backEndResponse) {
    if ($('.global-error-container')) {
      removeGlobalErrorMessage();
    }

    const formElement = $(`#${formId}`);
    const globalErrorContainer = $('<div class="global-error-container"></div>');
    globalErrorContainer.insertAfter(formElement.find('.page-notification-error'));

    const backendErrorArr =
      backEndResponse && backEndResponse.messages && backEndResponse.messages.errorMessages && backEndResponse.messages.errorMessages.globalMessages;
    if (backendErrorArr) {
      globalErrorContainer.append('<ul>');

      for (let i = 0; i < backendErrorArr.length; i++) {
        globalErrorContainer
          .children('ul')
          .append(`<li><div class="icon-ui-error-f-medium" style="display:inline-block"></div>${
            backendErrorArr[i].description
          }<br/><small> (Service Code: ${backendErrorArr[i].trackingCode} )</small></li>`);
      }
    }
  };

  FormHandlerDisplay.prototype.clearFormErrorDisplay = function (fieldObj) {
    removeVisualCue(fieldObj);
    removeErrorMessages(fieldObj);
    removePageLevelErrors();
    removeGlobalErrorMessage();
  };

  module.exports = FormHandlerDisplay;
}
