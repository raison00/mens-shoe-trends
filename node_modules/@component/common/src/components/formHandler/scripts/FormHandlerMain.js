// #MODULE - FormHandlerMain
// > Author: Kristine Lai + Lochan Chhetri
// >
// > Create Date: January 2016
// >
// ##DESCRIPTION:
// This will replace the previous version of FormHandler
// FormHandlerMain serves as a mediator module between FormHandlerValidate and FormHandlerDisplay.
// FormHandlerValidate provides a wrapper around ValidationManager, and triggers 'form-error' and 'form-valid' events.
// FormHandlerMain listens for the 'form-error' and 'form-valid' events and calls the appropriate FormHandlerDisplay functions.
// FormHandlerDisplay is an API for all client-side error display functions (visual cue and errror messages).
{
  const $ = require('jquery');
  const _ = require('underscore');
  const FormHandlerValidate = require('./FormHandlerValidate');
  const FormHandlerDisplay = require('./FormHandlerDisplay');
  const FormHandler = function (formId) {
    if (!formId) {
      throw new Error('Missing formId for FormHandler constructor.');
    } else if ($(`#${formId}`).length === 0) {
      throw new Error('The <form> associated with the formId does not exist in the DOM');
    }

    this.formId = formId;
  };

  function resetForm() {
    const _this = this;
    _this.fhV.formData.formLevelError = false;
    Object.keys(_this.fhV.inputData).forEach((key) => {
      const el = $(`#${_this.fhV.inputData[key].elementId}`);
      if (el.length > 0) {
        el.val('');
        _this.fhV.inputData[key].errors = [];
        _this.fhV.inputData[key].hasError = false;
        _this.fhD.clearFormErrorDisplay(el);
      }
    });
  }

  function generateFormErrors() {
    const _this = this;

    const formErrors = {
      header: _this.fhD.pageLevelErrorHeader || '',
      errors: [],
    };

    _.each(_this.fhV.formErrorArray, (error) => {
      const errorMsg = _this.fhD.recoveryHash[error.errorPointers[0]][error.errorPointers[1]];
      formErrors.errors.push({
        title: error.title,
        elementId: error.elementId,
        error: errorMsg,
      });
    });
    return formErrors;
  }

  function formEventListener() {
    const _this = this;

    $(`#${this.formId}`).on('form_error', (e, currentValidateField, fieldId, validator, optional) => {
      if (!optional) {
        _this.fhD.displayFieldError(currentValidateField, fieldId, validator);
      }
    });

    $(`#${this.formId}`).on('form_valid', (e, fieldId, optional) => {
      if (!optional) {
        _this.fhD.clearFieldError(fieldId);
      }
    });

    $('.submit').on('click', (e) => {
      e.preventDefault();

      const pageFormErrors = _.bind(generateFormErrors, _this)();
      _this.fhD.showPageLevelErrors(pageFormErrors, _this.fhV.formData.formElement);

      // if ( _this.GLOBAL_ERROR === true ) {
      //     _this.fhD.showGlobalErrorMessage( _this.formId, _this.fhD.backendResponse );
      // }
    });

    $(`#${this.formId}`).on('click', '.cancel', (e) => {
      e.preventDefault();
      _.bind(resetForm, _this)();
    });
  }

  FormHandler.prototype.init = function (conf) {
    let config = conf;
    const defaults = {
      useBlur: true,
      rules: './FormHandlerRules', // Hmmm, needs to be in the webpack require format
      recoveryText: './FormHandlerRecoveryTexts', // Hmmm, needs to be in the webpack require format
      pageLevelErrorHeader: 'The following error(s) have occurred',
    };

    config = _.extend(defaults, config);

    this.fhV = new FormHandlerValidate(this.formId);
    this.fhD = new FormHandlerDisplay();

    this.fhV.init(config);
    this.fhD.init(config);

    _.bind(formEventListener, this)();
  };

  FormHandler.prototype.destroy = function () {
    $(`#${this.formId}`).off();
  };

  module.exports = FormHandler;
}
