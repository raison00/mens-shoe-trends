// #MODULE - Overlay
// > Author: Angelo Calub
// >
// > Create Date: <May 19, 2014>
// ##DESCRIPTION: A wrapper around to jQueryUI Dialog widget.
// >
{
  const $ = require('jquery');
  const Logger = require('../util/Logger');
  require('jquery-ui/dialog');

  let id;
  let $dialog;
  let dialogWidget;
  let $content;
  const defaults = {
    autoOpen: false,
    closeOnClick: true,
    modal: true,
    opacity: 0.3,
    width: 'auto',
    positionOnResize: true,
    showCloseButton: true,
  };
  let options = {};
  const alpha = 'abcdefghijklmnopqrstuvwxyz';

  // // available options can be called by these steps:
  // require(['jquery', 'mcomOverlay'], function($, Overlay) {
  //     var exampleOverlay = new Overlay({ modal:true });
  //     exampleOverlay.open();
  // });
  // //then in browser console:
  // exampleOverlay.dialog.dialog("option");
  // appendTo: "body"
  // autoOpen: false
  // beforeClose: null
  // buttons: Array[0]
  // close: null
  // closeOnClick: true
  // closeOnEscape: true
  // closeText: "Close"
  // create: null
  // dialogClass: ""
  // disabled: false
  // drag: null
  // dragStart: null
  // dragStop: null
  // draggable: true
  // focus: null
  // height: "auto"
  // hide: null
  // maxHeight: null
  // maxWidth: null
  // minHeight: 150
  // minWidth: 150
  // modal: true
  // noCloseButton: false
  // opacity: 0.3
  // open: null
  // position: Object
  // positionOnResize: true
  // resizable: true
  // resize: null
  // resizeStart: null
  // resizeStop: null
  // show: null
  // showCloseButton: true
  // title: "hi"
  // width: "auto"

  // ###Method - setOptions( opts )
  // Private method to merge default overlay options with passed options.
  //
  // > parameters
  // >
  // + *opts* : *Object* - Options that needs to be set for overlay instance
  //
  // > returns
  // >
  // + Nothing
  function setOptions(opts) {
    options = $.type(opts === 'object') ? $.extend(true, {}, defaults, opts) : $.extend(true, {}, defaults);
  }

  // ###Method - getRandomKey()
  // Private method to generate a random key. This key will be used as id of the element.
  //
  // > parameters
  // >
  // + None
  //
  // > returns
  // >
  // + Nothing
  function getRandomKey() {
    let str = '';
    for (let i = 0; i < 20; i++) {
      str += Math.floor((Math.random() * alpha.length) - 1);
    }
    return str;
  }

  // ###Method - getContainer( el )
  // Private method to find correct DOM element or create if missing.
  //
  // > parameters
  // >
  // + *el* : *DOM Element | jQuery Object | String* - OPTIONAL. If DOM element is passed it will convert it to jQuery Object.
  // If string is passed it will use it as CSS selector.
  //
  // > returns
  // >
  // + *$content* : jQuery Object
  function getContainer(el) {
    id = getRandomKey();
    if (typeof el === 'string') {
      $content = $(el);
      if ($content.length === 0) {
        throw new Error('Unable to create overlay, Invalid selector string.');
      }
    } else if (el && el.jquery) {
      $content = el;
    } else if (el && el.nodeType && el.nodeType === 1) {
      $content = $(el);
    } else {
      $content = $(`<div id="${id}" />`).appendTo('body');
    }
    return $content;
  }

  // ###Method - init()
  // Public method that will be called everytime overlay is opened. Based on overlay options this method will do event
  // binding on DOM to close the overlay, set zIndex and opacity.
  //
  // > parameters
  // >
  // + None
  //
  // > returns
  // >
  // + Nothing
  function init() {
    const css = {};
    const _this = this;

    if (this.dialogWidget.overlay) {
      if (typeof options.opacity === 'number') {
        css.opacity = options.opacity;
      }

      // set zindex to the overlay if it is passed in options
      // since overlay should be behind dialog subtracting 1 from the passed zindex
      // we have to set zindex in init because overlay is created everytime dialog is opened.
      if (typeof options.zIndex === 'number') {
        css.zIndex = options.zIndex - 1;
      }

      this.dialogWidget.overlay.css(css);
    }


    if (options.closeOnClick) {
      $(document).on('click.autoCloseOverlay', (e) => {
        if (!_this.dialogWidget.uiDialog.is(e.target) && !_this.dialogWidget.uiDialog.has(e.target).length) {
          $(document).off('click.autoCloseOverlay');
          _this.close();
        }
      });
    }

    // if this property is true then we do bindings on window resize event to reposition the dialog.
    if (options.positionOnResize) {
      // As per http://www.quirksmode.org/dom/events/resize_mobile.html#t11 most browsers fire resize event when orintation is changed.
      // Hence I am doing bindings on resize event so that even dekstop browser are able to use this feature.
      $(window).on('resize.positionOverlay', () => {
        // Calling a _position() because calling option( "position" ) without new value would just return current value.
        _this.dialogWidget._position();
      });
    }

    if (options.noCloseButton) {
      // you can specify no close buttons by adding 'noCloseButton: true' to your init options
      dialogWidget.uiDialog.find('.ui-dialog-titlebar-close').hide();
    }
  }

  // ###Method - setTitle( str )
  // Public method to set title of the Overlay
  //
  // > parameters
  // >
  // + *str* : *String* - Passed string will be set as title of the overlay.
  //
  // > returns
  // >
  // + Nothing
  function setTitle(str) {
    this.dialog.dialog('option', 'title', str);
  }

  // ###Method - setBody( html )
  // Public method to set body of the Overlay
  //
  // > parameters
  // >
  // + *html* : *String | DOM Element* - This will be set as body of the overlay.
  //
  // > returns
  // >
  // + Nothing
  function setBody(html) {
    if (typeof html === 'string') {
      this.content.html(html);
    } else {
      this.content.empty().append(html);
    }
  }

  // ###Method - create( container, opts )
  // Private method to create a new instance of jQueryUI Dialog. This methond is called once when creating an instance of Overlay.
  //
  // > parameters
  // >
  // + *container* : *DOM Element* - This passed container will be used as main body of overlay.
  // + *opts* : *Object* - Options that needs to be set on overlay.
  //
  // > returns
  // >
  // + Nothing
  function create(container, opts) {
    setOptions(opts);
    $dialog = container.dialog(options);
    dialogWidget = $dialog.data('uiDialog');

    // set zindex to the dialog if it is passed in options
    if (typeof opts.zIndex === 'number') {
      dialogWidget.uiDialog.zIndex(opts.zIndex);
    }
  }

  // ###Method - destroy()
  // Public method to destroy overlay and unbind click event on DOM and window. It internally calls jQueryUI Dialog's destroy method.
  //
  // > parameters
  // >
  // + None
  //
  // > returns
  // >
  // + Nothing
  function destroy() {
    $(document).off('click.autoCloseOverlay');
    $(window).off('resize.positionOverlay');
    this.dialog.dialog('destroy');
    id = undefined;
    $dialog = undefined;
    dialogWidget = undefined;
    $content = undefined;
    options = undefined;
    // destroy whatever is inside setBody
    this.content.remove();
  }

  // ###Method - close()
  // Public method to close (hide) overlay and unbind event binded to window. It internally calls jQueryUI Dialog's close method.
  //
  // > parameters
  // >
  // + None
  //
  // > returns
  // >
  // + Nothing
  function close() {
    try {
      this.dialog.dialog('close');
    } catch (e) {
      Logger.log('Error closing dialog: ', e);
    }
    $(window).off('resize.positionOverlay');
  }

  // ###Method - open()
  // Public method to open (show) overlay. It internally calls jQueryUI Dialog's open method.
  //
  // > parameters
  // >
  // + None
  //
  // > returns
  // >
  // + Nothing
  function open() {
    this.dialog.dialog('open');
    this.init();
  }

  // ###Method - setButton( arr )
  // Public method to add buttons to overlay. It internally calls jQueryUI Dialog's options method.
  //
  // > parameters
  // >
  // + *arr* : *Array* - An array object containig properties that will be used to construct buttons
  //
  // > returns
  // >
  // + Nothing
  function setButtons(arr) {
    this.dialog.dialog('option', 'buttons', arr);
  }

  // ###Method - on()
  // Public method to attach events to overlay. It internally calls jQueryUI Dialog's on method.
  //
  // > parameters
  // >
  // + None
  //
  // > returns
  // >
  // + Nothing
  function on(...args) {
    this.content.on(...args);
  }

  // ###Method - off()
  // Public method to detach events to overlay. It internally calls jQueryUI Dialog's off method.
  //
  // > parameters
  // >
  // + None
  //
  // > returns
  // >
  // + Nothing
  function off(...args) {
    this.content.off(...args);
  }

  // ###Method - isOpen()
  // Public method to check if overlay is open or not. It internally calls jQueryUI Dialog's isOpen method.
  //
  // > parameters
  // >
  // + None
  //
  // > returns
  // >
  // + Boolean: Will return true is overlay is open and false if it is hidden.
  function isOpen() {
    return this.dialogWidget.isOpen();
  }

  module.exports = function (opts, el) {
    if (!opts) {
      throw new Error('Unable to create Overlay, missing required arguments.');
    }
    create(getContainer(el), opts);
    this.dialog = $dialog;
    this.content = $content;
    this.dialogWidget = dialogWidget;
    this.init = init;
    this.id = id;
    this.open = open;
    this.destroy = destroy;
    this.close = close;
    this.setBody = setBody;
    this.setTitle = setTitle;
    this.setButtons = setButtons;
    this.on = on;
    this.off = off;
    this.isOpen = isOpen;
  };
}
