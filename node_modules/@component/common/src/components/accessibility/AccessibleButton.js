// #MODULE - AccessibleButton
// > Author: Rodolfo Ladeira
// >
// > Description: module to handle accessibility for buttons.
// > It returns class function to be instantiated to create an object. It inherits from AccessibleComponent.
// > Contructor: AccessibleButton( options )
// >                options => Object:
// >                                 {
// >                                   selector:  jQuery element or string jQuery selector => required
// >                                   defaultCallback: function to be called when keyboard action is triggered instead
//                                                      of AccessibleButton native callback => optional
// >                                 }
// >
// >
// >                          Ex:  new AccessibleButton({
// >                                                     selector: '#idOfElement',
// >                                                     defaultCallback: function(){//optional
// >                                                            return 'function to be called when keyboard is type.
//                                                              No callback function will be called from AccessibleComponent'
// >                                                     }
// >                                 });
// >
// > Public methods: attach (attributes)
// >     It will attach events and attributes to customized button. It should be called after creating an instance of AccessibleButton.
// >                attributes => Object: Object containing Dom attributes to be inserted into customized element => optional
// >
// >
// >                         Ex:       accessibleButtonInstance.attach({ //optional
// >                                                         'aria-label': 'something to read'
// >                                                     }),
// > Create Date: <May 26, 2017>
// >

import $ from 'jquery';
import logger from '../../util/Logger';
import AccessibleComponent from './AccessibleComponent';

const constants = {
  button: '[role="button"]',
};

const errorMsg = 'Error on AccessibleButton Component:: ';

function buttonAction(e, $elem) {
  if (typeof this.defaultCallback === 'function') {
    this.executeDefaultCallback(e, $elem);
  } else {
    e.preventDefault();
    $elem.trigger('click', [
      {
        isButtonInternalEvent: true,
      },
    ]);
  }
}

function AccessibleButton(options) {
  const $selectorEle = $(options.selector);

  this.$selector = [];

  // accessibleButton must contain role="button"
  if (!$selectorEle.is(constants.button)) {
    logger.warn(`${errorMsg}When creating component: not a valid or existent element.`, options.selector);
    return this;
  }

  AccessibleComponent.call(this, options);

  this.$selector = $selectorEle;
  this.defaultCallback = options.defaultCallback;
}

AccessibleButton.prototype = new AccessibleComponent();
AccessibleButton.prototype.constructor = AccessibleButton;

function onKeyDown(e) {
  if (e.altKey || e.ctrlKey) {
    return;
  }
  const $elem = $(e.currentTarget);
  const allowedKey = e.which === this.keyCodes.SPACE || e.which === this.keyCodes.ENTER;

  if (allowedKey) {
    buttonAction.call(this, e, $elem);
  }
}

function setAttribute(attrObj) {
  const _this = this;

  if (!attrObj) {
    return; // nothing to setup
  }

  if (typeof attrObj !== 'object' || !Object.keys(attrObj).length) {
    logger.warn(`${errorMsg}When setting attributes to component: there is no valid attribute object.`, attrObj);
    return;
  }

  const keys = Object.keys(attrObj);
  keys.forEach((elem) => {
    _this.$selector.attr(elem, attrObj[elem]);
  });
}

AccessibleButton.prototype.attach = function (attributes) {
  if (this.$selector.length === 0) {
    logger.warn(`${errorMsg}When attaching events to component: selector did not return any element.`);
    return;
  }

  this.$selector.off('keydown.accessibilty.button').on('keydown.accessibilty.button', onKeyDown.bind(this));

  setAttribute.call(this, attributes);
};

export default AccessibleButton;
