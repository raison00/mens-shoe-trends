// #MODULE - AccessibleCheckBox
// > Author: Rodolfo Ladeira
// >
// > Description: module to handle accessibility for checkboxes.
// > It returns class function to be instantiated to create an object. It inherits from AccessibleComponent.
// > Contructor: AccessibleCheckBox( options )
// >                options => Object:
// >                                 {
// >                                   selector:  jQuery element or string jQuery selector => required
// >                                   defaultCallback: function to be called when keyboard action is triggered instead of
//                                                      AccessibleCheckBox native callback => optional
// >                                 }
// >
// >
// >                          Ex:  new AccessibleCheckBox({
// >                                                     selector: '#idOfElement',
// >                                                     defaultCallback: function(){//optional
// >                                                            return 'function to be called when keyboard is type.
//                                                              No callback function will be called from AccessibleComponent'
// >                                                     }
// >                                 });
// > PS: AccessibleCheckBox will add aria-checked='false' in case this attr is not already set on DOM.
// > If checkbox is already checked, then developer needs to add aria-checked="true" to the element.
// >
// > Public methods: attach ()
// >     It will attach events to customized checkbox. It should be called after creating an instance of AccessibleCheckBox.
// >
// >
// >                         Ex:       accessibleCheckBoxInstance.attach(),
// >
// > Public methods: toggleAriaChecked (elem)
// >     It will toggle aria-checked attr value of passed elem(s). It should be called after creating an instance of AccessibleCheckBox.
// >                elem => JQuery Selector or HTML elemen: Elements present into related accessibleCheckBoxInstance to be toggled attr.
// >                     If it doens`t belong to related AccessibleCheckBox component nothing changes
// >
// >
// >                         Ex:       accessibleCheckBoxInstance.toggleAriaChecked('#checkbox'),
// >                                   accessibleCheckBoxInstance.toggleAriaChecked($('.checkbox')),

// > Create Date: <Aug 7, 2017>
// >
{
  const $ = require('jquery');
  const logger = require('../../util/Logger');
  const AccessibleComponent = require('./AccessibleComponent');
  const constants = {
    ariaCheckedAttr: 'aria-checked',
    checkbox: '[role="checkbox"]',
    checkedValue: 'true',
    uncheckedValue: 'false',
  };

  const errorMsg = 'Error on AccessibleCheckBox Component:: ';

  /*
        In case Dom element(s) doenst have aria-checked attr,
        AccessibleCheckBox Component will add it and value false as default
    */
  function initializeAriaChecked() {
    this.$selector.each((index, elem) => {
      const ariaChecked = elem.getAttribute('aria-checked') === 'true';

      if (!ariaChecked) {
        elem.setAttribute('aria-checked', 'false');
      }
    });
  }

  function elementAction(e, $elem) {
    e.preventDefault();

    if (typeof this.defaultCallback === 'function') {
      this.executeDefaultCallback(e, $elem);
    } else {
      this.toggleAriaChecked($elem);
      $elem.trigger('click');
    }
  }

  function AccessibleCheckBox(options) {
    const $selectorEle = $(options.selector);

    this.$selector = [];

    // accessibleCheckBox must contain role="checkbox"
    if (!$selectorEle.is(constants.checkbox)) {
      logger.warn(`${errorMsg}When creating component: not a valid or existent element.`, options.selector);
      return this;
    }

    AccessibleComponent.call(this, options);

    this.$selector = $selectorEle;
    this.defaultCallback = options.defaultCallback;

    initializeAriaChecked.call(this, this.$selector);
  }

  AccessibleCheckBox.prototype = new AccessibleComponent();
  AccessibleCheckBox.prototype.constructor = AccessibleCheckBox;

  function onKeyDown(e) {
    let $elem;

    if (e.altKey || e.ctrlKey) {
      return;
    }

    if (e.which === this.keyCodes.ENTER) {
      e.preventDefault();
      return;
    }

    if (e.which === this.keyCodes.SPACE) {
      $elem = $(e.currentTarget);
      elementAction.call(this, e, $elem);
    }
  }

  AccessibleCheckBox.prototype.toggleAriaChecked = function (elem) {
    let currentAriaChecked;
    let nextAriaChecked;
    let accessibleElement;
    let idxElem;
    const _this = this;

    if (this.$selector.length === 0) {
      logger.warn(`${errorMsg}When toggling aria-checked attributte of component: selector did not return any element.`);
      return;
    }

    const $elem = $(elem);

    $elem.each((index, _elem) => {
      idxElem = _this.$selector.index(_elem);

      if (idxElem < 0) {
        logger.warn(`${errorMsg}When toggling aria-checked attributte of component: element doens\`t belong to component.`, _elem);
        return;
      }

      accessibleElement = _this.$selector[idxElem];

      currentAriaChecked = accessibleElement.getAttribute(constants.ariaCheckedAttr);
      nextAriaChecked = currentAriaChecked === constants.uncheckedValue ? constants.checkedValue : constants.uncheckedValue;

      accessibleElement.setAttribute(constants.ariaCheckedAttr, nextAriaChecked);
    });
  };

  AccessibleCheckBox.prototype.attach = function () {
    if (this.$selector.length === 0) {
      logger.warn(`${errorMsg}When attaching events to component: selector did not return any element.`);
      return;
    }

    this.$selector.off('keydown.accessibilty.checkbox').on('keydown.accessibilty.checkbox', onKeyDown.bind(this));
  };

  module.exports = AccessibleCheckBox;
}
