// #MODULE - AccessibleRadioGroup
// > Author: AndrÃ© Vale
// >
// > Create Date: <May 17, 2017>
// >
{
  const $ = require('jquery');
  const AccessibleComponent = require('./AccessibleComponent');
  const logger = require('../../util/Logger');

  const constants = {
    radioSelector: '[role="radio"]',
  };

  const errorMsg = 'Error on AccessibleRadioGroup Component:: ';

  function AccessibleRadioGroup(options) {
    AccessibleComponent.call(this, options);

    this.$parent = $(options.parentSelector);

    this.defaultCallback = options.defaultCallback;

    if (this.$parent.length === 0) {
      logger.warn(`${errorMsg}Unable to find parent element.`, options.parentSelector);
    }
  }

  AccessibleRadioGroup.prototype = new AccessibleComponent();
  AccessibleRadioGroup.prototype.constructor = AccessibleRadioGroup;

  function isChecked($el) {
    return $el.is('[aria-checked="true"]');
  }

  function setChecked($el, checked) {
    if (checked) {
      $el.attr('aria-checked', true);
    } else {
      $el.removeAttr('aria-checked');
    }
  }

  function queryAllRadios() {
    return this.$parent.find(constants.radioSelector);
  }

  function resetAllRadios() {
    const $radios = queryAllRadios.call(this);

    this.setFocusable($radios, false);

    setChecked($radios, false);
  }

  function selectFromKeyboard(keyEvent, $itemToSelect) {
    if (isChecked($itemToSelect)) {
      return;
    }

    if (this.defaultCallback) {
      this.executeDefaultCallback(keyEvent, $itemToSelect, queryAllRadios.call(this));
    } else {
      keyEvent.preventDefault();

      $itemToSelect.trigger('click', [
        {
          fromKeyboardEvent: true,
        },
      ]);
    }
  }

  function selectFromClick(clickEvent, options) {
    const $itemToSelect = $(clickEvent.currentTarget);
    const defaultIsNotPrevented = !clickEvent.isDefaultPrevented();
    const isFromKeyboardEvent = options && options.fromKeyboardEvent;

    if (isFromKeyboardEvent) {
      clickEvent.stopPropagation();
    }

    if (isChecked($itemToSelect)) {
      return;
    }

    if (defaultIsNotPrevented) {
      if (this.defaultCallback) {
        this.executeDefaultCallback(clickEvent, $itemToSelect, queryAllRadios.call(this));
      } else {
        this.selectRadio($itemToSelect);
      }
    }
  }

  function getRadioIndex($radio, $radioList) {
    let index = -1;

    $radioList.each((i, el) => {
      if ($radio.is(el)) {
        index = i;
        return false;
      }
      return undefined;
    });

    return index;
  }

  function onRadioKeyDown(e) {
    if (e.altKey || e.ctrlKey) {
      return;
    }

    const $allItems = queryAllRadios.call(this);
    const $focusedItem = $(e.currentTarget);
    const index = getRadioIndex($focusedItem, $allItems);
    const isMovePrev = e.which === this.keyCodes.UP || e.which === this.keyCodes.LEFT;
    const isMoveNext = e.which === this.keyCodes.DOWN || e.which === this.keyCodes.RIGHT;
    const isHardSelection = e.which === this.keyCodes.SPACE;

    if (isMovePrev) {
      selectFromKeyboard.call(this, e, $allItems.eq(index === 0 ? $allItems.length - 1 : index - 1));
    } else if (isMoveNext) {
      selectFromKeyboard.call(this, e, $allItems.eq(index === $allItems.length - 1 ? 0 : index + 1));
    } else if (isHardSelection) {
      selectFromKeyboard.call(this, e, $focusedItem);
    }
  }

  function onRadioClick(e, options) {
    selectFromClick.call(this, e, options);
  }

  AccessibleRadioGroup.prototype.clearSelection = function () {
    const $radios = queryAllRadios.call(this);

    setChecked($radios, false);
  };

  AccessibleRadioGroup.prototype.selectRadio = function (radio, options) {
    const giveItFocus = (options && options.giveItFocus) === undefined ? true : options.giveItFocus;
    const $radio = $(radio).closest(constants.radioSelector);

    resetAllRadios.call(this);

    this.setFocusable($radio, true);

    setChecked($radio, true);

    if (giveItFocus) {
      $radio.focus();
    }
  };

  AccessibleRadioGroup.prototype.attach = function () {
    if (this.$parent.length === 0) {
      logger.warn(`${errorMsg}When attaching events to component: selector did not return any element.`, this.$parent);
      return;
    }

    this.$parent
      .off('keydown.accessibilty.radiogroup', constants.radioSelector)
      .off('click.accessibilty.radiogroup', constants.radioSelector)
      .on('keydown.accessibilty.radiogroup', constants.radioSelector, onRadioKeyDown.bind(this))
      .on('click.accessibilty.radiogroup', constants.radioSelector, onRadioClick.bind(this));
  };

  module.exports = AccessibleRadioGroup;
}
