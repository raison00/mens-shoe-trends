// #MODULE - AccessibleComponent
// > Author: AndrÃ© Vale
// >
// > Top level abstraction for a accessibility component.
// >
// > New abstractions might need to be created as more components arises.
// >
// > Reminders:
// >
// >   Please, when adding new behaviors to accessibility components please do test first ( TDD ).
// >   Pay attetion to SOLID principles when creating new abstractions. SRP and Liskov in special.
// >      Liskov is very important in such cases since it help us to put the right behaviors in the right abstractions.
// >      https://en.wikipedia.org/wiki/Liskov_substitution_principle
// >
// > Create Date: <May 17, 2017>
// >
{
  function AccessibleComponent(options) {
    this.options = options;
  }

  AccessibleComponent.prototype.keyCodes = {
    DOWN: 40,
    ENTER: 13,
    LEFT: 37,
    RIGHT: 39,
    SPACE: 32,
    UP: 38,
  };
  // 'Override attach() on subclass';
  AccessibleComponent.prototype.attach = function () {};

  AccessibleComponent.prototype.setFocusable = function ($el, focusable) {
    if (focusable) {
      $el.attr('tabindex', 0);
    } else {
      $el.removeAttr('tabindex');
    }
  };

  AccessibleComponent.prototype.executeDefaultCallback = function (...args) {
    if (this.isAlreadyCallingBack) {
      return;
    }

    this.isAlreadyCallingBack = true;
    this.defaultCallback(...args);
    this.isAlreadyCallingBack = false;
  };

  module.exports = AccessibleComponent;
}
