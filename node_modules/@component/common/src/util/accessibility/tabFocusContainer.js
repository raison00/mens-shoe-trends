{
  const $ = require('jquery');
  const Tabbables = require('./Tabbables');
  const TAB_FOCUS_NAMESPACE = 'tabFocus';
  const TAB_KEYCODE = 9;
  const mod = {};

  function get$FocusTarget(focusElement, $defaultTarget) {
    const $focusElement = $(focusElement);

    return $focusElement.length && Tabbables.isTabbable($focusElement[0]) ? $focusElement : $defaultTarget;
  }

  function getBondaryElems($container) {
    const $tabbables = Tabbables.getTabbables($container);

    if (!$tabbables.length) {
      return undefined;
    }

    return {
      $firstInput: $tabbables.first(),
      $lastInput: $tabbables.last(),
    };
  }

  function setListener($container) {
    $container.on(`keydown.${TAB_FOCUS_NAMESPACE}`, (event) => {
      if (event.which !== TAB_KEYCODE) {
        return;
      }

      const target = event.target;
      const bondaryElements = getBondaryElems($container);

      if (bondaryElements) {
        if (target === bondaryElements.$firstInput[0] && event.shiftKey) {
          bondaryElements.$lastInput.focus();
          event.preventDefault();
        } else if (target === bondaryElements.$lastInput[0] && !event.shiftKey) {
          bondaryElements.$firstInput.focus();
          event.preventDefault();
        }
      }
    });
  }

  function getOriginalFocus(forceOriginalFocused) {
    const $forceOriginalFocused = $(forceOriginalFocused);
    const $originalFocused = $forceOriginalFocused.length > 0 ? $forceOriginalFocused : $(document.activeElement);

    return $originalFocused;
  }

  mod.stop = function stop(container, originalFocus) {
    const $container = $(container);
    const $originalFocus = $(originalFocus);

    if ($originalFocus.length) {
      $originalFocus[0].focus();
    }

    $container.off(`keydown.${TAB_FOCUS_NAMESPACE}`);
  };

  mod.start = function start(container, focusElement, forceOriginalFocused) {
    const $container = $(container);
    const $originalFocus = getOriginalFocus(forceOriginalFocused);

    this.stop($container);
    setListener($container);
    get$FocusTarget(focusElement, $container).focus();

    return {
      $originalFocus,
    };
  };

  module.exports = mod;
}
