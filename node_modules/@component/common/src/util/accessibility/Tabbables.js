{
  const $ = require('jquery');
  // code extracted from jqueryui
  function isVisible(elem) {
    let element = elem;
    let visibility = element.css('visibility');
    while (visibility === 'inherit') {
      element = element.parent();
      visibility = element.css('visibility');
    }
    return visibility !== 'hidden';
  }

  function focusable(element, hasTabindex) {
    let map;
    let mapName;
    let img;
    let focusableIfVisible;
    let fieldset;
    const nodeName = element.nodeName.toLowerCase();

    if (nodeName === 'area') {
      map = element.parentNode;
      mapName = map.name;
      if (!element.href || !mapName || map.nodeName.toLowerCase() !== 'map') {
        return false;
      }
      img = $(`img[usemap="#${mapName}"]`);
      return img.length > 0 && img.is(':visible');
    }

    if (/^(input|select|textarea|button|object)$/.test(nodeName)) {
      focusableIfVisible = !element.disabled;

      if (focusableIfVisible) {
        // Form controls within a disabled fieldset are disabled.
        // However, controls within the fieldset's legend do not get disabled.
        // Since controls generally aren't placed inside legends, we skip
        // this portion of the check.
        fieldset = $(element).closest('fieldset')[0];
        if (fieldset) {
          focusableIfVisible = !fieldset.disabled;
        }
      }
    } else if (nodeName === 'a') {
      focusableIfVisible = element.href || hasTabindex;
    } else {
      focusableIfVisible = hasTabindex;
    }

    return focusableIfVisible && $(element).is(':visible') && isVisible($(element));
  }

  function isTabbable(element) {
    const tabIndex = $.attr(element, 'tabindex');
    const hasTabindex = tabIndex != null && tabIndex !== '';

    return (!hasTabindex || tabIndex >= 0) && focusable(element, hasTabindex);
  }

  // code extracted from jqueryui

  const getTabbables = function ($container) {
    return $container.find('*').filter((index, current) => isTabbable(current));
  };

  module.exports = {
    getTabbables,
    isTabbable,
  };
}
