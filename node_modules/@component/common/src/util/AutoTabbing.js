// #MODULE - AutoTabbing
// > Authors: Sarfaraz Merchant
// >
// > Create Date: July, 2013
// >
// ##DESCRIPTION: This module can be used to autotab through input fields once user reches maxlength
//
{
  const $ = require('jquery');
  // we could have used input:text but for phonefields we are using type as tel
  const inputSelector = 'input:not([type=hidden])';
  // 9: tab, 16: shift, 17: ctrl, 18: alt, 37: left, 38: up, 39: right, 40: down
  const keyCodesToIgnore = [9, 16, 17, 18, 37, 38, 39, 40];

  // ###Method - getWrapper ( el )
  // Private method to find container based on passed argument type
  //
  // > parameters
  // >
  // + *el* : *String | jQuery Object | DOM Node* - Wrapper containg inputs
  //
  // > returns
  // >
  // + *element* : *jQuery Object*
  function getWrapper(el) {
    let element;

    if (typeof el === 'string') {
      element = $(el);
      if (element.length === 0) {
        throw new Error('Invalid selector string.');
      }
    } else if (el && el.jquery) {
      element = el;
    } else if (el && el.nodeType && el.nodeType === 1) {
      element = $(el);
    }

    return element;
  }

  // ###Method - enable ( element, keys )
  // Public method to enable autoTabbing on inputs
  //
  // > parameters
  // >
  // + *element* : *String | jQuery Object | DOM Node* - Wrapper containg inputs
  // + *keys* : *Array* - Array of keycode on which you do not want to auto tab.
  //
  function enable(element, keys) {
    let i;

    const wrapper = getWrapper(element);

    if (keys) {
      $.merge(keyCodesToIgnore, keys);
    }

    const inputs = $(inputSelector, element);
    const numInputs = inputs.length;

    for (i = 0; i < numInputs; i++) {
      const input = $(inputs[i]);
      const nextInput = $(inputs[i + 1]);
      const previousInput = $(inputs[i - 1]);

      if (nextInput.length) {
        input.data('nextTarget', nextInput);
      }
      if (previousInput.length) {
        input.data('previousTarget', previousInput);
      }
    }

    wrapper.on('keyup.autoTab', inputSelector, (event) => {
      const charCode = event.which;
      const { target } = event;
      const self = $(target);
      const targetValLength = target.value.length;
      const previousTarget = self.data('previousTarget');
      const nextTarget = self.data('nextTarget');

      // backspace is pressed and input has no more chars left set focus to previous input if present
      if (charCode === 8 && targetValLength === 0 && previousTarget) {
        previousTarget.focus();
        // set focus on next element if key pressed is not in ignore array and input has reached maxLength
      } else if ($.inArray(charCode, keyCodesToIgnore) === -1 && targetValLength === target.maxLength && nextTarget) {
        nextTarget.focus();
      }
    });
  }

  // ###Method - disbale ( element )
  // Public method to disable autoTabbing on inputs
  //
  // > parameters
  // >
  // + *element* : *jQuery Object* - Wrapper containg inputs
  //
  // > returns
  // >
  // + none
  function disable(element) {
    element.off('keyup.autoTab');
  }

  module.exports = {
    enable,
    disable,
  };
}
