const $ = require('jquery');
const pubsub = require('./PublishSubscribe');
const Cookie = require('./Cookie');
const Store = require('./ClientSideStorage');
const Logger = require('./Logger');

const constants = {
  latlngDefault: 'USERLL',
  cookieSelectedDictionary: 'MISCGCs',
  KEY_LOCATION: 'commonstorelocation',
  dateAdd: 2592000000,
  cslCookie: 'CSL',
  bopsStoreSelector: 'BOPSPICKUPSTORE',
  zipDefault: 'USERPC',
  pubsubID: 'globalStoreChange',
  xapiEndpoint: '/xapi/preferences/v1/stores/preferred',
  noOfStores: 1,
  radius: 'M100',
};

const locationObj = window.location;

let brand;

// ### private method -- getLatLng
// This function reads latitude and longitude value from MISCGCS cookie.
// returns -- object with latitude and longitude value
const getLatLng = function getLatLng() {
  let lat = '';
  let lng = '';
  const latNlng = Cookie.get(constants.latlngDefault, constants.cookieSelectedDictionary);
  if (latNlng) {
    const v = latNlng.split(',');
    if (v.length >= 2) {
      [lat, lng] = v;
    }
    return {
      lat,
      lng,
    };
  }
  return undefined;
};
// ### private method  -- getXapiURL
// parameters
// ** always expects deviceType -- Desktop or PHONE or MEW
// This function builds xapi url parameter
// returns url with query parameters
const getXapiURL = function getXapiURL(deviceType) {
  const device = (typeof deviceType !== 'undefined') ? deviceType : 'Desktop';
  const latnlng = getLatLng();
  let url = constants.xapiEndpoint;
  if (typeof latnlng !== 'undefined' && typeof latnlng.lat !== 'undefined' && typeof latnlng.lng !== 'undefined') {
    url = `${url}?latitude=${latnlng.lat}&longitude=${latnlng.lng}&`;
  } else {
    url = `${url}?`;
  }
  return `${url}noOfStores=${constants.noOfStores}&radius=${constants.radius}&_deviceType=${device}`;
};
// ### private method -- getUserGuid
// this function returns macys_online_guid cookie
// returns -- user guid value if present else returns undefined
const getUserGuid = function getUserGuid() {
  let guid = Cookie.get('macys_online_guid');
  if (guid) {
    brand = 'mcom';
    return guid;
  }

  guid = Cookie.get('bloomingdales_online_guid');
  if (guid) {
    brand = 'bcom';
    return guid;
  }

  return undefined;
};

// ### private method -- setCSLCookie
// this function sets CSL cookie value based on store location number
const setCSLCookie = function setCSLCookie(val) {
  Cookie.set(constants.cslCookie, val, null, {
    domain: Cookie.formatDomainForCookie(locationObj.host),
    expires: new Date(new Date().getTime() + constants.dateAdd),
  });
};

// ## private method -- getCSLCookie
const getCSLCookie = function () {
  const csl = Cookie.get(constants.cslCookie);
  if (csl) {
    return csl;
  }
  return undefined;
};
// ### private method -- hasGlobalLocationObjectInStorage
// this function checks if globalstore is saved in local storage
// True if found in localStorage, and false if not.
const hasGlobalLocationObjectInStorage = function hasGlobalLocationObjectInStorage() {
  const a = Store.getPersistent(constants.KEY_LOCATION);
  return a !== null && a !== undefined && a !== '' && !$.isEmptyObject(a);
};
// ### private method -- getGlobalStoreFromStorage
// this function checks if globalstore is save in local storage
// if yes -- read from local storage and return the value
// else -- return undefined
const getGlobalStoreFromStorage = function getGlobalStoreFromStorage() {
  return hasGlobalLocationObjectInStorage() ? JSON.parse(Store.getPersistent(constants.KEY_LOCATION)) : undefined;
};
// ### private method -- saveGlobalLocationToStorage
// this function saves globalstore local storage
const saveGlobalLocationToStorage = function saveGlobalLocationToStorage(globalLocation) {
  // build structure
  const bopsSelectedStore = {};
  bopsSelectedStore[globalLocation.locationNumber] = globalLocation.name;
  Store.setPersistent(constants.KEY_LOCATION, JSON.stringify(globalLocation));
  Store.setSession('bops_selected_store', JSON.stringify(bopsSelectedStore));
};
// ### private method setPreferredAddress
// this function build the required address structure for saving store details
const setPreferredAddress = function setPreferredAddress(addressObj) {
  const defaults = {
    id: '',
    line1: '',
    line2: '',
    city: '',
    state: '',
    zipCode: '',
    countryCode: '',
  };
  if (typeof addressObj !== 'undefined') {
    defaults.id = typeof addressObj.id !== 'undefined' ? addressObj.id : '';
    defaults.line1 = typeof addressObj.line1 !== 'undefined' ? addressObj.line1 : '';
    defaults.line2 = typeof addressObj.line2 !== 'undefined' ? addressObj.line2 : '';
    defaults.city = typeof addressObj.city !== 'undefined' ? addressObj.city : '';
    defaults.state = typeof addressObj.state !== 'undefined' ? addressObj.state : '';
    defaults.zipCode = typeof addressObj.zipCode !== 'undefined' ? addressObj.zipCode : '';
    defaults.countryCode = typeof addressObj.countryCode !== 'undefined' ? addressObj.countryCode : '';
  }
  return defaults;
};
// ### private method setPreferredAddress
// this function builds the required address structure for saving store details
const setPreferredgeoLocation = function setPreferredgeoLocation(geoLocationObj) {
  const defaults = {
    latitude: '',
    longitude: '',
  };
  if (typeof geoLocationObj !== 'undefined') {
    defaults.latitude = typeof geoLocationObj.latitude !== 'undefined' ? geoLocationObj.latitude : '';
    defaults.longitude = typeof geoLocationObj.longitude !== 'undefined' ? geoLocationObj.longitude : '';
  }
  return defaults;
};
// ### private method timeConvertor
// this function converts 12 hour time format to 24 hour time format
const timeConvertor = function timeConvertor(time) {
  const PM = !!time.match('pm');
  let hour;
  let min;
  const timeval = time.split(':');


  if (PM) {
    hour = 12 + parseInt(timeval[0], 10);
    min = timeval[1].replace('pm', '');
  } else {
    hour = timeval[0];
    min = timeval[1].replace('am', '');
  }

  return `${hour}:${min}`;
};
// ### private method setPreferredschedule
// this function builds the required schedule structure for store details
const setPreferredschedule = function setPreferredschedule(todaysHours, tomorrowsHours, scheduleVal) {
  const defaults = {
    todaysHours: {},
    tomorrowsHours: {},
  };
  const schedule = scheduleVal;
  if (schedule === undefined) {
    if (typeof todaysHours !== 'undefined') {
      defaults.todaysHours = todaysHours;
      defaults.todaysHours.openTime = timeConvertor(defaults.todaysHours.openTime);
      defaults.todaysHours.closeTime = timeConvertor(defaults.todaysHours.closeTime);
    }
    if (typeof tomorrowsHours !== 'undefined') {
      defaults.tomorrowsHours = tomorrowsHours;
      defaults.tomorrowsHours.openTime = timeConvertor(defaults.tomorrowsHours.openTime);
      defaults.tomorrowsHours.closeTime = timeConvertor(defaults.tomorrowsHours.closeTime);
    }
    return defaults;
  } else if (schedule.workingHours && schedule.workingHours.length > 0) {
    defaults.todaysHours = schedule.workingHours[0];
    defaults.tomorrowsHours = schedule.workingHours[1];
    defaults.todaysHours.openTime = timeConvertor(defaults.todaysHours.openTime);
    defaults.todaysHours.closeTime = timeConvertor(defaults.todaysHours.closeTime);
    defaults.tomorrowsHours.openTime = timeConvertor(defaults.tomorrowsHours.openTime);
    defaults.tomorrowsHours.closeTime = timeConvertor(defaults.tomorrowsHours.closeTime);
    return defaults;
  }
  if (schedule.todaysHours.openTime && schedule.todaysHours.closeTime) {
    schedule.todaysHours.openTime = timeConvertor(schedule.todaysHours.openTime);
    schedule.todaysHours.closeTime = timeConvertor(schedule.todaysHours.closeTime);
  }
  if (schedule.tomorrowsHours.openTime && schedule.tomorrowsHours.closeTime) {
    schedule.tomorrowsHours.openTime = timeConvertor(schedule.tomorrowsHours.openTime);
    schedule.tomorrowsHours.closeTime = timeConvertor(schedule.tomorrowsHours.closeTime);
  }
  return schedule;
};
// ### private method setBopsStoreInMISCGCsCookie
// this function updates BOPSPICKUPSTORE value in MISCGCS cookie based on preferred store location
const setBopsStoreInMISCGCsCookie = function setBopsStoreInMISCGCsCookie(storeLocationNumber) {
  if (typeof storeLocationNumber !== 'undefined' && storeLocationNumber !== '') {
    Cookie.set(constants.bopsStoreSelector, storeLocationNumber, 'MISCGCs', {
      domain: Cookie.formatDomainForCookie(locationObj.host),
      expires: new Date(new Date().getTime() + constants.dateAdd),
    });
  }
};
// ### private method setLatnLngInMISCGCsCookie
// this function updates USERLL value in MISCGCS cookie based on preferred store location
const setLatnLngInMISCGCsCookie = function setLatnLngInMISCGCsCookie(obj) {
  if (typeof obj !== 'undefined' && typeof obj.latitude !== 'undefined' && typeof obj.longitude !== 'undefined' && obj.longitude !== '' && obj.latitude !== '') {
    const v = String(`${obj.latitude},${obj.longitude}`);
    Cookie.set(constants.latlngDefault, v, 'MISCGCs', {
      domain: Cookie.formatDomainForCookie(locationObj.host),
      expires: new Date(new Date().getTime() + constants.dateAdd),
    });
  }
};
// ### private method setZipInMISCGCsCookie
// this function updates USERPC value in MISCGCS cookie based on preferred store location
const setZipInMISCGCsCookie = function setZipInMISCGCsCookie(zipcode) {
  if (typeof zipcode !== 'undefined' && zipcode !== '') {
    Cookie.set(constants.zipDefault, zipcode, 'MISCGCs', {
      domain: Cookie.formatDomainForCookie(locationObj.host),
      expires: new Date(new Date().getTime() + constants.dateAdd),
    });
  }
};

// ### public method -- publishStoreChange
// This function publishes store change event on window.
const publishStoreChange = function publishStoreChange(storeObj) {
  let store = {};
  if (!storeObj.error) {
    store.name = (typeof storeObj.name === 'undefined' && typeof storeObj.details !== 'undefined') ? storeObj.details.name : storeObj.name;
    store.storeNumber = typeof storeObj.storeNumber !== 'undefined' ? storeObj.storeNumber : '';
    store.locationNumber = (typeof storeObj.locationNumber === 'undefined' && typeof storeObj.identifier !== 'undefined') ? storeObj.identifier.storeLocation : storeObj.locationNumber;
    store.address = setPreferredAddress(storeObj.address);
    store.geoLocation = setPreferredgeoLocation(storeObj.geoLocation);
    const scheduleObj = (typeof storeObj.schedule === 'undefined' && typeof storeObj.workingHours !== 'undefined') ? { workingHours: storeObj.workingHours } : storeObj.schedule;
    store.schedule = setPreferredschedule(storeObj.todaysHours, storeObj.tomorrowsHours, scheduleObj);
    saveGlobalLocationToStorage(store);
    setCSLCookie(store.locationNumber);
    setLatnLngInMISCGCsCookie(store.geoLocation);
    setBopsStoreInMISCGCsCookie(store.locationNumber);
    setZipInMISCGCsCookie(store.address.zipCode);
    store.sendStoreName = typeof storeObj.sendStoreName !== 'undefined' ? storeObj.sendStoreName : false;
  } else {
    store = storeObj;
  }
  pubsub.observe(constants.pubsubID).publish(store);
};
// Private function -- initialize
// Called When listenStoreChange is called first time.
// parameters
// ***  options will be object {device:" Desktop or PHONE or MEW",commonStoreLocationEnabled:""}
// This function checks if csl cookie and globalstore is present in local cache
//   *** Yes -- publish store name reading from local storage
//   **  No -- make preference xapi call. Set csl cookie and globalstore in local cache and publish store change
const initialize = function initialize(options) {
  const globalStoreObj = getGlobalStoreFromStorage();

  // check if CSl cookie is set
  if (typeof getCSLCookie() !== 'undefined' && typeof globalStoreObj !== 'undefined') {
    // read store name from cache and publish store name
    globalStoreObj.sendStoreName = true;
    publishStoreChange(globalStoreObj);
  } else if (typeof window.CSL === 'undefined' || window.CSL === false) {
    // This check if CSL flag is present page load from different features.

    // make ajax call to preference xapi and save the store details is local cache and publish store name
    $.ajax({
      url: getXapiURL(options.device),
      method: 'GET',
      beforeSend(xhr) {
        const guid = getUserGuid();
        if (typeof guid !== 'undefined') {
          const guidHeader = brand === 'mcom' ? 'X-Macys-Userguid' : 'X-Bloomingdales-Userguid';
          xhr.setRequestHeader(guidHeader, guid);
        }
      },
    }).done((response) => {
      if (typeof response !== 'undefined' && typeof response.preferredStore !== 'undefined') {
        response.preferredStore.sendStoreName = true;
        publishStoreChange(response.preferredStore);
      } else if (typeof response.errors !== 'undefined') {
        Logger.error('Error in xapi response');
        publishStoreChange({ error: true });
      }
      window.CSL = false;
    }).fail(() => {
      publishStoreChange({ error: true });
      window.CSL = false;
    });
    // set CSL Flag  to prevent multiple ajax calls
    window.CSL = true;
  }
};
// ## method subscribes for store change event
// public method
// parameters  required --
//   **callback function that has to be called on store change **required**
//   **options -- options will be object {device:" Desktop or PHONE or MEW",globalstoreutilKillswitch:""} **required**
const listenStoreChange = function listenStoreChange(callBack, options) {
  const sendStoreName = typeof options.sendStoreName !== 'undefined' ? options.sendStoreName : false;
  // check for KS value
  if (typeof options !== 'undefined' && typeof options.commonStoreLocationEnabled !== 'undefined' && options.commonStoreLocationEnabled === true) {
    if (typeof callBack !== 'undefined') {
      pubsub.observe(constants.pubsubID).subscribe((data) => {
        callBack(data);
      });
      // call initialize if we have requirement to display store name
      if (sendStoreName) {
        initialize(options, callBack);
      }
    } else {
      Logger.error('callback function not defined to publish store changes');
    }
  } else {
    // check is csl cookie and commonstorelocation is save in cache. If yes, delete it.
    const cslVal = getCSLCookie();
    if (typeof cslVal !== 'undefined') {
      Cookie.remove(constants.cslCookie);
    }

    if (hasGlobalLocationObjectInStorage()) {
      Store.removePersistent(constants.KEY_LOCATION);
    }
  }
};
// ## removeStorechangeListener
// This function will be called to remove listener on page unload.
const removeStorechangeListener = function removeStorechangeListener() {
  pubsub.removeObserver(constants.pubsubID);
  // remove CSL flag
  delete window.CSL;
};

$(window).unload(() => {
  removeStorechangeListener();
});

module.exports = {
  init: initialize,
  listenStoreChange,
  publishStoreChange,
  removeStorechangeListener,
};

/*
basic store structure
 {
        "storeNumber": "263",
        "locationNumber": "4600",
        "name": "Macy's Fox Valley",
        "address":
        {
            "id": "858",
            "line1": "1 Fox Valley Center",
            "line2": "",
            "city": "Aurora",
            "state": "IL",
            "zipCode": "60504",
            "countryCode": "USA"
        },
        "phoneNumber": "630-978-5400",
        "geoLocation":
        {
            "latitude": "41.7609543",
            "longitude": "-88.2132904"
        },
        "schedule":
        {
            "todaysHours":
            {
                "openTime": "10:00 am",
                "closeTime": "9:00 pm"
            },
            "tomorrowsHours":
            {
                "openTime": "10:00 am",
                "closeTime": "9:00 pm"
            }
        }
    }

 HOW TO CONSUME: (example of store display view)
 import Marionette from 'backbone.marionette';
import Logger from '@component/common/src/util/Logger';
import CommonStoreLocation from '@component/common/src/util/commonStoreLocationUtil';
import Model from '../models/globalstore';
import template from '../../templates/views/globalstore-ui.hbs';

export default Marionette.ItemView.extend({

  initialize(el,options) {
    if (typeof el !== 'undefined') {
      this.el = el;
    } else {
      Logger.error('Element id is missing from constructor');
    }
    // options={device:" Desktop or PHONE or MEW",commonStoreLocationEnabled:"",sendStoreName=true}
    CommonStoreLocation.listenStoreChange(this.reloadtheView.bind(this), options);
  },
  events: {
    'click #changeStore': 'onChange',
  },
  render() {
    this.$el.html();
  },
  reloadtheView(data) {
    if (data !== undefined) {
      this.$el.html(template({ name: data.name }));
    }
  },
  onChange() {
    const obj = {
      storeNumber: '263',
      locationNumber: '5600',
      name: "Macy's union square",
      address: {
        id: '858',
        line1: '1 Fox Valley Center',
        line2: '',
        city: 'Aurora',
        state: 'IL',
        zipCode: '94107',
        countryCode: 'USA',
      },
      phoneNumber: '630-978-5400',
      geoLocation: {
        latitude: '71.7609543',
        longitude: '-100.2132904',
      },
      schedule: {
        todaysHours: {
          openTime: '10:00 am',
          closeTime: '9:00 pm',
        },
        tomorrowsHours: {
          openTime: '10:00 am',
          closeTime: '9:00 pm',
        },
      },
    };
    CommonStoreLocation.publishStoreChange(obj);
  },
  onDestroy() {
    CommonStoreLocation.removeStorechangeListener();
  }
});


*/
