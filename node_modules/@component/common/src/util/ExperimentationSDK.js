// #MODULE - ExpSdkJs
// > Author: Saurabh Chauhan
// > Create Date: 01/01/2017
// ##DESCRIPTION: AMD module to do client side experiment checking and splitting.
// Simplest usage is:
// Experiment.detect( experiments, callback );
// where the experiments is a list of experiments in the campaign, i.e. [ 320, 321, 322 ]
// and the callback will host the logic for individual experiments to trigger UI updates
{
  const $ = require('jquery');
  const _ = require('underscore');
  const Cookie = require('./Cookie');
  const Globals = require('./Globals');
  const Logger = require('./Logger');
  const ClientSideStorage = require('./ClientSideStorage');
  const BTDataDictionaryUtils = require('./BTDataDictionaryUtils');
  const TagManagerUtil = require('./TagManagerUtil');
  const RequestContext = require('./RequestContext');
  const StringUtil = require('./StringUtil');
  let ExpSdkJs = {
    getLocation: () => window.location,
  };
  function getDefaultHostBasedOnEnv() {
    if (ExpSdkJs.getLocation().href.indexOf('codemacys.fds') > -1) {
      return '//mcom-expcore.fds.com';
    }
    if (ExpSdkJs.getLocation().href.indexOf('codebloomingdales.fds') > -1) {
      return '//bcom-expcore.fds.com';
    }
    if (ExpSdkJs.getLocation().href.indexOf('macys.com') > -1) {
      return '//expcore.macys.com';
    }
    if (ExpSdkJs.getLocation().href.indexOf('bloomingdales.com') > -1) {
      return '//expcore.bloomingdales.com';
    }
    if (ExpSdkJs.getLocation().href.indexOf('mcom') > -1) {
      return '//mcom-expcore.fds.com';
    }
    if (ExpSdkJs.getLocation().href.indexOf('bcom') > -1) {
      return '//bcom-expcore.fds.com';
    }
    return '//mcom-expcore.fds.com';
  }

  function includes(list, value) {
    return list.includes(value);
  }

  // *** Configurations for Experimentation 2.0 Module ***
  ExpSdkJs = _.defaults(
    {
      DESKTOP: {
        expCookieName: 'SEED',
        expSessionKey: 'Desktop_ExpMetaData',
        apiSessionKey: 'expEndpoint',
        sessionTTL: 1000 * 60 * 60 * 24, // 24 hours in millisecond
        apiEndpoint: Globals.getValue('props.experimentationHost') || getDefaultHostBasedOnEnv(),
      },
      MEW: {
        expSessionKey: 'MEW_ExpMetaData',
        apiSessionKey: 'expEndpoint',
        sessionTTL: 1000 * 60 * 60 * 6, // 6 hours in milliseconds
        apiEndpoint: Globals.getValue('props.experimentationHost') || getDefaultHostBasedOnEnv(),
      },
      env: '',
      brand: '',
    },
    ExpSdkJs,
  );

  ExpSdkJs.init = function () {
    ExpSdkJs.setEnv(); // Determine agent whether Desktop or MEW
    ExpSdkJs.setBrand(); // Determine whether MCOM or BCOM
  };
  ExpSdkJs.saveSegmentCookie = function (response) {
    let experiments;
    // resp could be the jqXhr object or data
    // so we want to weed out the jqXhr object
    if (typeof response !== 'undefined' && typeof response.always === 'undefined') {
      experiments = JSON.stringify(response);
      console.log(experiments);
      // Cookie.set('SEGMENT', experiments); // , { expires: expireTime });
    } /* else {
      ExpSdkJs.set(ExpSdkJs.getCookie() || {});
    }
    if (ExpSdkJs.queue) {
      for (let i = 0, l = ExpSdkJs.queue.length; i < l; i++) {
        ExpSdkJs.queue[i](ExpSdkJs.data);
      }
      delete ExpSdkJs.queue;
    } */
  };
  ExpSdkJs.set = function (data) {
    ExpSdkJs.data = data;
  };
  ExpSdkJs.getCookie = function (cookieName) {
    let cookie;
    const loc = ExpSdkJs.getLocation();
    if (cookieName) {
      cookie = Cookie.get(cookieName);
      return cookie;
    }
    // implement manual cookie override for testing purposes
    const param = loc.search.match(/[?|&]experiment=([^&]+)/) || loc.search.match(/[?|&]segment=([^&]+)/);
    if (param) {
      Logger.log('Overriding experimentation.');
      return ExpSdkJs.decode(`{"EXPERIMENT":[${param[1]}]}`);
    }
    // get regular cookie value
    cookie = Cookie.get('SEGMENT');
    if (cookie) {
      return ExpSdkJs.decode(cookie);
    }
    return undefined;
  };

  ExpSdkJs.decode = function (ck) {
    let cookie;
    const result = {};
    try {
      cookie = $.parseJSON(ck).EXPERIMENT;
      for (let i = 0, l = cookie.length; i < l; i++) {
        result[cookie[i]] = cookie[i];
      }
    } catch (e) {} // eslint-disable-line no-empty
    return result;
  };
  // reset experiment running -- remove cookie and get new one
  // Experiment.reset = function ( callback ) {
  //     Cookie.remove( this.expCookieName );
  //     this.data = undefined;
  //     this.fetch( callback );
  // };
  ExpSdkJs.getExpIds = function () {
    const expArray = [];
    return expArray.concat(ExpSdkJs.getDesktopServerSideExperiments()).concat(ExpSdkJs.getDesktopClientSideExperiments());
  };
  ExpSdkJs.getMewExpIds = function () {
    ExpSdkJs.init();
    const defObj = $.Deferred();
    let expArray = [];
    const env = ExpSdkJs.env;
    const session = ExpSdkJs.getExpSession(ExpSdkJs[env].expSessionKey);
    if (!session || ExpSdkJs.isExpSessionExpired() || !ExpSdkJs.isSignedInSame()) {
      // no Mew Session data present , fetch it.
      ExpSdkJs.fetchExpData().always((newSession) => {
        if (_.isObject(newSession)) {
          expArray = newSession.mewRecipes;
        }
        defObj.resolve(expArray);
      });
    } else {
      // Mew Session data present , find it in the session.
      defObj.resolve(session.mewRecipes);
    }
    defObj.promise();
    return defObj;
  };

  ExpSdkJs.getAllSelectedRecipes = function () {
    ExpSdkJs.init();
    const defObj = $.Deferred();
    let expArray = [];
    const env = ExpSdkJs.env;
    const session = ExpSdkJs.getExpSession(ExpSdkJs[env].expSessionKey);
    const queryParamSessionStr = StringUtil.getURLParameter('session');
    if (env === 'MEW') {
      if (!session || ExpSdkJs.isExpSessionExpired() || !ExpSdkJs.isSignedInSame()) {
        ExpSdkJs.fetchExpData().always((newSession) => {
          if (_.isObject(newSession)) {
            if (queryParamSessionStr) {
              const queryParamSession = queryParamSessionStr.split(',');
              const mexExpArr = newSession.mewRecipes;
              const newMewRecipes = ExpSdkJs.replaceMEWQueryParamRecipes(queryParamSession, mexExpArr);
              expArray = newMewRecipes;
              defObj.resolve(expArray);
            } else {
              expArray = newSession.mewRecipes;
              defObj.resolve(expArray);
            }
          }
        });
      } else if (queryParamSessionStr) {
        const queryParamSession = queryParamSessionStr.split(',');
        const mexExpArr = session.mewRecipes;
        const newMewRecipes = ExpSdkJs.replaceMEWQueryParamRecipes(queryParamSession, mexExpArr);
        expArray = newMewRecipes;
        defObj.resolve(expArray);
      } else {
        // Mew Session data present , find it in the session.
        defObj.resolve(session.mewRecipes);
      }
    } else if (!session || ExpSdkJs.isExpSessionExpired() || !ExpSdkJs.isSignedInSame()) {
      ExpSdkJs.fetchExpData().always((newSession) => {
        if (_.isObject(newSession)) {
          expArray = newSession.selectedRecipes;
        }
        defObj.resolve(expArray);
      });
    } else {
      // Mew Session data present , find it in the session.
      defObj.resolve(session.selectedRecipes);
    }
    defObj.promise();
    return defObj;
  };

  ExpSdkJs.getSelectedRecipesForExperiment = function (experimentRecipes) {
    ExpSdkJs.init();
    const defObj = $.Deferred();
    let expArray = [];
    const env = ExpSdkJs.env;
    const session = ExpSdkJs.getExpSession(ExpSdkJs[env].expSessionKey);
    const selectedRecipes = [];
    const queryParamSessionStr = StringUtil.getURLParameter('session');
    if (!session || ExpSdkJs.isExpSessionExpired() || !ExpSdkJs.isSignedInSame()) {
      // no Session data present , fetch it.
      ExpSdkJs.fetchExpData().always((newSession) => {
        if (_.isObject(newSession)) {
          if (env === 'MEW') {
            if (queryParamSessionStr) {
              const queryParamSession = queryParamSessionStr.split(',');
              const mexExpArr = newSession.mewRecipes;
              const newMewRecipes = ExpSdkJs.replaceMEWQueryParamRecipes(queryParamSession, mexExpArr);
              expArray = newMewRecipes;
            } else {
              expArray = newSession.mewRecipes;
            }
          } else {
            expArray = ExpSdkJs.getExpIds();
          }
          if (expArray && expArray.length > 0) {
            _.forEach(expArray, (rec) => {
              if (_.contains(experimentRecipes, rec)) {
                selectedRecipes.push(rec);
              }
            });
          }
        }
        defObj.resolve(selectedRecipes);
      });
    } else {
      // Session data present , find it in the session.
      let sessionRecipes;
      if (env === 'MEW') {
        if (queryParamSessionStr) {
          const queryParamSession = queryParamSessionStr.split(',');
          const mexExpArr = session.mewRecipes;
          const newMewRecipes = ExpSdkJs.replaceMEWQueryParamRecipes(queryParamSession, mexExpArr);
          sessionRecipes = newMewRecipes;
        } else {
          sessionRecipes = session.mewRecipes;
        }
      } else {
        sessionRecipes = ExpSdkJs.getExpIds();
      }
      if (sessionRecipes && sessionRecipes.length > 0) {
        _.forEach(sessionRecipes, (rec) => {
          if (_.contains(experimentRecipes, rec)) {
            selectedRecipes.push(rec);
          }
        });
      }
      defObj.resolve(selectedRecipes);
    }
    defObj.promise();
    return defObj;
  };

  ExpSdkJs.getDesktopClientSideExperiments = function () {
    // Convert the CSV after the pipe into array
    const cookie = Cookie.get(ExpSdkJs.DESKTOP.expCookieName);
    let parsedExpString;
    let expArray;
    if (cookie && decodeURIComponent(cookie).indexOf('|') > 0) {
      parsedExpString = decodeURIComponent(cookie).split('|')[1];
    }
    if (parsedExpString) {
      expArray = parsedExpString.split(',');
      ExpSdkJs.expArray = expArray;
      return expArray;
    }
    return [];
  };
  // detect current experiment running from list of
  // passed experiments.
  //
  // example:
  //    Segmentation.detect( [220, 221, 222], function ( experiment ) {
  //        // 220 or 221 or 222 or undefined (in case of failed framework)
  //        console.log( experiment );
  //    } );
  //
  ExpSdkJs.detect = function (exps, callback) {
    let experiments = exps;
    // Added by Mercury DEV team to turn-off frontend experiments
    // if QE_TEST=mercury1_92_false, remove if SEGMENT cookie exist and do not call experimentation API
    // this is used by QA teams to do regression test when necessary
    const mercuryCookie = Cookie.get('QE_TEST');
    if (mercuryCookie && mercuryCookie.includes('mercury1_92_false')) {
      Cookie.remove(ExpSdkJs.DESKTOP.expCookieName);
      return;
    }
    ExpSdkJs.list((expArray) => {
      // split string experiments value
      if (typeof experiments === 'string') {
        experiments = experiments.split(/[\s,]+/);
      }
      // convert all input to array
      if (!$.isArray(experiments)) {
        experiments = [experiments];
      }
      // lookup for fist matching value in 2 arrays
      for (let i = 0, l = experiments.length; i < l; i++) {
        if (expArray[experiments[i]]) {
          return typeof callback === 'function' && callback(experiments[i]);
        }
      }
      if (typeof callback === 'function') {
        callback();
      }
      return true;
    });
  };
  // fetch list of current session segments/experiments.
  // returns hash of experiment ids as first argument to
  // callback passed.
  //
  // example:
  //    ExpSdkJs.list( function ( list ) {
  //        console.log( list ); // { 9:9, 71:71, 11:11 }
  //    } );
  ExpSdkJs.list = function (callback) {
    // there are already request running, queue call
    if (ExpSdkJs.queue) {
      if (typeof callback === 'function') {
        this.queue.push(callback);
      }
      return false;
    }
    // get segments from cookie
    if (!ExpSdkJs.expArray) {
      ExpSdkJs.getExpIds();
    }
    // segments already parsed
    if (ExpSdkJs.expArray) {
      return typeof callback === 'function' && callback(ExpSdkJs.expArray);
    }
    // create queue, to avoid multiple request to server
    ExpSdkJs.queue = [];
    return undefined;
  };
  // make call to Experementation Framework service to get
  // Experiment cookie with list of segments/experiments for
  // current session. after fetching cookie, will process
  // queue and call optional callback passed.
  ExpSdkJs.fetchExpData = function () {
    const defObj = $.Deferred();
    const env = ExpSdkJs.env;
    const api = ExpSdkJs[env].apiEndpoint;
    const session = ClientSideStorage.getSession(ExpSdkJs[env].expSessionKey);
    // if meta data already exists in session storage &&
    // session NOT expired
    if (session && !ExpSdkJs.isExpSessionExpired() && ExpSdkJs.isSignedInSame()) {
      defObj.resolve(session);
    } else if (api !== undefined && api !== null) {
      ExpSdkJs.callExperimentationAPI().always(() => {
        const newSession = ClientSideStorage.getSession(ExpSdkJs[env].expSessionKey);
        defObj.resolve(JSON.parse(newSession));
      });
    } else {
      defObj.reject();
    }
    defObj.promise();
    return defObj;
  };
  ExpSdkJs.setEnv = function () {
    let isMobile = false;
    const clientSideObject = RequestContext.generateClientSideRequest();
    const cookies = clientSideObject.cookies;
    const device = RequestContext.getDeviceTypeFromCookie(cookies);
    if (ExpSdkJs.getLocation().href.indexOf('//m.') > -1) {
      isMobile = true;
    } else if (device !== undefined && device !== 'PC') {
      isMobile = true;
    }
    ExpSdkJs.env = isMobile ? 'MEW' : 'DESKTOP';
    return ExpSdkJs.env;
  };

  ExpSdkJs.setBrand = function () {
    let brand;
    if (ExpSdkJs.getLocation().href.indexOf('macys') > -1) {
      brand = 'mcom';
    } else if (ExpSdkJs.getLocation().href.indexOf('mcom') > -1) {
      brand = 'mcom';
    } else if (ExpSdkJs.getLocation().href.indexOf('bloomingdales') > -1) {
      brand = 'bcom';
    } else if (ExpSdkJs.getLocation().href.indexOf('bcom') > -1) {
      brand = 'bcom';
    } else {
      brand = 'mcom';
    }
    ExpSdkJs.brand = brand;
    return ExpSdkJs.brand;
  };

  ExpSdkJs.callExperimentationAPI = function () {
    const env = ExpSdkJs.env;
    let api = ExpSdkJs[env].apiEndpoint;
    const holdOutapi = `${api}/globalHoldOut`;
    let holdOutResp;
    const cookie = Cookie.get(ExpSdkJs.DESKTOP.expCookieName);
    let sid;

    if (!cookie) {
      sid = '';
    } else {
      sid = `?sid=${cookie}`;
    }
    // Desktop Only: extracts only campaign id for each experiment
    if (env === 'DESKTOP') {
      api += `/filteredExperiments${sid}`;
    }
    // MEW Only
    if (env === 'MEW') {
      api += '/experiments/sync?type=MEW';
    }

    if (holdOutapi) {
      $.ajax({
        url: holdOutapi + sid,
        jsonp: 'callback',
        dataType: 'jsonp',
        type: 'GET',
        cache: true,
        timeout: this.ajaxTimeout,
        success(data) {
          holdOutResp = data;
        },
        error() {},
        complete() {},
      });
    }

    if (api) {
      return $.ajax({
        url: api,
        jsonp: 'callback',
        dataType: 'jsonp',
        type: 'GET',
        cache: true,
        timeout: this.ajaxTimeout,
        success(data) {
          return ExpSdkJs.saveExpResponse(data, holdOutResp);
        },
        error() {},
        complete() {},
      });
    }
    return undefined;
  };

  ExpSdkJs.saveExpResponse = function (response, holdOutResp) {
    const env = ExpSdkJs.env;
    let expData;
    let respObj;
    let globalHoldOut;
    let selectedRecipes;

    if (env === 'DESKTOP') {
      expData = response.experiment;
      selectedRecipes = response.selectedRecipes;
      if (holdOutResp) {
        globalHoldOut = holdOutResp.GlobalHoldOut;
      }
      let cookieVal;
      if (globalHoldOut && !globalHoldOut.globalHoldOutKSActive) {
        cookieVal = globalHoldOut.experimented;
        Cookie.set('mercury', cookieVal);
      } else if (globalHoldOut && globalHoldOut.globalHoldOutKSActive) {
        cookieVal = Cookie.get('mercury');
        globalHoldOut.clientSide = cookieVal;
        globalHoldOut.serverSide = cookieVal;
      }
      if (Array.isArray(expData)) {
        respObj = ExpSdkJs.mapResponse(expData, globalHoldOut, selectedRecipes);
        ExpSdkJs.setExpSession(ExpSdkJs[env].expSessionKey, respObj);
      }
    } else if (env === 'MEW') {
      const experiments = response.experiments;
      if (experiments) {
        // Hold out scenario , drop cookie , don't set anything in Session Storage
        Cookie.set('mercury', false);
      } else if (response.urls) {
        Cookie.set('mercury', true);
        expData = response.urls;
        respObj = ExpSdkJs.mapResponse(expData);
        ExpSdkJs.setExpSession(ExpSdkJs[env].expSessionKey, respObj);
      }
    }

    return respObj;
  };

  ExpSdkJs.mapResponse = function (expData, globalHoldOut, selectedRecipes) {
    const env = ExpSdkJs.env;
    let respObj = {};
    const tempRespObj = {};
    const mappings = {};
    let allTargetURLs = [];

    if (env === 'DESKTOP') {
      respObj = expData.reduce((experimentArr, campaign) => {
        // eslint-disable-next-line no-param-reassign
        experimentArr[campaign.analyticsId] = {
          id: campaign.analyticsId,
          tagType: campaign.tagType,
          taggingProvider: campaign.taggingProvider,
          experimentType: campaign.experimentType,
          recipes: campaign.recipes.reduce((recipeArr, recipe) => {
            // eslint-disable-next-line no-param-reassign
            recipeArr[recipe.id] = {
              id: recipe.id,
              tagName: recipe.tagName,
            };
            return recipeArr;
          }, {}),
          targetURLs: campaign.targetUrls,
          recipesType: campaign.recipesType,
          subTargets: campaign.subTargets
            ? campaign.subTargets.reduce((subTargetArr, subTarget) => {
              // eslint-disable-next-line no-param-reassign
              subTargetArr[subTarget.id] = {
                id: subTarget.id,
                name: subTarget.name,
                recipes: subTarget.targetedRecipes.reduce((subRecipeArr, subRecipe) => {
                  // eslint-disable-next-line no-param-reassign
                  subRecipeArr[subRecipe.id] = {};
                  return subRecipeArr;
                }, {}),
                targetURLs: subTarget.segments.reduce((segmentsArr, segment) => _.union(segmentsArr, segment.targetURLs), {}),
              };
              return subTargetArr;
            }, {})
            : [],
          qualifiedSubTarget: campaign.qualifiedSubTarget,
        };
        return experimentArr;
      }, {});
      // const allCampaignIds = _.allKeys(_.omit(respObj, ['expires', 'GlobalHoldOut']));
      const allCampaigns = _.map(_.omit(respObj, 'GlobalHoldOut', 'expires'));
      _.forEach(allCampaigns, (campaign) => {
        allTargetURLs = _.union(allTargetURLs, campaign.targetURLs);
      });
      _.forEach(allTargetURLs, (targetUrl) => {
        _.forEach(allCampaigns, (campaign) => {
          if (includes(campaign.targetURLs, targetUrl)) {
            (mappings[targetUrl.targetUrl] || (mappings[targetUrl.targetUrl] = [])).push(campaign.id);
          }
        });
      });
      respObj.urlCampaignMapping = mappings;
      respObj.selectedRecipes = selectedRecipes;
      respObj.signedInUser = ExpSdkJs.getCookie('macys_online_uid') || ExpSdkJs.getCookie('bloomingdales_online_uid') || 0;
    } else if (env === 'MEW') {
      _.forEach(expData, (urlObj, urlKey) => {
        tempRespObj[urlKey] = urlObj.reduce((recipeArr, recipe) => {
          // eslint-disable-next-line no-param-reassign
          recipeArr[recipe.recipeId] = {
            tagName: recipe.tagName,
            tagType: recipe.tagType,
            taggingProvider: recipe.taggingProvider,
            experimentType: recipe.experimentType,
          };
          // eslint-disable-next-line no-param-reassign
          recipeArr[recipe.recipeId][urlKey] = recipe.qryParams;
          return recipeArr;
        }, {});
      });
      _.forEach(expData, (urlObj, urlKey) => {
        urlObj.reduce((recipeArr, recipe) => {
          // if the object already has been populated in above loop , just add the new url key to the existing object
          if (respObj[recipe.recipeId]) {
            respObj[recipe.recipeId][urlKey] = recipe.qryParams;
          } else {
            respObj[recipe.recipeId] = {
              tagName: recipe.tagName,
              tagType: recipe.tagType,
              taggingProvider: recipe.taggingProvider,
              experimentType: recipe.experimentType,
            };
            respObj[recipe.recipeId][urlKey] = recipe.qryParams;
          }
          return recipeArr;
        }, {});
      });
      _.reduce(
        tempRespObj,
        (result, value, key) => {
          const recps = _.keys(value);
          _.forEach(recps, (val) => {
            (mappings[val] || (mappings[val] = [])).push(key);
          });
          return result;
        },
        {},
      );
      if (tempRespObj) {
        let expArray;
        _.values(tempRespObj).forEach((val) => {
          expArray = _.union(expArray, _.keys(val));
        });
        respObj.mewRecipes = expArray;
        respObj.recipeURLMappping = mappings;
        respObj.signedInUser = ExpSdkJs.getCookie('macys_online_uid') || ExpSdkJs.getCookie('bloomingdales_online_uid') || 0;
      }
    }
    if (globalHoldOut) {
      respObj.GlobalHoldOut = globalHoldOut;
    }
    respObj.expires = new Date().getTime() + ExpSdkJs[env].sessionTTL;
    return respObj;
  };
  ExpSdkJs.isExpSessionExpired = function () {
    const env = ExpSdkJs.env;
    const session = ExpSdkJs.getExpSession(ExpSdkJs[env].expSessionKey);
    const now = new Date().getTime();
    // Remove Session Variable when expire
    // ttl = expire - now
    if (session && session.expires - now < 0) {
      ExpSdkJs.removeExpSession(ExpSdkJs[env].expSessionKey);
      return true;
    }
    return false;
  };
  /*
    Check if the signed In user has changed
  */
  ExpSdkJs.isSignedInSame = function () {
    const env = ExpSdkJs.env;
    const brand = ExpSdkJs.brand;
    const session = ExpSdkJs.getExpSession(ExpSdkJs[env].expSessionKey);
    let cookieVal;

    if (brand && brand === 'bcom') {
      cookieVal = ExpSdkJs.getCookie('bloomingdales_online_uid');
    } else {
      cookieVal = ExpSdkJs.getCookie('macys_online_uid');
    }
    if (cookieVal === undefined || cookieVal === null) {
      cookieVal = 0;
    }
    if (session !== undefined && session.signedInUser !== undefined && cookieVal === session.signedInUser) {
      return true;
    }

    return false;
  };
  ExpSdkJs.setExpSession = function (sessionName, data) {
    ClientSideStorage.setSession(sessionName, JSON.stringify(data));
  };
  ExpSdkJs.getExpSession = function (sessionName) {
    if (ClientSideStorage.getSession(sessionName)) {
      return JSON.parse(ClientSideStorage.getSession(sessionName));
    }
    return undefined;
  };
  ExpSdkJs.removeExpSession = function (sessionName) {
    ClientSideStorage.removeSession(sessionName);
  };
  ExpSdkJs.isRecipeSelected = function (expId) {
    ExpSdkJs.init();
    const defObj = $.Deferred();
    const env = ExpSdkJs.env;
    const queryParamSessionStr = StringUtil.getURLParameter('session');
    const session = ExpSdkJs.getExpSession(ExpSdkJs[env].expSessionKey);
    let keyQuery;
    if (env === 'MEW') {
      if (queryParamSessionStr) {
        const queryParamSession = queryParamSessionStr.split(',');
        keyQuery = _.contains(queryParamSession, expId);
        if (keyQuery === true) {
          defObj.resolve(true);
        }
      }
      let key;
      if (!session || ExpSdkJs.isExpSessionExpired() || !ExpSdkJs.isSignedInSame()) {
        // no Mew Session data present or it has expired, fetch it.
        ExpSdkJs.fetchExpData().always((newSession) => {
          key = _.findKey(_.omit(newSession, 'expires'), expId);
          defObj.resolve(!(key === undefined || key === null || key.length <= 0));
        });
      } else {
        // Mew Session data present , find it in the session.
        key = _.findKey(_.omit(session, 'expires'), expId);
        defObj.resolve(!(key === undefined || key === null || key.length <= 0));
      }
    } else {
      const expArray = ExpSdkJs.getExpIds();
      if (expArray !== undefined && expArray.length > 0 && expArray.indexOf(expId) > -1) {
        defObj.resolve(true);
      } else {
        defObj.resolve(false);
      }
    }
    defObj.promise();
    return defObj;
  };
  ExpSdkJs.addCMPipeDelimited = function (value, attribute) {
    if (_.isUndefined(value)) {
      return attribute;
    }
    if (attribute != null && attribute) {
      return value ? `${attribute}|${value.toString()}` : attribute;
    }
    return value.toString();
  };
  ExpSdkJs.populateTags = function (array, session, tag, type) {
    let attr3Val = '';
    let linkClickVal = '';
    const env = ExpSdkJs.env;
    const brand = ExpSdkJs.brand;
    if (env === 'MEW') {
      // parse MEW tags from MEW Response
      _.forEach(array, (recipeId) => {
        let tagName = '';
        if (session[recipeId]) {
          const headElement = session[recipeId];
          tagName = headElement.tagName;
          const location = ExpSdkJs.getLocation().pathname;

          let containsTargetUrl = false;
          let queryParamMatches = false;
          _.forEach(session.recipeURLMappping[recipeId], (url) => {
            if (session[recipeId] && session[recipeId][url] && session[recipeId][url].length !== 0) {
              if (ExpSdkJs.isMEWQueryParamSatisfied(session, recipeId, url)) {
                queryParamMatches = true;
              }
            } else {
              queryParamMatches = true;
            }
            if ((location === '/' || location === '/index.ognc') && location === url) {
              containsTargetUrl = true;
              return true;
            }
            if (url !== '/' && queryParamMatches && location.indexOf(url) > -1) {
              containsTargetUrl = true;
              return true;
            }
            return undefined;
          });
          if (brand === 'mcom') {
            if (session.recipeURLMappping[recipeId] && (_.include(session.recipeURLMappping[recipeId], '.*') || containsTargetUrl)) {
              if (tagName !== undefined && headElement.tagType === 'Page View') {
                if (tagName.charAt(0) === type && !ExpSdkJs.isTagFired(tagName)) {
                  attr3Val = ExpSdkJs.addCMPipeDelimited(attr3Val, tagName || `tagName unavailable for: ${recipeId}`);
                  // eslint-disable-next-line no-param-reassign
                  tag.pageViewTags = attr3Val;
                }
              } else if (tagName !== undefined && headElement.tagType === 'Link Click') {
                // only retrieve tags with autoTag 'on'
                if (tagName.split('EXPERIMENT_')[1].charAt(0) === type && !ExpSdkJs.isTagFired(tagName)) {
                  linkClickVal = ExpSdkJs.addCMPipeDelimited(linkClickVal, tagName || `tagName unavailable for: ${recipeId}`);
                  // eslint-disable-next-line no-param-reassign
                  tag.linkClickTags = linkClickVal;
                }
              }
            }
          } else if (brand === 'bcom') {
            if (tagName !== undefined && headElement.tagType === 'Page View') {
              if (tagName.charAt(0) === type && !ExpSdkJs.isTagFired(tagName)) {
                attr3Val = ExpSdkJs.addCMPipeDelimited(attr3Val, tagName || `tagName unavailable for: ${recipeId}`);
                // eslint-disable-next-line no-param-reassign
                tag.pageViewTags = attr3Val;
              }
            } else if (tagName !== undefined && headElement.tagType === 'Link Click') {
              // only retrieve tags with autoTag 'on'
              if (tagName.split('EXPERIMENT_')[1].charAt(0) === type && !ExpSdkJs.isTagFired(tagName)) {
                linkClickVal = ExpSdkJs.addCMPipeDelimited(linkClickVal, tagName || `tagName unavailable for: ${recipeId}`);
                // eslint-disable-next-line no-param-reassign
                tag.linkClickTags = linkClickVal;
              }
            }
          }
        }
      });
    } else {
      if (type === 'A') {
        ExpSdkJs.populateNoneTags(array, session, tag, type);
      }
      if (tag.pageViewTags && tag.pageViewTags !== '') {
        attr3Val = tag.pageViewTags;
      }
      if (tag.linkClickTags && tag.linkClickTags !== '') {
        linkClickVal = tag.linkClickTags;
      }
      _.forEach(array, (val) => {
        const campaignId = val.substring(0, val.indexOf('-')); // i.e. 16
        const recipeId = val; // i.e. 16-10

        if (session[campaignId] && session[campaignId].recipes[recipeId]) {
          // if campaign is found in array
          // if the given recipe is target to the page/url or .*(all pages), then populate the tags
          const location = ExpSdkJs.getLocation().pathname;
          let containsTargetUrl = false;
          let queryParamMatches = false;

          _.forEach(session[campaignId].targetURLs, (url) => {
            if (session[campaignId] && session[campaignId].targetURLs && session[campaignId].targetURLs.length !== 0) {
              if (ExpSdkJs.isDesktopQueryParamSatisfied(url)) {
                queryParamMatches = true;
              }
            } else {
              queryParamMatches = true;
            }
            // eslint-disable-next-line no-mixed-operators
            if (
              (queryParamMatches && location === url.targetUrl) ||
              url.targetUrl === '.*' ||
              (queryParamMatches && location.indexOf(url.targetUrl) > -1 && url.targetUrl !== '/')
            ) {
              containsTargetUrl = true;
              return true;
            }
            return false;
          });
          if (brand === 'mcom') {
            if (session[campaignId].targetURLs && containsTargetUrl) {
              const tagName = session[campaignId].recipes[recipeId].tagName;
              if (tagName !== undefined && session[campaignId].tagType === 'Page View') {
                if (tagName.charAt(0) === type && !ExpSdkJs.isTagFired(tagName)) {
                  attr3Val = ExpSdkJs.addCMPipeDelimited(attr3Val, tagName || `tagName unavailable for: ${recipeId}`);
                  // eslint-disable-next-line no-param-reassign
                  tag.pageViewTags = attr3Val;
                }
              } else if (tagName !== undefined && session[campaignId].tagType === 'Link Click') {
                // only retrieve tags with autoTag 'on'
                if (tagName.split('EXPERIMENT_')[1].charAt(0) === type && !ExpSdkJs.isTagFired(tagName)) {
                  linkClickVal = ExpSdkJs.addCMPipeDelimited(linkClickVal, tagName || `tagName unavailable for: ${recipeId}`);
                  // eslint-disable-next-line no-param-reassign
                  tag.linkClickTags = linkClickVal;
                }
              }
            }
          } else if (brand === 'bcom') {
            const tagName = session[campaignId].recipes[recipeId].tagName;
            if (tagName !== undefined && session[campaignId].tagType === 'Page View') {
              if (tagName.charAt(0) === type && !ExpSdkJs.isTagFired(tagName)) {
                attr3Val = ExpSdkJs.addCMPipeDelimited(attr3Val, tagName || `tagName unavailable for: ${recipeId}`);
                // eslint-disable-next-line no-param-reassign
                tag.pageViewTags = attr3Val;
              }
            } else if (tagName !== undefined && session[campaignId].tagType === 'Link Click') {
              // only retrieve tags with autoTag 'on'
              if (tagName.split('EXPERIMENT_')[1].charAt(0) === type && !ExpSdkJs.isTagFired(tagName)) {
                linkClickVal = ExpSdkJs.addCMPipeDelimited(linkClickVal, tagName || `tagName unavailable for: ${recipeId}`);
                // eslint-disable-next-line no-param-reassign
                tag.linkClickTags = linkClickVal;
              }
            }
          }
        }
      });
    }
  };

  ExpSdkJs.getUrlParameters = function () {
    const qsArray = ExpSdkJs.getLocation()
      .search.slice(1)
      .split('&');

    return _.chain(qsArray)
      .map((item) => {
        if (item) {
          const paramMap = item.split('=');
          if (!_.isEmpty(paramMap)) {
            paramMap[0] = paramMap[0].toLowerCase();
          }
          return paramMap;
        }
        return undefined;
      })
      .compact()
      .object()
      .value();
  };

  ExpSdkJs.isMEWQueryParamSatisfied = function (session, recipeId, url) {
    const params = ExpSdkJs.getUrlParameters();
    let isSatisfied = true;
    _.forEach(session[recipeId][url], (qryParam) => {
      if (params[qryParam.key]) {
        // eslint-disable-next-line default-case
        switch (qryParam.operator) {
          case 'EQUALS':
            if (params[qryParam.key] !== qryParam.value) {
              isSatisfied = false;
            }
            break;
          case 'NOTEQUALS':
            if (params[qryParam.key] === qryParam.value) {
              isSatisfied = false;
            }
            break;
          case 'CONTAINS':
            if (qryParam.value !== '*' && params[qryParam.key].indexOf(qryParam.value) < 0) {
              isSatisfied = false;
            }
            break;
          case 'NOTCONTAIN':
            if (qryParam.value !== '*' && params[qryParam.key].indexOf(qryParam.value) > 0) {
              isSatisfied = false;
            }
            break;
          case 'STARTSWITH':
            if (params[qryParam.key].indexOf(qryParam.value) < 1) {
              isSatisfied = false;
            }
            break;
        }
      }
      if (!isSatisfied) {
        return false;
      }
      return undefined;
    });
    return isSatisfied;
  };

  // .toLowerCase()
  ExpSdkJs.isDesktopQueryParamSatisfied = function (url) {
    const params = ExpSdkJs.getUrlParameters();
    let isSatisfied = true;
    _.forEach(url.queryParams, (qryParam) => {
      if (params[qryParam.key]) {
        // eslint-disable-next-line default-case
        switch (qryParam.operator) {
          case 'EQUALS':
            if (params[qryParam.key] !== qryParam.value) {
              isSatisfied = false;
            }
            break;
          case 'NOTEQUALS':
            if (params[qryParam.key] === qryParam.value) {
              isSatisfied = false;
            }
            break;
          case 'CONTAINS':
            if (qryParam.value !== '*' && params[qryParam.key].indexOf(qryParam.value) < 0) {
              isSatisfied = false;
            }
            break;
          case 'NOTCONTAIN':
            if (qryParam.value !== '*' && params[qryParam.key].indexOf(qryParam.value) > 0) {
              isSatisfied = false;
            }
            break;
          case 'STARTSWITH':
            if (params[qryParam.key].indexOf(qryParam.value) < 1) {
              isSatisfied = false;
            }
            break;
        }
      }
      if (!isSatisfied) {
        return false;
      }
      return undefined;
    });
    return isSatisfied;
  };
  ExpSdkJs.isTagFired = function (tagName) {
    const firedLinkClickTags = ClientSideStorage.getSession(tagName);
    const sessionExists = !!firedLinkClickTags;
    // if not in session (first time fired): store in session
    if (!sessionExists) {
      return false;
    }
    return true;
  };
  ExpSdkJs.sessionBasedLinkClickTagFired = function (tagName) {
    ClientSideStorage.setSession(tagName, new Date().toString());
  };
  ExpSdkJs.isArray = function (array) {
    if (Array.isArray(array) && array !== undefined && array.length !== 0 && array[0] !== '') {
      return true;
    }
    return false;
  };
  ExpSdkJs.fireLinkClickTags = function (recipeIds, type) {
    ExpSdkJs.getTags(recipeIds, type)
      .always((tagsList) => {
        let tagsArray;
        if (tagsList && tagsList.linkClickTags) {
          tagsArray = tagsList.linkClickTags.split('|');
        }
        // check whether array is exists to prevent error
        if (ExpSdkJs.isArray(tagsArray)) {
          // loop through each tag in array
          _.forEach(tagsArray, (tag) => {
            // STEP 1: parse tag for information
            const tagExpName = tag.split('-_-')[1];
            const tagExpValue = tag.split('-_-')[2];
            const generatedHref = `${document.location.pathname}/EXP?cm_sp=${tag}`;
            const generatedPageID = _.isEmpty(BTDataDictionaryUtils.get('MACYS'))
              ? 'UNKNOWN'
              : BTDataDictionaryUtils.get('MACYS').brightTag.navigation.pageName;
            const tagSessionBased = tag.split('EXPERIMENT_')[1].charAt(0) === 'A';
            // NOTE: cannot use individual specific namespace in Common module
            // if ( !_.isUndefined( window.MACYS ) && !_.isUndefined( window.MACYS.brightTag )
            // && !_.isUndefined( window.MACYS.brightTag.navigation )
            // && !_.isUndefined( window.MACYS.brightTag.navigation.pageName && window.MACYS.brightTag.navigation.pageName !== "" ) ) {
            //     generatedPageID = window.MACYS.brightTag.navigation.pageName;
            // }
            // STEP 2: store data
            const data = {
              expName: tagExpName,
              expValue: tagExpValue,
              name: 'EXPERIMENT_LINK',
              href: generatedHref,
              pageID: generatedPageID,
              sessionBased: tagSessionBased,
            };
            // STEP 3: pass data to coremetrics and fire
            // ******************** PUT this in HomePage.js link click module to abstract firing calls from ExpSdkJs
            if (typeof window.cmCreateManualLinkClickTag !== 'undefined') {
              window.cmCreateManualLinkClickTag(data.href, data.name, data.pageID);
              ExpSdkJs.sessionBasedLinkClickTagFired(tag);
            }
          });
        }
      })
      .fail(() => {
        // console.log('rejected deferrred');
      });
  };
  ExpSdkJs.getDesktopServerSideExperiments = function () {
    const cookie = Cookie.get(ExpSdkJs.DESKTOP.expCookieName);
    let parsedExpString;
    let expArray = [];
    if (cookie && decodeURIComponent(cookie).indexOf('|') > 1) {
      parsedExpString = decodeURIComponent(cookie).split('|')[2];
    }
    if (parsedExpString) {
      expArray = parsedExpString.split(',');
    }
    return expArray;
  };
  ExpSdkJs.getTags = function (recipeIds, t) {
    ExpSdkJs.init();
    let type = t;
    const env = ExpSdkJs.env;
    let expArray = [];
    const tag = {
      pageViewTags: '',
      linkClickTags: '',
    };
    const defObj = $.Deferred();

    const defObj2 = $.Deferred();

    if (!t || (t !== 'A' && t !== 'M')) {
      // Reject anything or override with Auto in case of any junk values
      type = 'A';
    }
    if (recipeIds && recipeIds.length > 0) {
      expArray = recipeIds;
      defObj2.resolve();
    } else if (env === 'MEW') {
      ExpSdkJs.getMewExpIds().always((mexExpArr) => {
        expArray = mexExpArr;
        defObj2.resolve();
      });
    } else {
      expArray = ExpSdkJs.getExpIds();
      defObj2.resolve();
    }
    defObj2.promise().then(() => {
      const session = ExpSdkJs.getExpSession(ExpSdkJs[env].expSessionKey);
      if (!session || ExpSdkJs.isExpSessionExpired() || !ExpSdkJs.isSignedInSame()) {
        ExpSdkJs.fetchExpData().always((newSession) => {
          if (newSession) {
            ExpSdkJs.populateTags(expArray, newSession, tag, type);
            defObj.resolve(tag);
          } else {
            defObj.reject(tag);
          }
        });
      } else if (ExpSdkJs.isArray(expArray)) {
        ExpSdkJs.populateTags(expArray, session, tag, type);
        defObj.resolve(tag);
      } else {
        defObj.reject(tag);
      }
    });
    defObj.promise();
    return defObj;
  };
  ExpSdkJs.fireDesktopAdobeTags = function () {
    ExpSdkJs.getAllSelectedRecipes().always(() => {
      ExpSdkJs.init();
      const env = ExpSdkJs.env;
      const session = ExpSdkJs.getExpSession(ExpSdkJs[env].expSessionKey);
      const clientExps = ExpSdkJs.getDesktopClientSideExperiments();
      // const clientIds = [];
      const finalClientRecipes = [];
      // let campaignId;
      let allEligibleCampaigns = [];
      const allSelectedCampaigns = [];
      // const allCampaignIds = _.allKeys(_.omit(session, ['expires', 'GlobalHoldOut', 'urlCampaignMapping']));
      const location = ExpSdkJs.getLocation().pathname;
      _.forEach(_.allKeys(session.urlCampaignMapping), (targetUrl) => {
        const queryParamMatchedCampaigns = [];
        _.forEach(session.urlCampaignMapping[targetUrl], (campaignId) => {
          if (
            session[campaignId] &&
            session[campaignId].targetURLs &&
            session[campaignId].targetURLs.length !== 0 &&
            session[campaignId].experimentType === 'clientSide'
          ) {
            _.forEach(session[campaignId].targetURLs, (url) => {
              if (targetUrl === url.targetUrl) {
                // eslint-disable-next-line no-mixed-operators
                if (
                  url.targetUrl === '.*' ||
                  (url.targetUrl === '/' && url.targetUrl === location) ||
                  (location.indexOf(targetUrl) > -1 && targetUrl !== '/' && ExpSdkJs.isDesktopQueryParamSatisfied(url))
                ) {
                  queryParamMatchedCampaigns.push(campaignId);
                }
              }
            });
          }
        });
        allEligibleCampaigns = _.union(allEligibleCampaigns, queryParamMatchedCampaigns);
      });
      _.forEach(clientExps, (recipeId) => {
        const selCamp = recipeId.substring(0, recipeId.indexOf('-'));
        allSelectedCampaigns.push(selCamp);
      });
      const noneCampaigns = _.difference(allEligibleCampaigns, allSelectedCampaigns);
      _.forEach(noneCampaigns, (noneCamp) => {
        if (session[noneCamp] && session[noneCamp].taggingProvider) {
          if (session[noneCamp].taggingProvider === 'Both' || session[noneCamp].taggingProvider === 'Adobe') {
            finalClientRecipes.push(`${noneCamp}-10`);
          }
        }
      });
      _.forEach(clientExps, (clientExp) => {
        const expId = clientExp.split('-', 1);
        if (session[expId] && session[expId].taggingProvider) {
          if (session[expId].taggingProvider === 'Both' || session[expId].taggingProvider === 'Adobe') {
            finalClientRecipes.push(clientExp);
          }
        }
      });

      // const pageType = window.utag_data.page_type || window.utag.data.page_type;
      const data = {
        event_name: 'experiment',
        experimentation_ids: finalClientRecipes,
      };
      if (finalClientRecipes.length > 0) {
        TagManagerUtil.fireTag('link', data);
      }
    });
  };

  ExpSdkJs.fireMewAdobeTags = function () {
    ExpSdkJs.getAllSelectedRecipes().always(() => {
      ExpSdkJs.init();
      const env = ExpSdkJs.env;
      const session = ExpSdkJs.getExpSession(ExpSdkJs[env].expSessionKey);
      const clientRecipes = [];
      const finalClientRecipes = [];
      let allEligibleRecipes = [];
      const location = ExpSdkJs.getLocation().pathname;
      const mewRecipes = session.mewRecipes;
      _.forEach(mewRecipes, (recipe) => {
        if (session[recipe].experimentType === 'clientSide') {
          clientRecipes.push(recipe);
        }
      });
      _.forEach(clientRecipes, (clientRecipe) => {
        const queryParamMatchedRecipes = [];
        _.forEach(session.recipeURLMappping[clientRecipe], (targetUrl) => {
          const urls = _.allKeys(_.omit(session[clientRecipe], ['tagName', 'tagType', 'taggingProvider', 'experimentType']));
          if (session[clientRecipe] && urls && urls.length !== 0) {
            _.forEach(urls, (url) => {
              if (targetUrl === url) {
                // eslint-disable-next-line no-mixed-operators
                if (
                  url === '.*' ||
                  (url === '/' && url === location) ||
                  (location.indexOf(targetUrl) > -1 && targetUrl !== '/' && ExpSdkJs.isMEWQueryParamSatisfied(session, clientRecipe, url))
                ) {
                  queryParamMatchedRecipes.push(clientRecipe);
                }
              }
            });
          }
        });
        allEligibleRecipes = _.union(allEligibleRecipes, queryParamMatchedRecipes);
      });
      _.forEach(allEligibleRecipes, (recipe) => {
        if (session[recipe].taggingProvider === 'Both' || session[recipe].taggingProvider === 'Adobe') {
          finalClientRecipes.push(recipe);
        }
      });

      // const pageType = window.utag_data.page_type || window.utag.data.page_type;
      const data = {
        event_name: 'experiment',
        experimentation_ids: finalClientRecipes,
      };
      if (finalClientRecipes.length > 0) {
        TagManagerUtil.fireTag('link', data);
      }
    });
  };
  ExpSdkJs.fireAdobeTags = function () {
    const env = ExpSdkJs.env;
    if (env === 'MEW') {
      ExpSdkJs.fireMewAdobeTags();
    } else {
      ExpSdkJs.fireDesktopAdobeTags();
    }
  };
  ExpSdkJs.populateNoneTags = function (array, session, tag, type) {
    let attr3Val = '';
    let linkClickVal = '';
    // let campaignId;
    let allEligibleCampaigns = [];
    const allSelectedCampaigns = [];
    let noneCampaigns = [];
    // const env = ExpSdkJs.env;
    // const allCampaignIds = _.allKeys(_.omit(session, ['expires', 'GlobalHoldOut', 'urlCampaignMapping']));
    const location = ExpSdkJs.getLocation().pathname;

    _.forEach(_.allKeys(session.urlCampaignMapping), (targetUrl) => {
      const queryParamMatchedCampaigns = [];
      _.forEach(session.urlCampaignMapping[targetUrl], (campaignId) => {
        const currCamp = session[campaignId];
        const targetId = currCamp.qualifiedSubTarget;
        if (targetId && currCamp && currCamp.subTargets[targetId] && currCamp.subTargets[targetId].targetURLs.length !== 0) {
          _.forEach(currCamp.subTargets[targetId].targetURLs, (url) => {
            if (targetUrl === url.targetUrl) {
              // eslint-disable-next-line no-mixed-operators
              if (
                url.targetUrl === '.*' ||
                (url.targetUrl === '/' && url.targetUrl === location) ||
                (location.indexOf(targetUrl) > -1 && targetUrl !== '/' && ExpSdkJs.isDesktopQueryParamSatisfied(url))
              ) {
                queryParamMatchedCampaigns.push(campaignId);
              }
            }
          });
        } else if (currCamp && currCamp.targetURLs && currCamp.targetURLs.length !== 0) {
          _.forEach(currCamp.targetURLs, (url) => {
            if (targetUrl === url.targetUrl) {
              // eslint-disable-next-line no-mixed-operators
              if (
                url.targetUrl === '.*' ||
                (url.targetUrl === '/' && url.targetUrl === location) ||
                (location.indexOf(targetUrl) > -1 && targetUrl !== '/' && ExpSdkJs.isDesktopQueryParamSatisfied(url))
              ) {
                queryParamMatchedCampaigns.push(campaignId);
              }
            }
          });
        }
      });
      allEligibleCampaigns = _.union(allEligibleCampaigns, queryParamMatchedCampaigns);
    });

    _.forEach(array, (recipeId) => {
      const selCamp = recipeId.substring(0, recipeId.indexOf('-'));
      allSelectedCampaigns.push(selCamp);
    });
    noneCampaigns = _.difference(allEligibleCampaigns, allSelectedCampaigns);
    _.forEach(noneCampaigns, (noneCamp) => {
      let tagName = '';

      if (session && session[noneCamp] && session[noneCamp].qualifiedSubTarget) {
        tagName = ExpSdkJs.getTagNameForTargeted(session, noneCamp);
      } else {
        tagName = ExpSdkJs.getTagNameForRegular(session, noneCamp);
      }
      if (session && session[noneCamp] && session[noneCamp].tagType === 'Page View' && tagName) {
        if (tagName.charAt(0) === type && !ExpSdkJs.isTagFired(tagName)) {
          attr3Val = ExpSdkJs.addCMPipeDelimited(attr3Val, tagName || `noneTag unavailable for: ${noneCamp}`);
          // eslint-disable-next-line no-param-reassign
          tag.pageViewTags = attr3Val;
        }
      } else if (session && session[noneCamp] && session[noneCamp].tagType === 'Link Click' && tagName) {
        if (tagName.split('EXPERIMENT_')[1].charAt(0) === type && !ExpSdkJs.isTagFired(tagName)) {
          linkClickVal = ExpSdkJs.addCMPipeDelimited(linkClickVal, tagName || `noneTag unavailable for: ${noneCamp}`);
          // eslint-disable-next-line no-param-reassign
          tag.linkClickTags = linkClickVal;
        }
      }
    });
  };

  ExpSdkJs.getTagNameForTargeted = function (session, noneCamp) {
    let tagName;
    if (includes(session[noneCamp].experimentType, 'serverSide')) {
      if (
        session.GlobalHoldOut &&
        session.GlobalHoldOut.serverSide === true &&
        session[noneCamp].recipes[`${noneCamp}-10-${session[noneCamp].qualifiedSubTarget}`]
      ) {
        tagName = session[noneCamp].recipes[`${noneCamp}-10-${session[noneCamp].qualifiedSubTarget}`].tagName;
      } else if (
        session.GlobalHoldOut &&
        session.GlobalHoldOut.serverSide === false &&
        session[noneCamp].recipes[`${noneCamp}-9-${session[noneCamp].qualifiedSubTarget}`]
      ) {
        tagName = session[noneCamp].recipes[`${noneCamp}-9-${session[noneCamp].qualifiedSubTarget}`].tagName;
      }
    } else if (includes(session[noneCamp].experimentType, 'clientSide')) {
      if (
        session.GlobalHoldOut &&
        session.GlobalHoldOut.clientSide === true &&
        session[noneCamp].recipes[`${noneCamp}-10-${session[noneCamp].qualifiedSubTarget}`]
      ) {
        tagName = session[noneCamp].recipes[`${noneCamp}-10-${session[noneCamp].qualifiedSubTarget}`].tagName;
      } else if (
        session.GlobalHoldOut &&
        session.GlobalHoldOut.clientSide === false &&
        session[noneCamp].recipes[`${noneCamp}-9-${session[noneCamp].qualifiedSubTarget}`]
      ) {
        tagName = session[noneCamp].recipes[`${noneCamp}-9-${session[noneCamp].qualifiedSubTarget}`].tagName;
      }
    }
    return tagName;
  };

  ExpSdkJs.getTagNameForRegular = function (session, noneCamp) {
    let tagName;
    if (session && session[noneCamp] && session[noneCamp] && includes(session[noneCamp].experimentType, 'serverSide')) {
      if (session.GlobalHoldOut && session.GlobalHoldOut.serverSide === true && session[noneCamp].recipes[`${noneCamp}-10`]) {
        tagName = session[noneCamp].recipes[`${noneCamp}-10`].tagName;
      } else if (session.GlobalHoldOut && session.GlobalHoldOut.serverSide === false && session[noneCamp].recipes[`${noneCamp}-9`]) {
        tagName = session[noneCamp].recipes[`${noneCamp}-9`].tagName;
      }
    } else if (session && session[noneCamp] && session[noneCamp] && includes(session[noneCamp].experimentType, 'clientSide')) {
      if (session.GlobalHoldOut && session.GlobalHoldOut.clientSide === true && session[noneCamp].recipes[`${noneCamp}-10`]) {
        tagName = session[noneCamp].recipes[`${noneCamp}-10`].tagName;
      } else if (session.GlobalHoldOut && session.GlobalHoldOut.clientSide === false && session[noneCamp].recipes[`${noneCamp}-9`]) {
        tagName = session[noneCamp].recipes[`${noneCamp}-9`].tagName;
      }
    }
    return tagName;
  };

  ExpSdkJs.getNoneTags = function (array, type) {
    ExpSdkJs.init();
    let attr3Val = '';
    let linkClickVal = '';
    const env = ExpSdkJs.env;
    const session = ExpSdkJs.getExpSession(ExpSdkJs[env].expSessionKey);
    _.forEach(array, (noneCamp) => {
      let tagName = '';
      if (session && session[noneCamp] && session[noneCamp].qualifiedSubTarget) {
        tagName = ExpSdkJs.getTagNameForTargeted(session, noneCamp);
      } else {
        tagName = ExpSdkJs.getTagNameForRegular(session, noneCamp);
      }
      if (session && session[noneCamp] && session[noneCamp].tagType === 'Page View' && tagName) {
        attr3Val = ExpSdkJs.addCMPipeDelimited(attr3Val, tagName || `noneTag unavailable for: ${noneCamp}`);
      } else if (session && session[noneCamp] && session[noneCamp].tagType === 'Link Click' && tagName) {
        linkClickVal = ExpSdkJs.addCMPipeDelimited(linkClickVal, tagName || `noneTag unavailable for: ${noneCamp}`);
      }
    });
    if (type === 'PV') {
      // Page View.
      return attr3Val;
    }
    if (type === 'LC') {
      // Link Click
      return linkClickVal;
    }
    return undefined;
  };

  ExpSdkJs.replaceMEWQueryParamRecipes = function (queryParamRecipes, mexExpArr) {
    const objArray = [];
    const repArray = [];
    const listOfRecipes = mexExpArr;
    let tempSessionStorage = mexExpArr;
    _.forEach(queryParamRecipes, (replacement) => {
      const queryParamId = replacement.split('-')[0];
      const theObj = _.find(listOfRecipes, (existingRecipe) => {
        const existingRecipeId = existingRecipe.split('-')[0];
        return queryParamId === existingRecipeId;
      });
      if (theObj) {
        if (theObj !== replacement) {
          repArray.push(replacement);
          objArray.push(theObj);
        }
      } else {
        tempSessionStorage.push(replacement);
      }
    });

    if (repArray && objArray && repArray.length > 0 && objArray.length > 0) {
      _.forEach(repArray, (rep) => {
        tempSessionStorage.push(rep);
      });
      _.forEach(objArray, (obj) => {
        tempSessionStorage = _.without(tempSessionStorage, obj);
      });
    }
    return tempSessionStorage;
  };
  module.exports = ExpSdkJs;
}
