// #MODULE - Equalizer
// > Author: Sarfaraz Merchant
// >
// > Create Date: <July 17, 2014>
// >
// ##DESCRIPTION: Module to equalize height of child elements.
// >
{
  const $ = require('jquery');
  // ###Method - setHeight( itemSet, height, selector )
  // Private method to set height of each element in itemSet with passed height
  //
  // > parameters
  // >
  // + *itemSet* : *Array* - An array of elements that needs height change
  // + *height* : *Number* - Height that needs to be set for each element
  // + *selector* : *String* - Optional, if passed will find for item inside element and set it's height
  //
  function setHeight(itemSet, height, selector) {
    itemSet.each(function () {
      const item = $(this);
      const itemHeight = parseInt(item.css('height'), 10);
      const selectedEl = selector && $(selector, item).length ? $(selector, item) : undefined;
      let selectedElHeight;
      let heightDiff;

      if (selectedEl) {
        selectedElHeight = parseInt(selectedEl.css('height'), 10);
        heightDiff = height - itemHeight;
        if (heightDiff > 0) {
          selectedEl.css('height', heightDiff + selectedElHeight);
        }
      } else if (height > itemHeight) {
        item.css('height', height);
      }
    });
  }

  // ###Method - execute( obj, selector )
  // Public method to set equal height of each child item of the passed object.
  //
  // > parameters
  // >
  // + *obj* : *DOM element* - All first level element of this element will be made equal height
  // + *selector* : *String* - Optional, if this passed this element will be made equal by increasing the height of this element
  //
  function execute(obj, selector) {
    const items = $('li', obj);
    const len = items.length;
    let row = [];
    let cloneRow = [];
    let top = 0;
    let height = 0;

    items.each(function (index) {
      const element = $(this);
      const offsetTop = Math.round(element.offset().top);
      const elementHeight = parseInt(element.css('height'), 10);

      if (index === 0) {
        top = offsetTop;
      }

      if ((offsetTop !== top && row.length > 0) || index === len - 1) {
        // if it is the last item then we need to push it to row
        if (index === len - 1) {
          height = elementHeight > height ? elementHeight : height;
          row.push(element);
        }
        top = offsetTop;
        cloneRow = row.slice();
        setHeight($(cloneRow), height, selector);
        row = [];
        height = 0;
      }

      height = elementHeight > height ? elementHeight : height;
      row.push(element);
    });
  }

  module.exports = {
    execute,
  };
}
