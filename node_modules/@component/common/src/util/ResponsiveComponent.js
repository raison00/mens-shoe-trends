{
  const $ = require('jquery');
  // Default configurations
  const sizes = {
    small: 'small',
    medium: 'medium',
    large: 'large',
    huge: 'huge',
  };
  const config = {
    componentCollection: [],
    breakPoints: [401, 500, 800],
  };
  const functions = {
    small() {},
    medium() {},
    large() {},
    huge() {},
    textResizer() {},
  };

  // Compares components against the breakPoints to determine which size category they fall into
  function resizer() {
    const $components = config.componentCollection;
    const breakPoints = config.breakPoints;
    let size;
    for (let i = 0; i < $components.length; i++) {
      if (
        !$($components[i]).is(':visible') &&
        $($components[i])
          .parent()
          .is('.bannerSlides')
      ) {
        // Handle Hidden Banners in widgets
        size = $($components[i])
          .parent()
          .width();
      } else if (
        !$($components[i]).is(':visible') &&
        $($components[i])
          .parent()
          .parent()
          .parent()
          .is('.widgetContent')
      ) {
        // Handle Hidden Banners in FLEX widgets
        size = $($components[i])
          .parent()
          .parent()
          .width();
      } else {
        size = $($components[i]).width();
      }
      switch (true) {
        case size < breakPoints[0]:
          if ($components[i].currentSize !== sizes.small) {
            functions.small($components[i]);
            $components[i].currentSize = sizes.small;
          }
          break;
        case size >= breakPoints[0] && size < breakPoints[1]:
          if ($components[i].currentSize !== sizes.medium) {
            functions.medium($components[i]);
            $components[i].currentSize = sizes.medium;
          }
          break;
        case size >= breakPoints[1] && size < breakPoints[2]:
          if ($components[i].currentSize !== sizes.large) {
            functions.large($components[i]);
            $components[i].currentSize = sizes.large;
          }
          break;
        case size >= breakPoints[2]:
          if ($components[i].currentSize !== sizes.huge) {
            functions.huge($components[i]);
            $components[i].currentSize = sizes.huge;
          }
          break;
        default:
          break;
      }

      // Allows for dynamic text resizing for components that define such functionality
      functions.textResizer($components[i]);
    }
  }

  // Attach resizer function to window resize listener and fire resize
  function makeResponsive() {
    $(window)
      .resize(() => {
        resizer();
      })
      .trigger('resize');
  }

  // onScreen jQuery plugin v0.2.1
  // (c) 2011-2013 Ben Pickles
  //
  // http://benpickles.github.io/onScreen
  //
  // Released under MIT license.
  $.expr[':'].onScreen = function (elem) {
    const $window = $(window);
    const viewportTop = $window.scrollTop();
    const viewportHeight = $window.height();
    const viewportBottom = viewportTop + viewportHeight;
    const $elem = $(elem);
    const top = $elem.offset().top;
    const height = $elem.height();
    const bottom = top + height;

    return (
      (top >= viewportTop && top < viewportBottom) ||
      (bottom > viewportTop && bottom <= viewportBottom) ||
      (height > viewportHeight && top <= viewportTop && bottom >= viewportBottom)
    );
  };

  /**
   * $.parseParams - parse query string parameters into an object.
   */
  const re = /([^&=]+)=?([^&]*)/g;
  const decodeRE = /\+/g; // Regex for replacing addition symbol with a space
  const decode = function (str) {
    return decodeURIComponent(str.replace(decodeRE, ' '));
  };
  $.parseParams = function (query) {
    const params = {};
    let e;
    // eslint-disable-next-line no-cond-assign
    while ((e = re.exec(query))) {
      let k = decode(e[1]);
      const v = decode(e[2]);
      if (k.substring(k.length - 2) === '[]') {
        k = k.substring(0, k.length - 2);
        (params[k] || (params[k] = [])).push(v);
      } else {
        params[k] = v;
      }
    }
    return params;
  };

  function responsiveResize(imgEl, container, cb) {
    const $images = $(imgEl, container);
    const imgLen = $images.length;

    let containerWidth = $(container).width();
    let containerInnerWidth = $(container).innerWidth();
    let count = 0; // used for callback

    $images.each(function () {
      const $img = $(this);
      let src = $img.attr('src');
      const imgWidth = this.naturalWidth || $img.width();
      const $imgContainer = $img.closest(container);

      containerWidth = $imgContainer.width() || containerWidth;
      containerInnerWidth = $imgContainer.innerWidth() || containerInnerWidth;

      let width = Math.round(containerWidth);
      width = Math.ceil(width / 100) * 100;

      if (src) {
        const urlSplit = src.split('?');
        const baseUrl = urlSplit[0];
        const params = $.parseParams(urlSplit[1] || '');
        const defaultWid = params.wid || 100;

        if (width > defaultWid && defaultWid < containerInnerWidth && containerWidth > imgWidth) {
          params.wid = width;
          src = `${baseUrl}?${$.param(params)}`;
          $img.load(() => {
            ++count;
          });
          $img.attr('src', src);
        } else {
          ++count;
        }
        if (cb) {
          if (count >= imgLen) {
            cb();
          }
        }
      }
    });
  }

  // debounced resize
  (function (jq, sr) {
    const jquery = jq;
    // debouncing function from John Hann
    // http://unscriptable.com/index.php/2009/03/20/debouncing-javascript-methods/
    const debounce = function (func, threshold, execAsap) {
      let timeout;

      return function debounced(...args) {
        const obj = this;

        function delayed() {
          if (!execAsap) {
            func.apply(obj, args);
          }
          timeout = null;
        }

        if (timeout) {
          clearTimeout(timeout);
        } else if (execAsap) {
          func.apply(obj, args);
        }
        timeout = setTimeout(delayed, threshold || 100);
      };
    };
    // smartresize
    jquery.fn[sr] = function (fn) {
      return fn ? this.bind('resize', debounce(fn)) : this.trigger(sr);
    };
  }($, 'smartresize'));

  module.exports = {
    responsiveResize,
    makeResponsive,
    functions,
    config,
  };
}
