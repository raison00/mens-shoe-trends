// #MODULE - Publish Subscribe
// > Author: Joseph Acosta
// >
// > Create Date: November 18, 2013
// >
// ##DESCRIPTION: AMD module that wraps a publish / subscribe also known as an observer implementation.
{
  const jquery = require('jquery');
  // ### A public object that has all the observers created by this observer object
  const observers = {};

  // private method to create an observer object that can be used
  function getObserver() {
    const callbacks = jquery.Callbacks('unique');
    const observer = {
      publish(data) {
        callbacks.fire(data);
      },
      subscribe: callbacks.add,
      unsubscribe: callbacks.remove,
      has: callbacks.has,
      empty: callbacks.empty,
    };

    return observer;
  }

  // ###Method - hasObserver(psID) public method to find an existing observer
  // an observer will have 3 methods, publish, subscribe and unsubscribe
  //
  // > parameters
  // >
  // + *psID* - is the unique name of the observer
  //
  // > returns
  // >
  // + A reference to your observer if found or undefined.
  function hasObserver(psID) {
    let obs;

    if (psID) {
      Object.keys(observers).forEach(() => {
        if (!obs && observers[psID]) {
          obs = observers[psID];
        }
      });
    }
    return obs;
  }

  // ###Method - observe(psID) public method to create an observer
  // an observer will have 3 methods, publish, subscribe and unsubscribe
  //
  // > parameters
  // >
  // + *psID* - is the unique name of the observer
  //
  // > returns
  // >
  // + A reference to your observer, but this can also be accessed via just passing id into pubsub.observe(psID).
  function observe(psID) {
    let obs;

    if (psID) {
      if (!observers[psID]) {
        observers[psID] = getObserver();
      }
      obs = observers[psID];
    }
    return obs;
  }

  // ###Method - removeObserver(psID) public method to remove an observer
  //
  // > parameters
  // >
  // + *psID* - is the unique name of the observer
  //
  // > returns
  // >
  // + *true* if observer exists and gets removed, *false* otherwise
  function removeObserver(psID) {
    let isRemoved = false;

    if (psID && observers[psID]) {
      observers[psID].empty();
      delete observers[psID];
      isRemoved = true;
    }
    return isRemoved;
  }

  module.exports = {
    observe,
    observers,
    removeObserver,
    hasObserver,
  };
}
// ### Example usage:
// #### method 1
//    define(['pubsub'], function(pubsub) {
//
//        var observer;
//
//        // create observer and hold reference to individual observer
//        // drawback is you end up with a lot of variables for each different
//        // type of observer and the code can get confusing
//        observer = pubsub.observe("pageViewTag");
//
//        // create method to be called when data is published to the obeserver
//        observer.subscribe(function(data) {
//            console.log( JSON.stringify( data ) );
//        });
//
//        // somewhere later in your code
//        observer.publish({"firstname": "Joe", "lastname": "Doe"});
//        // console will log a message
//    });
//
// #### method 2
//    define(['pubsub'], function(pubsub) {
//
//        // create observer but don't hold a reference
//        // drawback is your have to remember the name
//        pubsub.observe("pageViewTag2");
//
//        // create method to be called when data is published to the obeserver
//        pubsub.observe("pageViewTag2").subscribe(function(data) {
//            console.log( JSON.stringify( data ) );
//        });
//
//        // somewhere later in your code
//        pubsub.observe("pageViewTag2").publish({"firstname": "Joe", "lastname": "Doe"});
//        // console will log a message
//    });
//
// #### method 3
//    define(['pubsub'], function(pubsub) {
//
//        var observerTypes = {};
//        observerTypes.pageViewObserver = "pageViewTag3";
//        observerTypes.elementObserver = "elementTag";
//
//        // create observer but don't hold a reference
//        // use a constant object to reference each different observer type
//        pubsub.observe(observerTypes.pageViewObserver);
//        pubsub.observe(observerTypes.elementObserver);
//
//        // create method to be called when data is published to the obeserver
//        pubsub.observe("pageViewTag2").subscribe(function(data) {
//            console.log( JSON.stringify( data ) );
//        });
//
//        // somewhere later in your code
//        pubsub.observe(pageViewObserver).publish({"firstname": "Joe", "lastname": "Doe"});
//        // console will log a message
//    });
