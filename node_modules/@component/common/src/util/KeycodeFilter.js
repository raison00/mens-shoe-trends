// #MODULE - KeycodeFilter
// > Authors: Sarfaraz Merchant
// >
// > Create Date: July, 2013
// >
// ##DESCRIPTION: This module can be used to filter what user is entering in input fields
//
{
  const $ = require('jquery');
  const browser = require('./Browser');
  const regexFilters = {
    digitsOnly: /\d/,
    alphaNumeric: /[a-zA-Z\d]/,
    noDigits: /[^\d]/,
    noSpaces: /[^\s]/,
    digitsAndDots: /[\d.]+/,
  };
  const inputSelector = 'input:not([type=hidden]), textarea';
  const isMac = browser.get().os === 'mac';

  // ###Method - getWrapper ( el )
  // Private method to find container based on passed argument type
  //
  // > parameters
  // >
  // + *el* : *String | jQuery Object | DOM Node* - Wrapper containg inputs
  //
  // > returns
  // >
  // + *element* : *jQuery Object*
  function getWrapper(el) {
    let element;

    if (typeof el === 'string') {
      element = $(el);
      if (element.length === 0) {
        throw new Error('Invalid selector string.');
      }
    } else if (el && el.jquery) {
      element = el;
    } else if (el && el.nodeType && el.nodeType === 1) {
      element = $(el);
    }

    return element;
  }

  // ###Method - charCheck ( ev, regex )
  // Private method to find container based on passed argument type
  //
  // > parameters
  // >
  // + *el* : *String | jQuery Object | DOM Node* - Wrapper containg inputs
  //
  // > returns
  // >
  // + *boolen* : If valid character will return true else false
  function charCheck(ev, regex) {
    const code = ev.which;
    const key = window.String.fromCharCode(code);
    const ctrlKey = isMac ? ev.metaKey : ev.ctrlKey;
    const keyCodesToIgnore = [0, 8, 13];

    // if ctrlKey is pressed return true ( assumption that user is trying to paste )
    // if one of the keys that needs to be ignored then return true
    // if regex passed return true
    // else return false
    if (ctrlKey || $.inArray(code, keyCodesToIgnore) >= 0 || regex.test(key)) {
      return true;
    }
    return false;
  }

  // ###Method - enable ( element, keys )
  // Public method to enable autoTabbing on inputs
  //
  // > parameters
  // >
  // + *element* : *String | jQuery Object | DOM Node* - Wrapper containg inputs
  // + *filterType* : *String* - Name of the predefined filter
  //
  // > returns
  // >
  // + none
  function enable(element, filterType) {
    const wrapper = getWrapper(element);
    const regex = regexFilters[filterType];

    if (!regex) {
      throw new Error('Invalid filter type.');
    }

    wrapper.on(
      'keypress.filter',
      inputSelector,
      {
        regex,
      },
      ev => charCheck(ev, ev.data.regex),
    );
  }

  // ###Method - disbale ( element )
  // Public method to disable filtering input
  //
  // > parameters
  // >
  // + *element* : *jQuery Object* - Wrapper containg input
  //
  // > returns
  // >
  // + none
  function disable(element) {
    element.off('keypress.filter');
  }

  module.exports = {
    enable,
    disable,
  };
}
