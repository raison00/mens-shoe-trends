// #MODULE - Analytics
// > Author: Joseph Acosta
// >
// > Create Date: December 18, 2013
// >
// ##DESCRIPTION: AMD module that abstracts an analytics implementation via pub sub.
{
  const pubsub = require('./PublishSubscribe');
  const Analytics = {};

  // generic pub sub names for analytics modules
  Analytics.pageViewTag = 'PAGE_VIEW_TAG';
  Analytics.productViewTag = 'PRODUCT_VIEW_TAG';
  Analytics.orderTag = 'ORDER_TAG';
  Analytics.elementTag = 'ELEMENT_TAG';
  Analytics.bazaarVoiceTag = 'BAZAAR_VIEW_TAG';
  Analytics.shopAction5Tag = 'SHOP5_ACTION_TAG';
  Analytics.shopAction9Tag = 'SHOP9_ACTION_TAG';
  Analytics.masterMemberTag = 'MASTER_MEMBER_TAG';
  Analytics.linkClickTag = 'LINK_CLICK_TAG';
  Analytics.conversionEventTag = 'CONVERSION_EVENT_TAG';
  Analytics.customTag = 'CUSTOM_TAG';
  Analytics.registrationTag = 'REGISTRATION_TAG';

  // ###Method - addListener(eventType, callback) public method to add a listener to an analytics observer
  // the observers have all been created and this will allow us to have additional listeners attached on
  // demand later
  //
  // > parameters
  // >
  // + *eventType* - one of the predefined event types for analytics
  // + *callback* - what to do when this event is fired
  //
  // > returns
  // >
  // + nothing
  Analytics.addListener = function (eventType, callback) {
    pubsub.observe(eventType).subscribe(callback);
  };

  // ###Method - addListener(eventType, callback) public method to remove a listener from an analytics observer
  //
  // > parameters
  // >
  // + *eventType* - one of the predefined event types for analytics
  // + *callback* - the callback for when this event is fired -> should be named function
  //
  // > returns
  // >
  // + nothing
  Analytics.removeListener = function (eventType, callback) {
    pubsub.observe(eventType).unsubscribe(callback);
  };

  // ###Method - fireEvent(eventType, callback) public method to fire an event on the analytics observer
  //
  // > parameters
  // >
  // + *eventType* - one of the predefined event types for analytics
  // + *data* - the data for this event -> should be json data object
  //
  // > returns
  // >
  // + nothing
  Analytics.fireEvent = function (eventType, data) {
    pubsub.observe(eventType).publish(data);
  };

  // ###Method - fireOnceNow(eventType, callback) public method to add a listener to an analytics observer
  // the observers have all been created and this will allow us to have additional listeners attached on
  // demand later
  //
  // > parameters
  // >
  // + *eventType* - one of the predefined event types for analytics
  // + *callback* - what to do when this event is fired
  //
  // > returns
  // >
  // + undefined, pub sub observer or true.  Caller is responsibe for knowing which they want
  // if you pass in no callback then you get the observer, otherwise you get back true or false
  Analytics.fireOnceNow = function (eventType, callback, data) {
    Analytics.addListener(eventType, callback);
    Analytics.fireEvent(eventType, data);
    Analytics.removeListener(eventType, callback);
  };

  // ###Method - hasListener(eventType, [callback]) public method to add a listener to an analytics observer
  // the observers have all been created and this will allow us to have additional listeners attached on
  // demand later
  //
  // > parameters
  // >
  // + *eventType* - one of the predefined event types for analytics
  // + *callback* - what to do when this event is fired
  //
  // > returns
  // >
  // + undefined, pub sub observer or true.  Caller is responsibe for knowing which they want
  // if you pass in no callback then you get the observer, otherwise you get back true or false
  Analytics.hasListener = function (eventType, callback) {
    let hobs;

    // we now have a reference to the objserver object
    hobs = pubsub.hasObserver(eventType);
    if (typeof hobs !== 'undefined' && hobs !== null && hobs) {
      if (hobs.has && callback) {
        hobs = hobs.has(callback);
      }
    }
    return hobs;
  };

  module.exports = Analytics;
}
