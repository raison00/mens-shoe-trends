/**
 * Universal utility to handle request context. Works client-side and server-side.
 */
module.exports = (function () {
  // @TODO replace this with webpack.DefinePlugin (i.e. webpack.client.js - process.env.APP_ENV)
  const APP_ENV = (typeof window !== 'undefined' && window.document) ? ('client') : ('server');

  // Placed inline because current cookie library is AMD
  const getMultiValueCookie = function (name, multiValueCookie, cookie) {
    let result;
    let mvcParts;
    let plen;
    let j;
    let items;
    const MVC_SEPARATOR = '3_87_';
    const MVC_EQUATOR = '1_92_';
    const MVC_EMPTY_STRING = '4_02_';
    if (!cookie) {
      return undefined;
    }
    if (typeof multiValueCookie !== 'undefined') {
      if (cookie[multiValueCookie]) {
        mvcParts = cookie[multiValueCookie].split(MVC_SEPARATOR);
        plen = mvcParts.length;
        for (j = 0; j < plen; j++) {
          items = mvcParts[j].split(MVC_EQUATOR);
          if (items[0] === name) {
            result = items[1] === MVC_EMPTY_STRING ? '' : items[1];
            break;
          }
        }
      }
    } else {
      result = cookie[name];
    }
    return result;
  };

  // Private function - do not expose
  const getDeviceTypeFromCookie = function (cookie) {
    return getMultiValueCookie('DT', 'MISCGCs', cookie);
  };

  // Private function - do not expose
  const getShippingCountryFromCookie = function (cookie) {
    let shippingCountry;
    if (cookie && cookie.shippingCountry !== undefined) {
      shippingCountry = cookie.shippingCountry;
    }
    return shippingCountry;
  };

  // Private function - do not expose
  const getDeviceTypeFromHeader = function (req) {
    const deviceType = req.get('X-Macys-Device') || req.get('X-Bloomingdales-Device') || req.get('x-bloomingdales-device');
    return deviceType;
  };

  // Private function - do not expose
  const getUserStatusFromCookie = function (cookie = []) {
    return {
      getUserName() {
        return getMultiValueCookie('UserName', 'MISCGCs', cookie);
      },
      isSignedIn() {
        return cookie.SignedIn === '1';
      },
      isSoftSignedIn() {
        return (this.getUserName() && !this.isSignedIn());
      },
      isNewSoftSignedIn() {
        return this.isSoftSignedIn();
      },
    };
  };

  // Private function - do not expose
  const getCustomerStateFromCookie = function (cookie) {
    const UserStatus = getUserStatusFromCookie(cookie);
    if (UserStatus.isSignedIn()) {
      return 'SIGNED_IN';
    } else if (UserStatus.isSoftSignedIn()) {
      return 'RECOGNIZED';
    }

    return 'GUEST';
  };

  /*
   * This method is used by client side apps that need to generate context.
   * It generates a mock request object based on data available in the browser
   */
  const generateClientSideRequest = function () {
    const req = {};

    req.get = function () {}; // Mock out header get method but return nothing as we have no headers

    req.cookies = document.cookie
      .split(';')
      .map(c =>
        c
          .trim()
          .split('=')
          .map(decodeURIComponent))
      .reduce((...args) => {
        const [a, b] = args;
        try {
          a[b[0]] = JSON.parse(b[1]);
        } catch (e) {
          a[b[0]] = b[1];
        }
        return a;
      }, {});

    req.query = document.location.search
      .substring(1)
      .split('&')
      .map(c => c.trim().split('='))
      .reduce((...args) => {
        const [a, b] = args;
        try {
          a[b[0]] = JSON.parse(b[1]);
        } catch (e) {
          a[b[0]] = b[1];
        }
        return a;
      }, {});

    req.originalUrl = document.location.href;

    return req;
  };

  const regionCodes = [
    'AD',
    'AE',
    'AF',
    'AFR',
    'AG',
    'AI',
    'AL',
    'AM',
    'AO',
    'AQ',
    'AR',
    'AS',
    'ASIA',
    'AT',
    'AU',
    'AUSNZ',
    'AW',
    'AX',
    'AZ',
    'BA',
    'BB',
    'BD',
    'BE',
    'BF',
    'BG',
    'BH',
    'BI',
    'BJ',
    'BL',
    'BM',
    'BN',
    'BO',
    'BQ',
    'BR',
    'BS',
    'BT',
    'BV',
    'BW',
    'BY',
    'BZ',
    'CA',
    'CAN',
    'CAR',
    'CC',
    'CD',
    'CF',
    'CG',
    'CH',
    'CI',
    'CK',
    'CL',
    'CM',
    'CN',
    'CO',
    'CR',
    'CU',
    'CV',
    'CW',
    'CX',
    'CY',
    'CZ',
    'DE',
    'DJ',
    'DK',
    'DM',
    'DO',
    'DR',
    'DZ',
    'EC',
    'EE',
    'EG',
    'EH',
    'ER',
    'ES',
    'ET',
    'EUR',
    'FI',
    'FJ',
    'FK',
    'FM',
    'FO',
    'FR',
    'GA',
    'GB',
    'GD',
    'GE',
    'GF',
    'GG',
    'GH',
    'GI',
    'GL',
    'GM',
    'GN',
    'GP',
    'GQ',
    'GR',
    'GS',
    'GT',
    'GU',
    'GW',
    'GY',
    'HK',
    'HM',
    'HN',
    'HR',
    'HT',
    'HU',
    'IC',
    'ID',
    'IE',
    'IL',
    'IM',
    'IN',
    'INTL',
    'IO',
    'IQ',
    'IR',
    'IS',
    'IT',
    'JE',
    'JM',
    'JO',
    'JP',
    'KE',
    'KG',
    'KH',
    'KI',
    'KM',
    'KN',
    'KP',
    'KR',
    'KW',
    'KY',
    'KZ',
    'LA',
    'LATAM',
    'LB',
    'LC',
    'LI',
    'LK',
    'LR',
    'LS',
    'LT',
    'LU',
    'LV',
    'LY',
    'MA',
    'MC',
    'MD',
    'ME',
    'MEX',
    'MF',
    'MG',
    'MH',
    'MIDE',
    'MK',
    'ML',
    'MM',
    'MN',
    'MO',
    'MP',
    'MQ',
    'MR',
    'MS',
    'MT',
    'MU',
    'MV',
    'MW',
    'MX',
    'MY',
    'MZ',
    'NA',
    'NC',
    'NE',
    'NF',
    'NG',
    'NI',
    'NL',
    'NO',
    'NP',
    'NR',
    'NU',
    'NZ',
    'OM',
    'PA',
    'PE',
    'PF',
    'PG',
    'PH',
    'PK',
    'PL',
    'PM',
    'PN',
    'PR',
    'PS',
    'PT',
    'PW',
    'PY',
    'QA',
    'RE',
    'RO',
    'RS',
    'RU',
    'RW',
    'SA',
    'SB',
    'SC',
    'SD',
    'SE',
    'SG',
    'SH',
    'SI',
    'SJ',
    'SK',
    'SL',
    'SM',
    'SN',
    'SO',
    'SR',
    'SS',
    'ST',
    'SV',
    'SX',
    'SY',
    'SZ',
    'TC',
    'TD',
    'TF',
    'TG',
    'TH',
    'TJ',
    'TK',
    'TL',
    'TM',
    'TN',
    'TO',
    'TR',
    'TT',
    'TV',
    'TW',
    'TZ',
    'UA',
    'UG',
    'UM',
    'US',
    'UY',
    'UZ',
    'VA',
    'VC',
    'VE',
    'VG',
    'VI',
    'VN',
    'VU',
    'WF',
    'WS',
    'YE',
    'YT',
    'ZA',
    'ZM',
    'ZW',
    'US_REGION_1',
    'US_REGION_2',
    'US_REGION_3',
    'US_REGION_4',
    'US_REGION_5',
  ];

  const getSanitizedContextParam = function (contextParam, paramValue) {
    // all context parameters with allowed values.
    const params = {
      _application: {
        defaultValue: 'SITE',
        allowed: ['SITE', 'ASSOCIATE', 'MOBILE', 'MEW', 'SEO_LINK_MODULE', 'SEARCH_AND_SEND', 'MSA'],
      },
      _navigationType: {
        defaultValue: 'BROWSE',
        allowed: ['SEARCH', 'BROWSE', 'LANDING'],
      },
      _deviceType: {
        defaultValue: 'PC',
        allowed: ['PC', 'TABLET', 'PHONE', 'POS'],
      },
      _shoppingMode: {
        defaultValue: 'SITE',
        allowed: ['SITE', 'WEDDING_REGISTRY', 'STORE'],
      },
      _regionCode: {
        defaultValue: 'US',
        allowed: regionCodes,
      },
      _customerState: {
        defaultValue: 'GUEST',
        allowed: ['SIGNED_IN', 'GUEST', 'RECOGNIZED'],
      },
      _memberShip: {
        defaultValue: undefined,
        allowed: ['NON_MEMBER', 'THIRD_PARTY', 'BASE_CREDITCARD', 'TOP_OF_THE_LIST', 'ALL_MEMBERS'],
      },
      _additionalStoreLocations: {
        defaultValue: undefined,
        allowed: ['SEARCH', 'BROWSE', 'LANDING'],
      },
      _customerExperiment: undefined,
      _userId: undefined,
      _sessionId: undefined,
      _storeLocation: undefined,
    };

    let retVal;

    if (params[contextParam]) {
      if (!params[contextParam].allowed || (paramValue && params[contextParam].allowed.indexOf(paramValue.toUpperCase()) > -1)) {
        retVal = paramValue.toUpperCase();
      } else if (params[contextParam].defaultValue) {
        retVal = params[contextParam].defaultValue;
      }
    }

    return retVal;
  };

  const getDeviceTypeFromRequest = function (req, useFallback) {
    let request = req;
    if (APP_ENV === 'client' && !req) {
      request = generateClientSideRequest();
    } else if (!req) {
      throw new Error('getDeviceTypeFromRequest() must be passed a request object when run server-side');
    }

    let deviceType = getDeviceTypeFromHeader(request);

    // Header didn't contain device type
    if (!deviceType && request.cookies) {
      deviceType = getDeviceTypeFromCookie(request.cookies);
    }

    // Header and Cookies didn't contain device type
    if (!deviceType && useFallback) {
      if (request.query && request.query._deviceType) {
        deviceType = request.query._deviceType;
      }
    }

    return getSanitizedContextParam('_deviceType', deviceType);
  };

  /**
   * Black-box method to get the device type without passing any options.
   *
   * Only works client-side, because server-side would require passing of params (i.e. request object).
   *
   * For server-side device type parsing from an express request object, @see getDeviceTypeFromRequest().
   * For client-side parsing of device type from a cookie string, @see getDeviceTypeFromCookie().
   */
  const getDeviceType = () => {
    if (APP_ENV === 'client') {
      // only require Cookie.js client-side because it accesses window in the top level scope, which would cause a node runtime error
      const Cookie = require('./Cookie');
      return getSanitizedContextParam('_deviceType', Cookie.get('DT', 'MISCGCs'));
    }

    throw new Error('getDeviceType() cannot be run server-side. Try getDeviceTypeFromRequest(req)');
  };

  const getRegionCodeFromRequest = function (req, useFallback) {
    let regionCode;
    if (req.cookies) {
      regionCode = getShippingCountryFromCookie(req.cookies);
    }
    if (!regionCode && useFallback) {
      if (req.query && req.query._regionCode) {
        regionCode = req.query._regionCode;
      }
    }

    return getSanitizedContextParam('_regionCode', regionCode);
  };

  const getCurrencyCodeFromRequest = function (req) {
    if (req.cookies && req.cookies.currency) {
      return req.cookies.currency;
    }

    return 'USD';
  };

  const getShoppingModeFromRequest = function (req) {
    const weddingRegistryPattern = /(.*)(\/wedding-registry|\/registry\/wedding|&registry=wedding|&registry=true|application=REGISTRY|mode=wedding)(.*)/i;
    const weddingRegistryMatch = req.originalUrl.search(weddingRegistryPattern) > -1;

    // No reason to sanitize as this is not coming from a cookie, header or query param
    return weddingRegistryMatch ? 'WEDDING_REGISTRY' : 'SITE';
  };

  const getNavigationTypeFromRequest = function (req) {
    if (req.query && req.query._navigationType) {
      return getSanitizedContextParam('_navigationType', req.query._navigationType);
    }

    const searchPattern = /(.*)(\/shop\/featured|\/wedding\/search|\/shop\/search|\/shop\/similar-products|\/buy\/)(.*)/i;
    const searchMatch = req.originalUrl.search(searchPattern) > -1;

    const visualSearchPattern = /(.*)(\/shop\/visual-search\?)(.*)/i;
    const visualSearchMatch = req.originalUrl.search(visualSearchPattern) > -1;

    // MCOM Search Landing Pages - URL Pattern - /shop/b/
    const landingPattern = /(.*)(\/shop\/b\/)(.*)/i;
    const landingMatch = req.originalUrl.search(landingPattern) > -1;

    // No reason to sanitize as this is not coming from a cookie, header or query param
    if (searchMatch) {
      return 'SEARCH';
    }
    if (visualSearchMatch) {
      return 'SEARCH';
    }
    return landingMatch ? 'LANDING' : 'BROWSE';
  };

  const getSignedInStateFromRequest = function (req) {
    return getCustomerStateFromCookie(req.cookies);
  };

  return {
    getDeviceType,
    getDeviceTypeFromRequest,
    getRegionCodeFromRequest,
    generateClientSideRequest,
    getShoppingModeFromRequest,
    getNavigationTypeFromRequest,
    getCurrencyCodeFromRequest,
    getSignedInStateFromRequest,

    getMultiValueCookie,
    getDeviceTypeFromCookie,
    getShippingCountryFromCookie,
    getCustomerStateFromCookie,
  };
}());
