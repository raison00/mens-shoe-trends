{
  const _ = require('underscore');
  const tagManager = require('../TagManagerUtil');
  const objectUtil = require('../ObjectUtil');
  let utagData = {};
  let eligibleSameDay;
  const hasChildProp = objectUtil.hasChildProperty;

  // ========== Firing Tealium Tag ===========
  function fireTealiumTag(res) {
    const promoCodes = [];
    _.extend(utagData, {
      bag_value: hasChildProp(res, 'merchandiseTotalAfterDiscount') ? res.merchandiseTotalAfterDiscount : '',
      order_discount: hasChildProp(res, 'orderDiscountTotal') ? res.orderDiscountTotal : '',
      customer_same_day_eligible: hasChildProp(eligibleSameDay[4], 'available') ? eligibleSameDay[4].available : '',
      international: false,
    });

    // Adding promocodes to UTAGDATA
    if (hasChildProp(res, 'promoResults')) {
      for (let i = 0; i < res.promoResults.length; i++) {
        if (res.promoResults[i] && res.promoResults[i].promotionCode !== '') {
          promoCodes.push(res.promoResults[i].promotionCode);
        }
      }
      if (promoCodes.length > 0) {
        utagData.order_promocode = promoCodes;
      }
    }

    tagManager.fireTag('view', utagData);
  }

  function fireTagInSignIn(res) {
    let gwpFlags = [];
    let pwpFlags = [];
    const ordSum = res.orderSummary;

    _.extend(utagData, {
      order_total_items: hasChildProp(ordSum, 'productIds') ? ordSum.productIds.length : '',
      product_bops_available: [res.bops !== null],
      product_id: hasChildProp(ordSum, 'productIds') ? ordSum.productIds : [],
      product_name: hasChildProp(res, 'shippingDetails.shippableItems') ? res.shippingDetails.shippableItems : [],
      product_original_price: hasChildProp(ordSum, 'merchandiseTotalBeforeDiscount') ? [ordSum.merchandiseTotalBeforeDiscount] : [],
      product_price: hasChildProp(ordSum, 'merchandiseTotalAfterDiscount') ? [ordSum.merchandiseTotalAfterDiscount] : [],
      product_quantity: hasChildProp(ordSum, 'productIds') ? [ordSum.productIds.length] : [],
      product_sub_total: hasChildProp(ordSum, 'merchandiseTotalAfterDiscount') ? [ordSum.merchandiseTotalAfterDiscount] : [],
    });

    if (hasChildProp(res, 'shippingDetails.bagItems') && res.shippingDetails.bagItems.length > 1) {
      Object.keys(res.shippingDetails.bagItems).forEach((i) => {
        if (Object.prototype.hasOwnProperty.call(res.shippingDetails.bagItems, i)) {
          gwpFlags = res.shippingDetails.bagItems[i].flags.gwpIndicator;
          pwpFlags = res.shippingDetails.bagItems[i].flags.pwpIndicator;
        }
      });
      _.extend(utagData, {
        product_gwp_flag: gwpFlags,
        product_pwp_flag: pwpFlags,
      });
    }

    fireTealiumTag(ordSum);
  }

  function fireTagInGuest(res) {
    let prodIds;
    const productNames = [];
    const originalPrice = [];
    const productPrice = [];
    const productQuantity = [];
    _.extend(utagData, {
      product_bops_available: hasChildProp(res, 'shipItemsEligibleForBOPS') ? [res.shipItemsEligibleForBOPS] : [],
      product_id: hasChildProp(res, 'chatView.productIds') ? [res.chatView.productIds] : [],
    });

    // Adding ProductIds to attribute ( order_total_items ) to UTAGDATA
    if (hasChildProp(res, 'chatView.productIds')) {
      prodIds = res.chatView.productIds;
      utagData.order_total_items = prodIds.indexOf(',') > 0 ? prodIds.split(',').length : 1;
    }

    // Pushing Product Names, originalPrice, productPrice, productQuantity, and product_sub_total to UTAGDATA
    if (hasChildProp(res, 'youSavedOverlayInfo')) {
      const info = res.youSavedOverlayInfo;
      for (let k = 0; k < info.length; k++) {
        productNames.push(info[k].productName);
        originalPrice.push(info[k].originalPrice);
        productPrice.push(info[k].adjustedPrice);
        productQuantity.push(info[k].quantity);
      }
      _.extend(utagData, {
        product_name: productNames,
        product_original_price: originalPrice,
        product_price: productPrice,
        product_quantity: productQuantity,
        product_sub_total: originalPrice,
      });
    }

    fireTealiumTag(res);
  }

  const initialize = function (response, chkOutPage) {
    let res;
    if (response && chkOutPage) {
      if (chkOutPage === 'chkOutSignin') {
        res = response.order || '';
        if (res !== '') {
          eligibleSameDay = hasChildProp(res, 'shippingDetails.availableShippingMethods') ? res.shippingDetails.availableShippingMethods : '';
          fireTagInSignIn(res);
        }
      } else if (chkOutPage === 'chkOutGuest') {
        res = response.responsiveOrderSummary || '';
        if (res !== '') {
          eligibleSameDay = hasChildProp(res, 'availableShippingMethods') ? res.availableShippingMethods : '';
          fireTagInGuest(res);
        }
      }
    }
  };

  const clearUtagData = () => {
    utagData = {};
  };

  module.exports = {
    initialize,
    clearUtagData,
  };
}
