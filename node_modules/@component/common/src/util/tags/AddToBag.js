module.exports = function (response) {
  const tagManager = require('../TagManagerUtil');
  if (response) {
    let subtotal;
    let price;
    let quantity = response.quantity ? response.quantity.toString() : '';
    const utagData = {
      event_name: 'add_to_bag',
      product_id: response.productID ? [response.productID.toString()] : [],
      product_category_id: response.categoryID ? [response.categoryID.toString()] : [],
      product_category_name: [response.typeName || ''],
      product_name: [response.productName],
      product_upc: response.upcNumber ? [response.upcNumber.toString()] : [],
      product_color: [response.color],
      product_size: [response.size],
      product_quantity: [quantity],
      product_original_price: response.origPrice ? [response.origPrice.replace(/,/g, '')] : [],
      is_big_ticket: response.bigTicketItem ? [response.bigTicketItem] : [''],
      product_low_availability_message: response.productLowAvailabilityMessage ? [response.productLowAvailabilityMessage] : [''],
      product_low_availability: response.productLowAvailability ? [response.productLowAvailability] : [''],
      product_pricing_state: response.productPricingState ? [response.productPricingState] : [''],
      product_bops_available: response.bopsAvailability ? [response.bopsAvailability] : [''],
      product_bops_select: response.productBopsSelect ? [response.productBopsSelect] : [''],
    };

    if (response.gwpIndicator || response.pwpIndicator) {
      let adjustedPrice = '';
      if (response.promotions && response.promotions.length) {
        adjustedPrice = response.promotions[0].adjustedCost;
      }
      price = adjustedPrice.replace(/,/g, '');
      if (response.gwpIndicator) {
        utagData.bag_add_location = 'gwp offer';
      } else {
        utagData.bag_add_location = response.pwpIndicator ? 'pwp offer' : '';
      }
    } else {
      price = response.salePrice ? response.salePrice.replace(/,/g, '') : '';
      utagData.product_type = [response.masterProductID === '' ? 'SINGLE ITEM' : 'MEMBER'];
      if (response.bagAddLocation) {
        utagData.bag_add_location = response.bagAddLocation;
      }
      if (response.isBcom) {
        utagData.product_promotion_available = response.onSale ? [response.onSale.toString()] : ['false'];
      } else {
        utagData.product_category_id = [response.categoryID ? response.categoryID.toString() : ''];
      }
    }

    if (response.orderId) {
      utagData.order_id = response.orderId;
    }
    utagData.product_price = [price];

    if (price !== '' && quantity !== '') {
      price = parseFloat(price);
      quantity = parseInt(quantity, 10);
      if (!Number.isNaN(Number(price)) && !Number.isNaN(Number(quantity))) {
        subtotal = price * quantity;
        utagData.product_sub_total = [subtotal.toString()];
      }
    }

    tagManager.fireTag('link', utagData);
  }
};
