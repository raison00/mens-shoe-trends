// #MODULE - Coremetrics Attributes
// > Author:
// >
// > Create Date:
// >
// ##DESCRIPTION: Coremetrics class for easy access
// the format is attribute<delimiter>attribute
// delimiter is -_-
// example for attribute as position 1 would be
// myAttribute (no delimiter needed with only one attribute)
// two attributes value1 and value2 at position 1 and two would be
// value1-_-value2
// or at position 5 and 9 would be:
// -_--_--_--_--_-value1-_--_--_-value2
{
  const self = {};
  let list;
  const maxPosition = 50;

  list = [];

  // ###Method convertAttribute() converts a list to a set of -_- for coremetrics
  //
  //
  // > parameters
  // >
  // + *attr* - an array containing the coremetrics
  //
  // > returns - nothing
  // >
  self.convertAttributes = function (attr) {
    // using coremetricsAttributes
    let i;
    const len = attr.length;
    self.reset();
    for (i = 1; i < len; i += 1) {
      self.addAttribute(attr[i], i);
    }
    return self.attributeToString();
  };

  // ###Method reset() resets this object to initialize the list
  //
  // > parameters - NONE
  // >
  //
  // > returns - nothing
  // >
  self.reset = function () {
    list = [];
  };

  // ###Method addAttribute(value, index) public method to add an attribute
  //
  // > parameters
  // >
  // + *value* - the value of the coremetrics attribute
  // + *index* - is the index of the coremetrics attribute
  //
  // > returns - nothing
  // >
  self.addAttribute = function (value, index) {
    let i;
    const cmIndex = index - 1;
    if (index > maxPosition) {
      throw new Error('Only 50 attributes are allowed.');
    }
    if (Number.isNaN(Number(index)) || index < 1) {
      throw new Error('Invalid index, index must be a number greater than 0!');
    }
    for (i = 0; i < cmIndex - 1; i += 1) {
      if (!list[i]) {
        list[i] = '';
      }
    }
    list[cmIndex] = value;
  };

  // ###Method concatAttribute(value, index) public method to concatenate an attribute
  //
  // > parameters
  // >
  // + *value* - the value of the coremetrics attribute
  // + *index* - is the index of the coremetrics attribute
  //
  // > returns - nothing
  // >
  self.concatAttribute = function (value, index) {
    let i;
    const cmIndex = index - 1;
    if (index > maxPosition) {
      throw new Error(`Only ${maxPosition} attributes are allowed.`);
    }
    if (Number.isNaN(Number(index)) || index < 1) {
      throw new Error('Invalid index, index must be a number greater than 0!');
    }
    for (i = 0; i < cmIndex - 1; i += 1) {
      if (!list[i]) {
        list[i] = '';
      }
    }
    if (typeof list[cmIndex] !== 'undefined' && list[cmIndex] !== '') {
      list[cmIndex] = `${list[cmIndex]}|${value}`;
    } else {
      list[cmIndex] = value;
    }
  };

  // ###Method addAttribute(value, index) public method to add an attribute
  //
  // > parameters - NONE
  // >
  //
  // > returns
  // >
  // + a string version of the coremetrics attributes in the format -_-attr-_- string
  self.attributeToString = function () {
    let i;
    const len = list.length;
    for (i = 0; i < len; i += 1) {
      if (!list[i]) {
        list[i] = '';
      }
    }
    return list.join('-_-');
  };

  // ###Method attributeToArray()
  // public method to return the collection as an array
  //
  // > parameters - NONE
  // >
  //
  // > returns
  // >
  // + an array in the order of the object
  self.attributeToArray = function () {
    return list;
  };

  module.exports = self;
}
// ### Example usage:
// #### method 1
//    define(['coremetricsAttributes'], function(coremetricsAttributes) {
//
//        // reset the object for your attributes
//        coremetricsAttributes.reset();
//
//        // set a parameter for index 15 of the attributes
//        // this is the shipping country ( I think )
//        coremetricsAttributes.addAttribute("CA", 15);
//
//        // set another parameter at a different index
//        coremetricsAttributes.addAttribute("FOO", 12);
//
//        console.log(coremetricsAttributes.attributeToString());
//    });
//
