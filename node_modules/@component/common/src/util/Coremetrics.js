/**
 * This module is a wrapper of cmcustom.js which handles various coremetrics tagging and tracking functions.
 *
 * CoreMetrics library      - http://libs.coremetrics.com/eluminate.js
 * Custom CM MCOM functions - http://assets.macys.com/navapp/web20/assets/script/coremetrics/cmcustom.js
 * Custom CM BCOM functions - http://assets.bloomingdales.com/navapp/javascript/cmcustom.js
 *
 * Usage:
 * 1) To invoke by method directly call respective methods using method name.
 *     Ex: Coremetrics.createElementTag(data)
 * 2) To invoke by Pub/Sub with limited events call initListeners() with the list of available event types.
 *     Ex: Coremetrics.initListeners(['ELEMENT_TAG', 'PAGE_VIEW_TAG'])
 *       Coremetrics.fireEvent(Coremetrics.elementTag, data);
 *       Note: Only elementTag & pageViewTag is available for fireEvent.
 * 3) To invoke by Pub/Sub with all events call initListeners() without passing any argument.
 *     Ex: Coremetrics.initListeners()
 *       Coremetrics.fireEvent(Coremetrics.elementTag, data);
 *       Note: All the available event types will be available for fireEvent.
 */
{
  const _ = require('underscore');
  const Analytics = require('./AnalyticsBase');
  const Cookie = require('./Cookie');
  const StringUtil = require('./StringUtil');
  let cmAnalytics = {};
  const qsMap = StringUtil.getQueryStringMap(); // Initializing query string map.

  /**
   * To get the event listener map with event type as key and the respective coremetrics method as value.
   */
  function getEventListenerMap() {
    const eventListenerMap = {};

    eventListenerMap[Analytics.bazaarVoiceTag] = cmAnalytics.createBazaarViewTag;
    eventListenerMap[Analytics.conversionEventTag] = cmAnalytics.createConversionEventTag;
    eventListenerMap[Analytics.elementTag] = cmAnalytics.createElementTag;
    eventListenerMap[Analytics.linkClickTag] = cmAnalytics.createLinkClickTag;
    eventListenerMap[Analytics.masterMemberTag] = cmAnalytics.createMasterMemberTag;
    eventListenerMap[Analytics.orderTag] = cmAnalytics.createOrderTag;
    eventListenerMap[Analytics.pageViewTag] = cmAnalytics.createPageViewTag;
    eventListenerMap[Analytics.productViewTag] = cmAnalytics.createProductViewTag;
    eventListenerMap[Analytics.registrationTag] = cmAnalytics.createRegistrationTag;
    eventListenerMap[Analytics.shopAction5Tag] = cmAnalytics.createShopAction5Tag;
    eventListenerMap[Analytics.shopAction9Tag] = cmAnalytics.createShopAction9Tag;
    eventListenerMap[Analytics.customTag] = cmAnalytics.createUserErrorTag;

    return eventListenerMap;
  }

  function getLinkShareId(data) {
    return data.linkShareID || qsMap.linkshareid || '';
  }

  function getMachineId(data) {
    let machineId;

    if (data.userID) {
      machineId = data.userID;
    } else {
      machineId = data.isBCOM ? '' : Cookie.get('macys_online');
    }
    return machineId || '';
  }

  function getMMCVendor(data) {
    return data.partnerID || qsMap.partnerid || '';
  }

  function getMMCPlacement(data) {
    return data.bannerID || qsMap.bannerid || getMMCVendor(data);
  }

  function getMMCItem(data) {
    if (data.isBCOM) {
      return getMMCPlacement(data) || getLinkShareId(data);
    }
    return data.productID || qsMap.id || '';
  }

  function getProductName(productName) {
    return productName ? productName.replace(/[,']/g, '') : '';
  }

  /**
   * To convert attribute array to string using coremetrics delimiter.
   */
  function getStringAttributes(attributes) {
    if (_.isArray(attributes)) {
      return attributes.join('-_-');
    }
    return '';
  }

  /**
   * Public methods and properties.
   */
  cmAnalytics = {
    /**
     * Method window.cmCreateBazaarViewTag is common between MCOM & BCOM.
     * cmcustom.js - source of this method for both the brands.
     */
    createBazaarViewTag(data) {
      if (data && _.isFunction(window.cmCreateBazaarViewTag)) {
        window.cmCreateBazaarViewTag(data.productID, data.productName, data.categoryID);
      }
    },

    /**
     * Method window.cmCreateConversionEventTag is common between MCOM & BCOM.
     * cmFunctions.js - source of this method for BCOM.
     * eluminate.js   - source of this method for MCOM.
     */
    createConversionEventTag(data) {
      if (data && _.isFunction(window.cmCreateConversionEventTag)) {
        window.cmCreateConversionEventTag(
          data.eventId,
          data.eventActionType,
          data.eventCategoryID,
          data.eventPoints,
          getStringAttributes(data.attributes),
        );
      }
    },

    /**
     * Method window.cmDisplayRecs is common between MCOM & BCOM.
     * eluminate.js - source of this method for both the brands.
     */
    cmDisplayRecs() {
      if (_.isFunction(window.cmDisplayRecs)) {
        window.cmDisplayRecs();
      }
    },

    /**
     * Method window.cmRecRequest is common between MCOM & BCOM.
     * eluminate.js - source of this method for both the brands.
     */
    cmRecRequest(data) {
      if (data && _.isFunction(window.cmRecRequest)) {
        window.cmRecRequest(data.zoneId, data.productID, data.categoryID, data.randomizeParam, data.searchTermParam);
      }
    },

    /**
     * Method window.cmCreatePageElementTag is common between MCOM & BCOM.
     * cmcustom.js - source of this method for both the brands.
     */
    createElementTag(data) {
      if (typeof cmMakeTag !== 'undefined' && data && _.isFunction(window.cmCreatePageElementTag)) {
        window.cmCreatePageElementTag(data.elementID, data.elementCategory, getStringAttributes(data.attributes));
      }
    },

    /**
     * Method window.cmCreateManualLinkClickTag is common between MCOM & BCOM.
     * eluminate.js - source of this method for both the brands.
     */
    createLinkClickTag(data) {
      if (typeof cmMakeTag !== 'undefined' && data && _.isFunction(window.cmCreateManualLinkClickTag)) {
        window.cmCreateManualLinkClickTag(data.href, data.name, data.pageID);
      }
    },

    /**
     * Method window.cmCreateMasterMemberTag is common between MCOM & BCOM.
     * cmcustom.js - source of this method for both the brands.
     */
    createMasterMemberTag(data) {
      if (data && _.isFunction(window.cmCreateMasterMemberTag)) {
        window.cmCreateMasterMemberTag(data.masterProductID, data.masterProductName, data.masterCatID, data.isMaster, getMachineId(data));
      }
    },

    /**
     * Method window.cmCreateOrderTag is common between MCOM & BCOM.
     * cmcustom.js           - source of this method for both the brands.
     * @param data.extraFields - additional array parameter only for BCOM.
     */
    createOrderTag(data) {
      if (data && _.isFunction(window.cmCreateOrderTag)) {
        window.cmCreateOrderTag(
          data.orderID,
          data.orderTotal,
          data.orderShipping,
          data.customerID,
          data.customerCity,
          data.customerState,
          data.customerZIP,
          getMachineId(data),
          getStringAttributes(data.attributes),
          getStringAttributes(data.extraFields),
        );
      }
    },

    /**
     * Method window.cmCreatePageviewTag is different for MCOM & BCOM.
     * cmcustom.js       - source of this method for both the brands.
     * @param data.isBCOM - required boolean parameter for BCOM brand.
     */
    createPageViewTag(data) {
      if (typeof cmMakeTag !== 'undefined' && data && _.isFunction(window.cmCreatePageviewTag)) {
        if (data.isBCOM) {
          window.cmCreatePageviewTag(
            data.pageID,
            data.categoryID,
            data.searchString,
            data.searchResults,
            getMMCVendor(data),
            'N/A',
            getMMCPlacement(data),
            getMMCItem(data),
            getMachineId(data),
            getLinkShareId(data),
            getStringAttributes(data.attributes),
            getStringAttributes(data.extraFields),
          );
        } else {
          window.cmCreatePageviewTag(
            data.pageID,
            data.categoryID,
            data.searchString,
            data.searchResults,
            getMMCVendor(data),
            '',
            getMMCPlacement(data),
            getMMCItem(data),
            getLinkShareId(data),
            getMachineId(data),
            data.refURL,
            getStringAttributes(data.attributes),
          );
        }
      }
    },

    /**
     * Method window.cmCreateProductviewTag is different for MCOM & BCOM.
     * cmcustom.js       - source of this method for both the brands.
     * @param data.isBCOM - required boolean parameter for BCOM brand.
     */
    createProductViewTag(data) {
      if (data && _.isFunction(window.cmCreateProductviewTag)) {
        if (data.isBCOM) {
          window.cmCreateProductviewTag(
            data.productID,
            data.productName,
            data.categoryID,
            getMMCVendor(data),
            'N/A',
            getMMCPlacement(data),
            getMMCItem(data),
            getMachineId(data),
            getLinkShareId(data),
            getStringAttributes(data.attributes),
            data.refURL,
          );
        } else {
          window.cmCreateProductviewTag(
            data.productID,
            data.productName,
            data.categoryID,
            getMMCVendor(data),
            '',
            getMMCPlacement(data),
            '',
            getLinkShareId(data),
            getMachineId(data),
            data.refURL,
            data.crossSell,
            '',
            '',
            '',
            '',
            getStringAttributes(data.attributes),
          );
        }
      }
    },

    /**
     * Method window.cmCreateRegistrationTag is common between MCOM & BCOM.
     * cmcustom.js           - source of this method for both the brands.
     * @param data.attributes - additional array parameter only for BCOM.
     */
    createRegistrationTag(data) {
      if (data && _.isFunction(window.cmCreateRegistrationTag)) {
        window.cmCreateRegistrationTag(
          data.customerID,
          data.email,
          data.city,
          data.state,
          data.zipCode,
          data.customerGender,
          data.newsletterName,
          data.subscribe,
          getStringAttributes(data.attributes),
        );
      }
    },

    /**
     * Method window.cmCreateShopAction5Tag is different for MCOM & BCOM.
     * cmFunctions.js     - source of this method for BCOM.
     * cmcustom.js       - source of this method for MCOM.
     * @param data.isBCOM - required boolean parameter for BCOM brand.
     */
    createShopAction5Tag(data) {
      if (data && _.isFunction(window.cmCreateShopAction5Tag)) {
        if (data.isBCOM) {
          window.cmCreateShopAction5Tag(
            data.productID,
            getProductName(data.productName),
            data.productQuantity,
            data.productPrice,
            data.categoryID,
            getStringAttributes(data.attributes),
          );
        } else {
          window.cmCreateShopAction5Tag(
            data.productID,
            data.productName,
            data.productQuantity,
            data.productPrice,
            data.categoryID,
            data.MasterProductID,
            data.MasterProductName,
            data.MasterCatID,
            data.IsMaster,
            data.cmCrossSell,
            getStringAttributes(data.attributes),
          );
        }
      }
      if (_.isFunction(window.cmDisplayShop5s)) {
        window.cmDisplayShop5s();
      }
    },

    /**
     * Method window.cmCreateShopAction9Tag is different for MCOM & BCOM.
     * eluminate.js     - source of this method for BCOM.
     * cmcustom.js       - source of this method for MCOM.
     * @param data.isBCOM - required boolean parameter for BCOM brand.
     */
    createShopAction9Tag(data) {
      if (data && _.isFunction(window.cmCreateShopAction9Tag)) {
        if (data.isBCOM) {
          window.cmCreateShopAction9Tag(
            data.productID,
            getProductName(data.productName),
            data.productQuantity,
            data.productPrice,
            data.email,
            data.orderID,
            data.orderTotal,
            data.categoryID,
            getStringAttributes(data.attributes),
          );
        } else {
          window.cmCreateShopAction9Tag(
            data.productID,
            data.productName,
            data.productQuantity,
            data.productPrice,
            data.customerID,
            data.orderID,
            data.orderTotal,
            data.categoryID,
            data.MasterProductID,
            data.MasterProductName,
            data.MasterCatID,
            data.IsMaster,
            data.cmCrossSell,
            getStringAttributes(data.attributes),
          );
        }
      }
      if (_.isFunction(window.cmDisplayShop9s)) {
        window.cmDisplayShop9s();
      }
    },

    /**
     * Method window.cmCreateUserErrorTag is common between MCOM & BCOM.
     * cmcustom.js - source of this method for both the brands.
     * @param data.mMsgType, data.mMsgClass, data.mMsgDesc, data.mServerName, data.mCloneName
     *          - additional parameters only for MCOM.
     */
    createUserErrorTag(data) {
      if (data && _.isFunction(window.cmCreateUserErrorTag)) {
        window.cmCreateUserErrorTag(
          data.pageID,
          data.categoryID,
          data.mMsgCode,
          data.mMsgType,
          data.mMsgClass,
          data.mMsgDesc,
          data.mServerName,
          data.mCloneName,
        );
      }
    },
  };

  /**
   * This method should be called, if the caller wants to fire coremetrics tag using Pub/Sub model.
   * @param eventList - if listeners has to be initialized with only fewer tags then pass array of
   *             respective event types.
   *          - if all the methods should be listened then no need to pass array.
   */
  cmAnalytics.initListeners = function (eventList) {
    const eventListenerMap = getEventListenerMap();

    if (_.isEmpty(eventList)) {
      _.each(eventListenerMap, (callBack, eventType) => {
        Analytics.addListener(eventType, callBack);
      });
    } else {
      _.each(eventList, (eventType) => {
        Analytics.addListener(eventType, eventListenerMap[eventType]);
      });
    }

    // Extending methods of AnalyticsBase which can be used by caller for firing different tags using Pub/Sub model.
    _.extend(cmAnalytics, Analytics);
  };

  module.exports = cmAnalytics;
}
