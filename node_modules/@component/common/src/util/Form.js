// #MODULE - Form
// > Author: Henrique Elias
// >
// > Create Date: <February 14, 2014>
// >
// ##DESCRIPTION: Helper to serialize data
{
  const $ = require('jquery');
  const objectUtil = require('./ObjectUtil');
  let json = {};
  let disabled;

  // calling it twice with same key will create an array for that key
  function pushValue(jObj, key, value) {
    const jsonObj = jObj;
    if (jsonObj[key] !== undefined && jsonObj[key] !== null) {
      if (!jsonObj[key].push) {
        // convert to an array
        jsonObj[key] = [jsonObj[key]];
      }
      jsonObj[key].push(value);
    } else {
      jsonObj[key] = value;
    }
  }

  // updates the json variable
  function update(key, value) {
    let subJson;
    let parts;
    let i;
    let l;

    if (key) {
      parts = key.split('.');

      if (parts.length > 1) {
        subJson = json;

        for (i = 0, l = parts.length - 1; i < l; i++) {
          subJson = subJson[parts[i]] || (subJson[parts[i]] = {});
        }

        pushValue(subJson, parts[l], value);
      } else {
        pushValue(json, key, value);
      }
    }
  }

  // ============= Following 2 methods used for checkboxes ==============

  // get the value from the converted JSON
  function getValue(key) {
    return objectUtil.getChildProperty(json, key);
  }

  function setValue(key, value) {
    objectUtil.setChildProperty(value, key, json);
  }

  module.exports = {
    // ###Method -  toJSON(elements) public method to convert form elements into JSON.
    // Assumption: any name starting with _ is the hidden field corresponding to a checkbox name
    //
    // > parameters
    // >
    // + *elements* - jQuery selector
    //
    // > returns
    // >
    // + *JSON*
    //
    toJSON(elements, submitDisabled) {
      // reset
      json = {};

      let arr;
      const specialValues = {};

      if (submitDisabled) {
        disabled = $(elements)
          .find(':input:disabled')
          .removeAttr('disabled');

        arr = $(elements).serializeArray();

        disabled.attr('disabled', 'disabled');
      } else {
        arr = $(elements).serializeArray();
      }

      $.each(arr, function () {
        // _ fields are hidden fields for checkboxes
        if (this.name.indexOf('_') === 0) {
          specialValues[this.name] = true;
        }
        update(this.name, this.value);
      });

      if (!$.isEmptyObject(specialValues)) {
        // we had some checkboxes
        $.each(specialValues, (specialKey) => {
          // convert _x.y.z to x.y.z and get value
          const key = specialKey.substr(1);
          const value = getValue(key);
          let _value;
          let valueToBeUpdated;

          if (!value) {
            // if no value found, find the value of _x.y.z
            _value = getValue(specialKey);
            if (_value) {
              if ($.isArray(_value)) {
                // send empty array
                valueToBeUpdated = [];
              } else if (_value === 'true') {
                valueToBeUpdated = false;
              } else {
                valueToBeUpdated = '';
              }

              setValue(key, valueToBeUpdated);
            }
          } else if (value === 'true') {
            // convert "true" to true
            setValue(key, true);
          }
        });
      }

      return json;
    },
  };
}
