const expUtil = require('./ExpServersideUtil');
const requestContext = require('./RequestContext');

module.exports = (function () {
  const queryString = function (search) {
    const queryStr = search;
    const queryArr = queryStr.replace('?', '').split('&');
    const queryParams = {};

    for (let q = 0, qArrLength = queryArr.length; q < qArrLength; q++) {
      const qArr = queryArr[q].split('=');
      queryParams[qArr[0]] = qArr[1];
    }

    return queryParams;
  };

  const filteredKeys = function (obj, filter) {
    const keys = [];
    Object.keys(obj).forEach((key) => {
      if (filter.test(key)) {
        keys.push(key);
      }
    });
    return keys;
  };

  const regionCodes = [
    'AD',
    'AE',
    'AF',
    'AFR',
    'AG',
    'AI',
    'AL',
    'AM',
    'AO',
    'AQ',
    'AR',
    'AS',
    'ASIA',
    'AT',
    'AU',
    'AUSNZ',
    'AW',
    'AX',
    'AZ',
    'BA',
    'BB',
    'BD',
    'BE',
    'BF',
    'BG',
    'BH',
    'BI',
    'BJ',
    'BL',
    'BM',
    'BN',
    'BO',
    'BQ',
    'BR',
    'BS',
    'BT',
    'BV',
    'BW',
    'BY',
    'BZ',
    'CA',
    'CAN',
    'CAR',
    'CC',
    'CD',
    'CF',
    'CG',
    'CH',
    'CI',
    'CK',
    'CL',
    'CM',
    'CN',
    'CO',
    'CR',
    'CU',
    'CV',
    'CW',
    'CX',
    'CY',
    'CZ',
    'DE',
    'DJ',
    'DK',
    'DM',
    'DO',
    'DR',
    'DZ',
    'EC',
    'EE',
    'EG',
    'EH',
    'ER',
    'ES',
    'ET',
    'EUR',
    'FI',
    'FJ',
    'FK',
    'FM',
    'FO',
    'FR',
    'GA',
    'GB',
    'GD',
    'GE',
    'GF',
    'GG',
    'GH',
    'GI',
    'GL',
    'GM',
    'GN',
    'GP',
    'GQ',
    'GR',
    'GS',
    'GT',
    'GU',
    'GW',
    'GY',
    'HK',
    'HM',
    'HN',
    'HR',
    'HT',
    'HU',
    'IC',
    'ID',
    'IE',
    'IL',
    'IM',
    'IN',
    'INTL',
    'IO',
    'IQ',
    'IR',
    'IS',
    'IT',
    'JE',
    'JM',
    'JO',
    'JP',
    'KE',
    'KG',
    'KH',
    'KI',
    'KM',
    'KN',
    'KP',
    'KR',
    'KW',
    'KY',
    'KZ',
    'LA',
    'LATAM',
    'LB',
    'LC',
    'LI',
    'LK',
    'LR',
    'LS',
    'LT',
    'LU',
    'LV',
    'LY',
    'MA',
    'MC',
    'MD',
    'ME',
    'MEX',
    'MF',
    'MG',
    'MH',
    'MIDE',
    'MK',
    'ML',
    'MM',
    'MN',
    'MO',
    'MP',
    'MQ',
    'MR',
    'MS',
    'MT',
    'MU',
    'MV',
    'MW',
    'MX',
    'MY',
    'MZ',
    'NA',
    'NC',
    'NE',
    'NF',
    'NG',
    'NI',
    'NL',
    'NO',
    'NP',
    'NR',
    'NU',
    'NZ',
    'OM',
    'PA',
    'PE',
    'PF',
    'PG',
    'PH',
    'PK',
    'PL',
    'PM',
    'PN',
    'PR',
    'PS',
    'PT',
    'PW',
    'PY',
    'QA',
    'RE',
    'RO',
    'RS',
    'RU',
    'RW',
    'SA',
    'SB',
    'SC',
    'SD',
    'SE',
    'SG',
    'SH',
    'SI',
    'SJ',
    'SK',
    'SL',
    'SM',
    'SN',
    'SO',
    'SR',
    'SS',
    'ST',
    'SV',
    'SX',
    'SY',
    'SZ',
    'TC',
    'TD',
    'TF',
    'TG',
    'TH',
    'TJ',
    'TK',
    'TL',
    'TM',
    'TN',
    'TO',
    'TR',
    'TT',
    'TV',
    'TW',
    'TZ',
    'UA',
    'UG',
    'UM',
    'US',
    'UY',
    'UZ',
    'VA',
    'VC',
    'VE',
    'VG',
    'VI',
    'VN',
    'VU',
    'WF',
    'WS',
    'YE',
    'YT',
    'ZA',
    'ZM',
    'ZW',
    'US_REGION_1',
    'US_REGION_2',
    'US_REGION_3',
    'US_REGION_4',
    'US_REGION_5',
  ];

  const getMultiValueCookie = function (name, multiValueCookie, cookie) {
    let result;
    let mvcParts;
    let plen;
    let j;
    let items;
    const MVC_SEPARATOR = '3_87_';
    const MVC_EQUATOR = '1_92_';
    const MVC_EMPTY_STRING = '4_02_';
    if (!cookie) {
      return undefined;
    }
    if (typeof multiValueCookie !== 'undefined') {
      if (cookie[multiValueCookie]) {
        mvcParts = cookie[multiValueCookie].split(MVC_SEPARATOR);
        plen = mvcParts.length;
        for (j = 0; j < plen; j++) {
          items = mvcParts[j].split(MVC_EQUATOR);
          if (items[0] === name) {
            result = items[1] === MVC_EMPTY_STRING ? '' : items[1];
            break;
          }
        }
      }
    } else {
      result = cookie[name];
    }
    return result;
  };

  const getSanitizedContextParams = function (requestParams, cookie, recipeIds, req) {
    // all context parameters with allowed values.
    const params = {
      _application: {
        defaultValue: 'SITE',
        allowed: ['SITE', 'ASSOCIATE', 'MOBILE', 'MEW', 'SEO_LINK_MODULE', 'SEARCH_AND_SEND', 'MSA'],
      },
      _navigationType: {
        defaultValue: 'BROWSE',
        allowed: ['SEARCH', 'BROWSE', 'LANDING'],
      },
      _deviceType: {
        defaultValue: 'PC',
        allowed: ['PC', 'TABLET', 'PHONE', 'POS'],
      },
      _shoppingMode: {
        defaultValue: 'SITE',
        allowed: ['SITE', 'WEDDING_REGISTRY', 'STORE'],
      },
      _regionCode: {
        defaultValue: 'US',
        allowed: regionCodes,
      },
      _customerState: {
        defaultValue: 'GUEST',
        allowed: ['SIGNED_IN', 'GUEST', 'RECOGNIZED'],
      },
      _memberShip: {
        defaultValue: undefined,
        allowed: ['NON_MEMBER', 'THIRD_PARTY', 'BASE_CREDITCARD', 'TOP_OF_THE_LIST', 'ALL_MEMBERS'],
      },
      _additionalStoreLocations: {
        defaultValue: undefined,
        allowed: ['SEARCH', 'BROWSE', 'LANDING'],
      },
      _customerExperiment: undefined,
      _userId: undefined,
      _sessionId: undefined,
      _storeLocation: undefined,
    };

    // get context parameters from request; validate parameters with allowed values, and construct new request params.
    const contextParams = {};

    // append parameters
    Object.keys(params).forEach((param) => {
      if (params[param] && params[param].defaultValue) {
        contextParams[param] = params[param].defaultValue;
      }
      if (requestParams[param]) {
        if (!params[param].allowed || params[param].allowed.indexOf(requestParams[param]) > -1) {
          contextParams[param] = requestParams[param];
        }
      }
    });

    // Set device type from req header or from cookie
    let deviceType;
    if (req) {
      deviceType = requestContext.getDeviceTypeFromRequest(req);
    } else {
      deviceType = requestContext.getDeviceTypeFromCookie(cookie);
    }

    if (deviceType) {
      deviceType = deviceType.toUpperCase();
    }
    if (params._deviceType.allowed.indexOf(deviceType) > -1) {
      contextParams._deviceType = deviceType;
    }

    // Set region code from shippingCountry cookie.
    const shippingCountry = requestContext.getShippingCountryFromCookie(cookie) || 'US';
    if (params._regionCode.allowed.indexOf(shippingCountry) > -1) {
      contextParams._regionCode = shippingCountry;
    }

    contextParams._customerState = requestContext.getCustomerStateFromCookie(cookie);

    if (cookie && cookie.currency) {
      contextParams.currencyCode = cookie.currency;
    }

    if (typeof recipeIds !== 'undefined' && recipeIds.length >= 1) {
      contextParams._customerExperiment = encodeURI(recipeIds.join(','));
    }
    return contextParams;
  };

  const getSearchPageUrlFromRequest = function (req) {
    const url = req.originalUrl;
    const cookie = req.cookies;
    let brandValue;

    const pathname = url.substr(0, url.indexOf('?') > -1 ? url.indexOf('?') : url.length);

    const search = url.substr(url.indexOf('?'));
    const requestParams = queryString(search);

    if (pathname) {
      const domain = process.env.XAPI_DOMAIN !== undefined ? process.env.XAPI_DOMAIN : req.headers.host;
      let XapiUrl = `http://${domain}/xapi/discover/v1/page?pathname=${pathname.replace(/&/g, '%26')}`;

      const recipeIds = expUtil.getServersideRecipeIds(req);

      const contextParams = getSanitizedContextParams(requestParams, cookie, recipeIds, req);

      contextParams._shoppingMode = requestContext.getShoppingModeFromRequest(req);

      contextParams._navigationType = requestContext.getNavigationTypeFromRequest(req);

      if (pathname.indexOf('/shop/similar-products') !== -1) {
        XapiUrl += '&keyword=mlt';
        if (requestParams.imageId) {
          XapiUrl += `&imageId=${requestParams.imageId}`;
        }

        if (requestParams.productId) {
          XapiUrl += `&productId=${requestParams.productId}`;
        }
      }

      if (pathname === '/shop/visual-search') {
        const productIdsList = requestParams.visualProductIds;
        XapiUrl = `http://${domain}/xapi/discover/v1/page/visualsearch?pathname=${pathname.replace(/&/g, '%26')}&visualProductIds=${productIdsList}`;
      }

      if (requestParams.id) {
        XapiUrl += `&id=${requestParams.id}`;
      }
      if (requestParams.CategoryID) {
        XapiUrl += `&CategoryID=${requestParams.CategoryID}`;
      }

      if (requestParams.ss) {
        XapiUrl += `&ss=${requestParams.ss}`;
      }
      if (requestParams.keyword) {
        XapiUrl += `&keyword=${requestParams.keyword.replace(/&/g, '%26')}`;
      }

      // Converting ISO-8859-1 to UTF-8 encoding for brand parameter.
      if (requestParams.brand) {
        try {
          brandValue = requestParams.brand || '';
          // Just to check whether incoming brand value is in UTF-8.
          decodeURIComponent(brandValue);
        } catch (ex) {
          // If UTF-8 decoding fails try with ISO-8859-1.
          brandValue = brandValue.replace(/\+/g, '%20');
          brandValue = encodeURIComponent(unescape(brandValue));
        }
        XapiUrl += `&brand=${brandValue.replace(/&/g, '%26')}`;
      }
      if (requestParams.mode) {
        XapiUrl += `&mode=${requestParams.mode}`;
      }

      if (requestParams._additionalStoreLocations) {
        XapiUrl += `&_additionalStoreLocations=${requestParams._additionalStoreLocations}`;
      }

      if (requestParams.experience) {
        XapiUrl += `&experience=${requestParams.experience}`;
      }

      if (pathname.indexOf('Upc_bops_purchasable') === -1 && (cookie && cookie.CSL)) {
        XapiUrl += `&_additionalStoreLocations=${cookie.CSL}`;
      }

      if (requestParams.storeName && pathname.indexOf('Upc_bops_purchasable') !== -1) {
        // if required need to decode
        XapiUrl += `&storeName=${requestParams.storeName}`;
      }

      const cmParams = filteredKeys(requestParams, /^cm_/);
      for (let itr = 0; itr < cmParams.length; itr += 1) {
        XapiUrl += `&${cmParams[itr]}=${requestParams[cmParams[itr]]}`;
      }

      const cParamList = Object.getOwnPropertyNames(contextParams);
      for (let i = 0; i < cParamList.length; i += 1) {
        XapiUrl += `&${cParamList[i]}=${contextParams[cParamList[i]]}`;
      }

      if (cookie && cookie.macys_online_guid) {
        XapiUrl += `&guid=${cookie.macys_online_guid}`;
      }

      if (cookie && cookie.macys_online_uid) {
        XapiUrl += `&userid=${cookie.macys_online_uid}`;
      }

      if (cookie && cookie.bloomingdales_online_guid) {
        XapiUrl += `&guid=${cookie.bloomingdales_online_guid}`;
      }

      if (cookie && cookie.bloomingdales_online_uid) {
        XapiUrl += `&userid=${cookie.bloomingdales_online_uid}`;
      }

      if (cookie && cookie.RTD) {
        XapiUrl += `&visitorId=${cookie.RTD}`;
      }

      if (cookie && cookie.MISCGCs) {
        XapiUrl += `&MISCGCs=${cookie.MISCGCs}`;
      }

      if (XapiUrl.indexOf('_pref') !== -1) {
        XapiUrl += '&applyPref=false';
      }

      return XapiUrl;
    }
    console.log('xapi request not invoked.');
    throw new Error('xapi parameters invalid');
  };

  const getCacheKeyFromRequest = function (query, cookies) {
    const delimiter = '_';
    const context = getSanitizedContextParams(query, cookies);
    return (
      context._shoppingMode +
      delimiter +
      context._regionCode +
      delimiter +
      context._application +
      delimiter +
      context._deviceType +
      delimiter +
      context._navigationType
    );
  };

  const generateContextUrlParams = function (context) {
    const StringUtils = require('./StringUtil');
    let innerQueryString = '';
    const params = [];
    const id = StringUtils.getURLParameter('id');
    const categoryID = StringUtils.getURLParameter('CategoryID');
    const keyword = StringUtils.getURLParameter('keyword');
    const brand = StringUtils.getDecodedParamValue('brand');
    const mode = StringUtils.getURLParameter('mode');
    const experience = StringUtils.getURLParameter('experience');

    if (id) {
      params.push(`id=${id}`);
    }
    if (categoryID) {
      params.push(`CategoryID=${categoryID}`);
    }
    if (keyword) {
      params.push(`keyword=${keyword.replace(/&/g, '%26')}`);
    }
    if (mode) {
      params.push(`mode=${mode}`);
    }
    if (brand) {
      params.push(`brand=${brand.replace(/&/g, '%26').replace(/\+/g, '%20')}`);
    }
    if (context.application) {
      params.push(`_application=${context.application}`);
    }
    if (context.navigationType) {
      params.push(`_navigationType=${context.navigationType}`);
    }
    if (context.deviceType) {
      params.push(`_deviceType=${context.deviceType}`);
    }
    if (context.shoppingMode) {
      params.push(`_shoppingMode=${context.shoppingMode}`);
    }
    if (context.regionCode) {
      params.push(`_regionCode=${context.regionCode}`);
    }
    if (context.customerExperiment) {
      params.push(`_customerExperiment=${context.customerExperiment}`);
    }
    if (context.currencyCode) {
      params.push(`currencyCode=${context.currencyCode}`);
    }

    if (context.signedIn) {
      params.push('_customerState=SIGNED_IN');
    } else if (context.softSignedIn) {
      params.push('_customerState=RECOGNIZED');
    } else if (context.customerState) {
      params.push(`_customerState=${context.customerState}`);
    } else {
      params.push('_customerState=GUEST');
    }

    if (experience) {
      params.push(`experience=${experience}`);
    }

    /* if (gridState) {
            for (var key in gridState) {
                params.push(key + "=" + gridState[key]);
            }
        } */

    if (params.length) {
      innerQueryString = `&${params.join('&')}`;
    }
    return innerQueryString;
  };

  return {
    generateContextUrlParams,
    getSearchPageUrlFromRequest,
    getCacheKeyFromRequest,
    getContext: getSanitizedContextParams,
    getMultiValueCookie,
  };
}());
