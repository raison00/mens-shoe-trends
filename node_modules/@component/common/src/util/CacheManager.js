// #MODULE - CacheManager
// > Author: Mike Byrnes
// >
// > Create Date: January 7, 2014
// >
// ##DESCRIPTION: This module will handle getting, setting, and removing items from the cache
{
  const ClientSideStorage = require('./ClientSideStorage');
  const Logger = require('./Logger');
  const EXP = 'Exp';

  function get(storage, key) {
    let value = null;
    const now = new Date();
    const getMethod = ClientSideStorage[`get${storage}`];
    let exp = getMethod(key + EXP) || getMethod(`${key}_exp`);

    if (exp) {
      exp = new Date(exp);
      if (exp > now) {
        value = getMethod(key);
      } else {
        ClientSideStorage[`remove${storage}`](key);
      }
    } else {
      value = getMethod(key);
    }

    if (JSON && value) {
      // not all results are JSON!
      try {
        value = JSON.parse(value);
      } catch (e) {
        Logger.log('Failed parsing JSON: ', e);
      }
    }

    return value;
  }

  function set(setMethod, key, dataObj, expiration) {
    let data = dataObj;
    if (JSON) {
      data = JSON.stringify(data);
    }

    setMethod(key, data);
    if (expiration) {
      const now = new Date();
      // Convert minutes to milliseconds
      const exp = new Date(now.getTime() + (expiration * 60 * 1000));
      setMethod(key + EXP, exp);
    }
  }

  function remove(storage, key) {
    const removeMethod = ClientSideStorage[`remove${storage}`];

    removeMethod(key);
    removeMethod(key + EXP);
  }

  function clear(storage) {
    const clearMethod = ClientSideStorage[`clear${storage}`];

    clearMethod();
  }

  // ### Method - getSession(key) public method to get value from the session cache for the specified key
  //
  // > parameters
  // >
  // + *key* - the key used to retrieve the data from the cache
  //
  // > returns
  // >
  // + The data from the cache for the specified key or null
  function getSession(key) {
    return get('Session', key);
  }

  // ### Method - getPersistent(key) public method to get value from the persistent cache for the specified key
  //
  // > parameters
  // >
  // + *key* - the key used to retrieve the data from the cache
  //
  // > returns
  // >
  // + The data from the cache for the specified key or null
  function getPersistent(key) {
    return get('Persistent', key);
  }

  // ###Method - setSession(key, data, expiration) public method to set a session cache
  //
  // > parameters
  // >
  // + *key* - the key to store in the cache
  // + *data* - that data to store in the cache
  // + *expiration* - (optional) minutes from the current time when the cache will expire
  function setSession(key, data, expiration) {
    set(ClientSideStorage.setSession, key, data, expiration);
  }

  // ###Method - setPersistent(key, data, expiration) public method to set a persistent cache
  //
  // > parameters
  // >
  // + *key* - the key to store in the cache
  // + *data* - that data to store in the cache
  // + *expiration* - (optional) minutes from the current time when the cache will expire
  function setPersistent(key, data, expiration) {
    set(ClientSideStorage.setPersistent, key, data, expiration);
  }

  function removeSession(key) {
    remove('Session', key);
  }

  function removePersistent(key) {
    remove('Persistent', key);
  }

  function clearSession() {
    clear('Session');
  }

  function clearPersistent() {
    clear('Persistent');
  }

  module.exports = {
    getSession,
    getPersistent,
    setSession,
    clearSession,
    clearPersistent,
    setPersistent,
    removeSession,
    removePersistent,
  };
}
