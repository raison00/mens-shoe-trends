// #MODULE - CaptureTiming
// > Author: Myank Raj
// >
// > Create Date: <February 1, 2017>
// >
// ##DESCRIPTION: Capture JS Timing Data to send to RASM API
// > Capture Timing JS Confluence page link : http://confluence5/x/-8u0Ag
// >
{
  const $ = require('jquery');
  const _ = require('underscore');
  const Globals = require('./Globals');
  const Logger = require('./Logger');
  const timingCaptureDataModel = {
    // default data model we are passing to rasm endpoints
    appName: 'JSTimingAPIAppNameDefault', // required field, pass specific appName through component you’re measuring
    name: 'CaptureTiming', // required field,  specific name through component you’re measuring
    description: '', // optional to pass a description through component
    timeStart: '', // required to pass timeStart through component
    timeEnd: '', // required to pass timeEnd through component
    url: window.location.href,
    page_type: $('type:last').html(),
    page_layout: $('layout:last').html(),
    server: $('server:last').html(),
    release: $('release:last').html(),
    ts: new Date($('timestamp:last').html()).getTime() / 1000,
  };
  const prodUrl = '//metrics.macys.net/1x1.gif';
  const devUrl = '//metrics-dev.macys.net/1x1.gif';
  const { host } = window.location;
  let logging = false; // log messages default:false, set to true in measured component to get logs

  const log = function (opts) {
    // consolidate log messages
    Logger.log(`${opts.name} start time : ${opts.timeStart} milliseconds `);
    Logger.log(`${opts.name} stop time : ${opts.timeEnd} milliseconds `);
    // total time measurement
    Logger.log(`${opts.name} total load time : ${opts.timeEnd - opts.timeStart} milliseconds `);
  };

  const getCapturingState = function (upBound) {
    let upperBound = upBound;
    // If developer did not pass upperBound, then set to default value
    if (Number.isNaN(Number(upperBound))) {
      upperBound = 3;
    }
    return _.random(0, upperBound) === 1;
  };

  const saveTimeData = function (data) {
    const dataObj = data;
    // if developer did pass any data object as an argument,
    // block entire execution by returning false
    if (typeof dataObj === 'undefined') {
      return false;
    }

    logging = !!dataObj.logging; // logging is to log messages default:false
    const isCapturing = getCapturingState(dataObj.upperBound);
    const devMode = !!dataObj.devMode; // Is this dev mode only?

    /* we don't want to send following property in request
         *   1. Logging
         *   2. Upper Bound Value
         *   3. Dev Mode Flag
         */
    delete dataObj.upperBound;
    delete dataObj.logging;
    delete dataObj.devMode;

    _.extend(timingCaptureDataModel, dataObj);

    const urlContent = `?msg=${window.encodeURIComponent(JSON.stringify(timingCaptureDataModel))}`;
    if (Globals && Globals.getValue('props.spoCaptureTimingEnabled') === 'true') {
      // master killswitch to send ajax request
      if (host.indexOf('.fds.com') !== -1 || devMode) {
        // condition to fire on dev server
        $.ajax({
          type: 'GET',
          url: devUrl + urlContent,
        });
      } else if (isCapturing) {
        // condition to fire on production
        // we dont want request to be fired all the time by using random
        $.ajax({
          type: 'GET',
          url: prodUrl + urlContent,
        });
      }
    }
    if (logging) {
      log(dataObj);
    }
    return true;
  };

  module.exports = {
    saveTimeData,
  };
}
