import _ from 'lodash';
import horizontalExampleChildView from './templates/partials/carousel/HorizontalExampleChildViewTemplate.hbs';
import slideshowExampleChildView from './templates/partials/carousel/SlideShowChildViewExample.hbs';
import verticalExampleChildView from './templates/partials/carousel/VerticalExampleChildViewTemplate.hbs';
import HorizontalCarousel from './views/HorizontalCarousel';
import VerticalCarousel from './views/VerticalCarousel';
import SlideShow from './views/SlideShow';
import { ScrollType, ArrowIconSize } from './views/Carousel';

require(`./scss/carousel//${process.env.ENTRY_POINT}/example.scss`);

export default class Example {
  constructor() {
    // Array of model collectoin
    this.exampleCollection = [{
      id: 1,
      name: 'Foo',
    }, {
      id: 2,
      name: 'Foo',
    }, {
      id: 3,
      name: 'Foo',
    }, {
      id: 4,
      name: 'Foo',
    }, {
      id: 5,
      name: 'Foo',
    }, {
      id: 6,
      name: 'Foo',
    }, {
      id: 7,
      name: 'Foo',
    }, {
      id: 8,
      name: 'Foo',
    }, {
      id: 9,
      name: 'Foo',
    }, {
      id: 10,
      name: 'Foo',
    }, {
      id: 11,
      name: 'Foo',
    }, {
      id: 12,
      name: 'Foo',
    }, {
      id: 13,
      name: 'Foo',
    }, {
      id: 14,
      name: 'Foo',
    }, {
      id: 15,
      name: 'Foo',
    }, {
      id: 16,
      name: 'Foo',
    }, {
      id: 17,
      name: 'Foo',
    }, {
      id: 18,
      name: 'Foo',
    }, {
      id: 19,
      name: 'Foo',
    }, {
      id: 20,
      name: 'Foo',
    }, {
      id: 21,
      name: 'Foo',
    }, {
      id: 22,
      name: 'Foo',
    }];

    this.component = {};
    // Render Horizontal Carousel
    this.component.hpComponent = Example.createCarouselView('horizontal', '#hp-holder', Example.createChildrenList(this.exampleCollection, horizontalExampleChildView), { swatch: false, hideButtons: 'small' });
    this.component.heComponent = Example.createCarouselView('horizontal', '#he-holder', Example.createChildrenList(this.exampleCollection.slice(0, 3), horizontalExampleChildView), {
      scrollType: ScrollType.ITEM,
    });
    this.component.hssrComponent = Example.createCarouselView('horizontal', '#hssr-holder', [], { ssr: true });
    this.component.hssrcsrComponent = Example.createCarouselView('horizontal', '#hssrcsr-holder', Example.createChildrenList(this.exampleCollection, horizontalExampleChildView), { ssr: true });


    // // Render Vertical Carousel
    this.component.vpComponent = Example.createCarouselView('vertical', '#vp-holder', Example.createChildrenList(this.exampleCollection, verticalExampleChildView), {
      orientation: 'vertical',
    });

    this.component.veComponent = Example.createCarouselView('vertical', '#ve-holder', Example.createChildrenList(this.exampleCollection.slice(0, 3), verticalExampleChildView), {
      orientation: 'vertical',
      scrollType: ScrollType.ITEM,
    });
    this.component.vssrComponent = Example.createCarouselView('vertical', '#vssr-holder', [], { orientation: 'vertical', ssr: true });
    this.component.vssrcsrComponent = Example.createCarouselView('vertical', '#vssrcsr-holder', Example.createChildrenList(this.exampleCollection, verticalExampleChildView), { orientation: 'vertical', ssr: true });

    this.component.slideshowComponent = Example.createCarouselView('slideshow', '#slideshow-holder', Example.createChildrenList(this.exampleCollection.slice(0, 8), slideshowExampleChildView));
    this.component.slideshowComponent2 = Example.createCarouselView('slideshow', '#slideshow-holder2', [], { ssr: true });
    this.component.slideshowComponent3 = Example.createCarouselView('slideshow', '#slideshow-holder3', [], { ssr: true });
    this.component.slideshowComponent4 = Example.createCarouselView('slideshow', '#slideshow-holder4', [], { ssr: true });
    this.component.slideshowComponent5 = Example.createCarouselView('slideshow', '#slideshow-holder5', [], { ssr: true });
    this.addEventListener();
  }


  /**
     *
     * Create Carousel creates carousel view based on orientation and attach the dom into the given
     * selector.
     * @param { String } selector - HTML selector that you want to populate this carousel on
     * @param { HTMLDOMList } childView - list(Array) of <li> HTML DOM elements ( child views )
     * @param { Object } opts - options such as
     *                              1. orientation of the carousel
     *                              2. size of left/right chevron icon
     */
  static createCarouselView(orientation, selector, childView, opts) {
    const options = _.extend({
      arrowIconSize: ArrowIconSize.HUGE,
      scrollType: ScrollType.PAGE,
      hideButtons: 'medium',
    }, opts);

    let view = null;

    if (orientation === 'horizontal') {
      view = new HorizontalCarousel({
        el: selector,
        childrenView: childView,
        arrowIconSize: options.arrowIconSize,
        scrollType: options.scrollType,
        ssr: options.ssr,
        swatch: (typeof (options.swatch) === 'undefined') ? true : options.swatch,
        hideButtons: options.hideButtons,
      });
    } else if (orientation === 'vertical') {
      view = new VerticalCarousel({
        el: selector,
        childrenView: childView,
        arrowIconSize: options.arrowIconSize,
        scrollType: options.scrollType,
        ssr: options.ssr,
      });
    } else if (orientation === 'slideshow') {
      view = new SlideShow({
        el: selector,
        childrenView: childView,
        arrowIconSize: options.arrowIconSize,
        ssr: options.ssr,
        infinity: true,
      });
    }

    view.render();

    return view;
  }


  /**
     *
     * @param { Array } collection
     * @param { HBS } template
     */
  static createChildrenList(collection, template) {
    // initiate childviews array
    const childrenView = [];

    // if collection template is not exist, then pass empty list
    if (typeof collection === 'undefined' || typeof template === 'undefined') {
      return [];
    }

    // iterate through each collection and create child view accordingly
    _.each(collection, (model, key) => {
      // if id does not exist in the model, add key as it's model
      _.extend({
        id: key,
      }, model);

      // create child view using model and child template if template exist
      const childWrapper = document.createElement('li');
      childWrapper.innerHTML = template(model);
      childrenView.push(childWrapper);
    });

    return childrenView;
  }

  addEventListener() {
    const listOfComponent = ['hp', 'he', 'hssr', 'hssrcsr', 'vp', 've', 'vssr', 'vssrcsr'];

    _.forEach(listOfComponent, (componentName) => {
      const style = (componentName[0] === 'h') ? 'width:100px; height:150px; ' : 'width:190px; height:70px; ';

      document.getElementById(`${componentName}-remove`).addEventListener('click', () => {
        this.component[`${componentName}Component`].removeChild(2);
      });

      document.getElementById(`${componentName}-add`).addEventListener('click', () => {
        this.component[`${componentName}Component`].addChild(Example.createChildView(style));
      });

      document.getElementById(`${componentName}-add-3`).addEventListener('click', () => {
        // create 3 nodes
        const nodeList = [Example.createChildView(style), Example.createChildView(style), Example.createChildView(style)];

        // append on the back
        this.component[`${componentName}Component`].addChildren(nodeList);
      });
    });
  }

  static createChildView(style) {
    const newComponent = document.createElement('li');
    newComponent.innerHTML =
            `<div class="view-example" style="${style}">
            <a href="#foo">CSR View - NEW</a>
        </div>`;

    return newComponent;
  }
}
