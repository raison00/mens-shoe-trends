const _ = require('underscore');

const SWATCH_WIDTH = 27;
const JUMBO_SWATCH_WIDTH = 90;
let MAX_SWATCHES = 6;
let selectedSwatch;
let productUrlTemplate;
let swatchUrl;
let jumboSwatchUrl;
let swatchCount;

function calculateOffset(swatchCountParam, swatchWidth, idx) {
  return parseInt(swatchCountParam * swatchWidth, 10) - ((idx % MAX_SWATCHES) * swatchWidth);
}

function imageSrc(imageData) {
  let { urlTemplate } = imageData;
  let { filePath } = imageData.primaryImage;
  if (!filePath || urlTemplate === '') {
    return null;
  }
  const width = imageData.primaryImage.width || 472;
  const height = imageData.primaryImage.height || 295;
  const quality = '90,0';
  let imgUrl = '';

  urlTemplate = urlTemplate || 'https://images.bloomingdales.com/is/image/BLM/products';

  if (!/\.(tif)$/i.test(filePath)) {
    filePath = `${filePath}.tif`;
  }

  if (urlTemplate.indexOf('[IMAGEFILEPATH]') > 0) {
    imgUrl = urlTemplate
      .replace(/\[IMAGEFILEPATH\]/gi, filePath)
      .replace(/\[WIDTH\]/gi, width)
      .replace(/\[QUALITY\]/gi, quality);
  } else {
    imgUrl += `${urlTemplate}/${filePath}`;
    imgUrl += `?bgc=255,255,255&wid=${width}`;
    imgUrl += '&qlt=90,0&layer=comp&op_sharpen=0&resMode=bicub&op_usm=0.7,1.0,0.5,0&fmt=jpeg';
  }

  const images = _.first(imageData.additionalImageSource, 2);
  if (images && images.length === 2) {
    imgUrl = urlTemplate.replace(/\[IMAGEFILEPATH\]/gi, '').replace(/wid=\[WIDTH\]/gi, '');
    return `${imgUrl}&$b=BLM/products/&layer=0&cropN=0,0,2,1&size=${width},${height}&src=is{$b$${
      images[0].filePath
    }}&anchor=0,0&layer=1&size=${width / 2},${height}&posN=0.5,0&src=is{$b$${images[1].filePath}}&anchor=0,0&layer=2&size=${width /
      2},${height}&posN=1.0,0&wid=${width}`;
  }
  return imgUrl;
}

function buildSimpleUrl(baseImgUrl, srcImg, additionalImageSource, imgWidth) {
  return imageSrc({
    urlTemplate: baseImgUrl,
    primaryImage: {
      filePath: srcImg,
      width: imgWidth,
    },
    additionalImageSource,
  });
}

function buildColorSwatchSprite(data, isJumboSwatch) {
  const swatches = data.colors.colorMap;
  const swatchCountLocal = swatches.length < MAX_SWATCHES ? swatches.length : MAX_SWATCHES;
  let swatchParams = '';
  const swatchWidth = isJumboSwatch ? JUMBO_SWATCH_WIDTH : SWATCH_WIDTH;
  const base = `?&$b=BLM/swatches/&layer=0&size=${parseInt(swatchCountLocal * swatchWidth, 10)},${swatchWidth}&cropN=0,0,${swatchCountLocal},1`;
  const swatchUrlLocal = data.colors.urlTemplate.swatch + base;

  _.each(swatches, (val, idx) => {
    if (val && val.swatchImage && val.swatchImage.filePath && idx < MAX_SWATCHES) {
      swatchParams += `&src=is{$b$${val.swatchImage.filePath}}&anchor=0,0`;
      swatchParams += `&layer=${idx + 1}&size=${swatchWidth},${swatchWidth}`;
      swatchParams += `&posN=${(1 / swatchCountLocal) * (idx + 1)},0`;
    }
  });
  return `${swatchUrlLocal + swatchParams}&op_sharpen=1&fmt=jpeg&qlt=90,0&hei=${swatchWidth}`;
}

function drawSwatch(val, idx, swatchCountParam) {
  const swatchesCount = swatchCountParam < MAX_SWATCHES ? swatchCountParam : MAX_SWATCHES;
  let markup;
  if (idx > MAX_SWATCHES - 1) {
    markup = '<li class="colorSwatch hidden">';
  } else {
    markup = `<li aria-label="${_.escape(val.name)}" role="radio" class="colorSwatch">`;
  }

  let productImageUrl = '';
  let dataJumboSwatchUrl = '';
  let dataJumboSwatchOffset = '';
  if (val && val.imagery && val.imagery.primaryImage) {
    if (val.imagery.primaryImage.filePath) {
      productImageUrl = buildSimpleUrl(productUrlTemplate, val.imagery.primaryImage.filePath, val.imagery.additionalImageSource);
    }
    if (val.imagery.primaryImage.showJumboSwatch) {
      dataJumboSwatchUrl = `data-jumboswatchurl="${jumboSwatchUrl}"`;
      dataJumboSwatchOffset = `data-jumboswatchoffset="${calculateOffset(swatchesCount, JUMBO_SWATCH_WIDTH, idx)}"`;
    }
  }
  const cssClass = selectedSwatch && selectedSwatch.id && val.id && selectedSwatch.id === val.id ? ' class="swatchSelected"' : '';
  const altImage = val.imagery.additionalImageSource && val.imagery.additionalImageSource.length ? "data-altimage='true'" : "data-altimage=''";
  const urlTemplate = val.imagery.urlTemplate ? `data-urltemplate='${val.imagery.urlTemplate}'` : '';

  markup += `<div title="${val.name}" data-colorswatchfamily="${val.normalName}" data-preview="${productImageUrl}"`;
  markup += `${cssClass} ${dataJumboSwatchUrl} ${dataJumboSwatchOffset} ${urlTemplate} ${altImage}>`;
  markup += `<span style="background: url(${swatchUrl}) ${calculateOffset(swatchesCount, SWATCH_WIDTH, idx)}px 0 transparent;"></span>`;
  markup += '</div></li>';
  return markup;
}

module.exports = (data) => {
  let markup = '';

  const swatches = data.colors.colorMap;
  swatchCount = swatches.length;

  if (swatchCount > 1) {
    selectedSwatch = data.colors.selectedColor;

    if (selectedSwatch) {
      swatches.forEach((swatch, index) => {
        if (swatch.id === selectedSwatch.id) {
          swatches.splice(index, 1);
        }
      });

      swatches.unshift(selectedSwatch);
    }

    // changing this value dynamically
    MAX_SWATCHES = swatchCount > 7 ? 5 : 7;
    swatchUrl = buildColorSwatchSprite(data, false);
    jumboSwatchUrl = buildColorSwatchSprite(data, true);
    productUrlTemplate = data.colors.urlTemplate.product;

    _.each(swatches, (val, idx) => {
      markup += drawSwatch(val, idx, swatchCount);
    });
  }

  return markup;
};
