// import App from 'pageApp';
import $ from 'jquery';
import _ from 'underscore';
import Backbone from 'backbone';
import ExpSDK from '@component/common/src/util/ExperimentationSDK';
import ProductThumbnail from '../ProductThumbnail';
import template from '../../templates/partials/component-product-thumbnail/mcom/product-thumbnail.hbs';

// import '../../scss/mcom/product-thumbnail.scss';


export default ProductThumbnail.extend({
  template,
  bootstrap(cmParams, slotId, customerExperiment) {
    if (this.$el.find('script[data-bootstrap="component/product-thumbnail"]').length > 0) {
      const { traits, detail } = JSON.parse(this.$el.find('script[data-bootstrap="component/product-thumbnail"]').html());
      this.buildProductColorSwatch(traits, detail);
      this.carouselSwatchImage(traits);
    }
    this.makeResponsive();
    this.updateProductThumbnailUrl(cmParams, slotId, customerExperiment);
    this.drawMoreLikeThis();
  },
  ui: {
    thumbnailImage: '.thumbnailImage',
    colorSwatch: '.colorSwatch',
    badgeHeader: '.badgeHeader',
    badgeRebate: '.badgeRebate',
    productLink: '.productDescLink',
    mSimilarProductsBtn: 'button.m-similar-products-btn',
  },
  events: {
    'mouseover @ui.colorSwatch': 'swatchSelection',
    'mouseout @ui.colorSwatch': 'swatchSelection',
    'click @ui.colorSwatch': 'swatchSelection',
    'mouseover @ui.badgeHeader': 'badgeToolTip',
    'mouseout @ui.badgeHeader': 'badgeToolTip',
    'click @ui.badgeRebate': 'badgeRebate',
    'click @ui.productLink': 'updateParams',
    'click @ui.mSimilarProductsBtn': 'similarProduct',
  },
  initialize() {
    if (this.model) {
      this.model = new Backbone.Model(this.model.get('product'));
      this.buildProductColorSwatch(this.model.get('traits'), this.model.get('detail'));
      this.model.set({ meta: this.options.pageMeta });
    }
  },
  updateProductThumbnailUrl(cmParams, slotId, customerExperiment) {
    const productUrl = this.$el.find('.productDescLink');
    const that = this;
    _.each(productUrl, (val, idx) => {
      const productId = that.$el.attr('id');
      const segExp = {
        '148-20': 'A',
        '148-21': 'A',
        '148-22': 'A',
        '149-20': 'B',
        '149-21': 'B',
        '149-22': 'B',
        '150-20': 'C',
        '150-21': 'C',
        '150-22': 'C',
        '162-20': 'E',
        '162-21': 'E',
        '162-22': 'E',
        '163-20': 'F',
        '163-21': 'F',
        '163-22': 'F',
        '165-20': 'G',
        '165-21': 'G',
        '165-22': 'G',
        '166-20': 'H',
        '166-21': 'H',
        '166-22': 'H',
        '167-20': 'I',
        '167-21': 'I',
        '167-22': 'I',
        '168-20': 'J',
        '168-21': 'J',
        '168-22': 'J',
        '169-20': 'K',
        '169-21': 'K',
        '169-22': 'K',
        '170-20': 'L',
        '170-21': 'L',
        '170-22': 'L',
        '171-20': 'M',
        '171-21': 'M',
        '171-22': 'M',
        '172-20': 'N',
        '172-21': 'N',
        '172-22': 'N',
      };
      if (customerExperiment && Object.keys(segExp).indexOf(customerExperiment) > -1) {
        productUrl[idx].href += `${'?cm_sp=seg_lab_exp'}${customerExperiment}-_-segment${segExp[customerExperiment]}-_-${productId}`;
      }

      if (cmParams) {
        productUrl[idx].href += cmParams;
      }
      if (slotId || slotId === 0) {
        productUrl[idx].href += encodeURIComponent(`&slotId=${parseInt(slotId + 1, 10)}`);
      }
    });
  },
  swatchSelection(e) {
    ProductThumbnail.prototype.swatchSelection.call(this, e);
    const swatchSelection = $(e.currentTarget).children('div');
    let swatchProductPreview = swatchSelection.data('preview');
    let swatchAdditionalImage = swatchSelection.data('colorswatchimg');
    const swatchProductId = swatchSelection.parents('.colorSwatchesContainer').data('colorswatchproduct');
    const thumbnailImage = swatchSelection.parents().find(`#img_${swatchProductId}`);
    let jumboSwatchUrl = swatchSelection.data('jumboswatchurl');
    if (!$(e.currentTarget).hasClass('swatchColorsMore') && e.type === 'mouseout') {
      swatchProductPreview = this.$el.find('.swatchSelected').data('preview');
      swatchAdditionalImage = this.$el.find('.swatchSelected').data('colorswatchimg');
      jumboSwatchUrl = this.$el.find('.swatchSelected').data('jumboswatchurl');
    }
    if (!jumboSwatchUrl) {
      thumbnailImage.attr('src', swatchProductPreview);
      thumbnailImage.attr('data-src', swatchAdditionalImage);
    }
  },
  updateParams(event) {
    let selectedColor;
    const el = event.currentTarget;
    const locationAttrs = el.href.split('#');
    const $thumbnail = $(el).closest('.productThumbnail');
    const productId = $thumbnail.attr('id');

    const selectedSwatchDiv = $thumbnail.find('.colorSwatchesContainer .swatchSelected');
    if (selectedSwatchDiv.length > 0) {
      selectedColor = selectedSwatchDiv.attr('title');
    }
    if (selectedColor) {
      locationAttrs[0] = `${locationAttrs[0]}&swatchColor=${encodeURIComponent(selectedColor)}`;
      el.href = locationAttrs.join('#');
    }
    this.$el.trigger('component::productThumbnail::clicked', [productId]);
    return true;
  },

  similarProduct() {
    /* const productId = $(event.currentTarget).data('product-id');
      const imgId = $(event.currentTarget).data('img-id').replace('.fpx','');
      const url = '/shop/similar-products?id='+productId+'&imageId='+imgId;
      App.channel.trigger('component::productThumbnail::clickMLT', url); */
    return true;
  },

  drawMoreLikeThis() {
    // check Experimentation
    const expArr = ['219-20', '219-21'];
    ExpSDK.getSelectedRecipesForExperiment(expArr).always((recipeIds) => {
      if (recipeIds && recipeIds.length > 0) {
        const recipeId = recipeIds.reduce(recipe => recipe);
        switch (recipeId) {
          case '219-20':
            break;
          case '219-21':
            this.$el.find('.similar-products-feature').removeClass('hidden');
            break;
          default:
        }
      }
    });
  },
});
