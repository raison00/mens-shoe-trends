// #MODULE - ProductThumbnail.
// > Author: Balasubramanian Karthikesan
// > Create Date:
// ##DESCRIPTION: This is the item view to display product thumbnail

import $ from 'jquery';
import Backbone from 'backbone';
import Mn from 'backbone.marionette';
import Overlay from '@component/common/src/components/Overlay';
import { createCarouselView, HORIZONTAL, ArrowIconSize } from '@component/carousel';
import ProductColorSwatches from '../components/ProductColorSwatches';
import ProductColorSwatch from '../ProductColorSwatch';
import colorSwatchTpl from '../templates/partials/component-product-thumbnail/ColorSwatchTemplate.hbs';

const { default: ProductImage } = require(`../components/${process.env.ENTRY_POINT}/ProductImage.js`);

export default Mn.ItemView.extend({
  makeResponsive() {
    ProductImage.attachAdditionalImagesByCollection(this.$el.find('img.thumbnailImage'));
  },
  createSwatchCarousel(swatchHolder, swatches) {
    const collection = new Backbone.Collection(swatches);

    const carouselItems = collection.map(model => new ProductColorSwatch({ model }).render().$el.get(0));
    // TODO: handle childwidth dynamically
    const opts = Object.assign(
      {},
      {
        el: swatchHolder,
        childrenView: carouselItems,
        carouselType: HORIZONTAL,
        arrowIconSize: ArrowIconSize.LARGE,
        childWidth: 35,
      },
      this.options.config,
    );

    const swatchCarousel = createCarouselView(opts.carouselType, opts);

    swatchCarousel.render();

    return swatchCarousel;
  },
  carouselSwatchImage(param) {
    const traits = param;
    const swatches = traits.colors.colorMap;
    // render color swatch in a carousel if swatches more than 5
    const swatchHolder = `#${this.$el.find('.colorSwatchesContainer').attr('id')}`;
    if (swatches.length > 5) {
      this.createSwatchCarousel(swatchHolder, swatches);
      $('.productDescription').addClass('itemDetails');
    } else if (swatches.length > 1 && swatches.length <= 5) {
      traits.colors.noCarousel = true;
      $(swatchHolder).html(colorSwatchTpl(traits));
    }
    const swatchProductId = this.$el.find('.colorSwatchesContainer').data('colorswatchproduct');
    const swatchSelected = this.$el.find('.colorSwatchesContainer').find('.swatchSelected');
    const jumboSwatchUrl = swatchSelected.data('jumboswatchurl');
    const jumboswatchOffset = swatchSelected.data('jumboswatchoffset');
    if (jumboSwatchUrl && jumboswatchOffset) {
      this.showHideJumboSwatch(swatchProductId, jumboSwatchUrl, jumboswatchOffset, true);
    }
  },
  buildProductColorSwatch(traits, detail) {
    // build color swatch
    if (traits && traits.colors && traits.colors.colorMap && traits.colors.colorMap.length) {
      this.buildColorSwatch(traits, detail);
    }
  },
  buildColorSwatch(data, detail) {
    const traits = data;

    traits.colors.colorMap = ProductColorSwatches.buildColorSwatchData(data, detail);
    if (this.model) {
      this.model.set('traits', traits);
    }
  },
  swatchSelection(e) {
    const swatchSelection = $(e.currentTarget).children('div');
    let swatchClass = '';
    const swatchProductId = swatchSelection.parents('.colorSwatchesContainer').data('colorswatchproduct');
    let jumboSwatchUrl = swatchSelection.data('jumboswatchurl');
    let jumboswatchOffset = swatchSelection.data('jumboswatchoffset');
    if (!$(e.currentTarget).hasClass('swatchColorsMore')) {
      if (e.type === 'mouseover' && !swatchSelection.hasClass('swatchSelected')) {
        swatchClass = 'swatchHover';
      } else if (e.type === 'click') {
        swatchClass = 'swatchSelected';
        $(`#colorSwatch_${swatchProductId} li > div`).removeClass(swatchClass);
      } else if (e.type === 'mouseout') {
        swatchSelection.removeClass('swatchHover');
        jumboSwatchUrl = this.$el.find('.swatchSelected').data('jumboswatchurl');
        jumboswatchOffset = this.$el.find('.swatchSelected').data('jumboswatchoffset');
      }
      swatchSelection.addClass(swatchClass);
      if (jumboSwatchUrl) {
        this.showHideJumboSwatch(swatchProductId, jumboSwatchUrl, jumboswatchOffset, true);
      } else {
        this.showHideJumboSwatch(swatchProductId, jumboSwatchUrl, jumboswatchOffset, false);
      }
    }
  },
  showHideJumboSwatch(productId, url, offset, visibility) {
    const jumboSwatch = $(`#jumboSwatch_${productId}`);
    if (visibility) {
      jumboSwatch.parent('.jumboSwatch').show();
      jumboSwatch.css('background', `url(${url})${offset}px 0 transparent`);
    } else {
      jumboSwatch.parent('.jumboSwatch').hide();
      jumboSwatch.css('background', '');
    }
  },
  badgeToolTip(e) {
    const badgeHeader = $(e.currentTarget);
    const badgeToolTip = badgeHeader.prev('.badgeToolTip');
    if (badgeToolTip.length > 0) {
      if (e.type === 'mouseover') {
        badgeToolTip.addClass('toolTipVisible');
      } else if (e.type === 'mouseout') {
        badgeToolTip.removeClass('toolTipVisible');
      }
    }
  },
  badgeRebate(e) {
    this.getRebateBadge($(e.currentTarget));
  },
  getRebateBadge(badgeRebate) {
    const rebateOverlay = new Overlay({
      modal: true,
      width: badgeRebate.data('width'),
      height: badgeRebate.data('height'),
      close() {
        rebateOverlay.destroy();
      },
    });
    $.ajax({
      type: 'GET',
      url: badgeRebate.data('rebateurl'),
      dataType: 'html',
      timeout: 5000,
    }).done((rebateHtml) => {
      rebateOverlay.setBody(rebateHtml);
      rebateOverlay.open();
    });
  },
});
