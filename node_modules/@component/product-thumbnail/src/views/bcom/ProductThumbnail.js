import _ from 'underscore';
import Backbone from 'backbone';
import $ from 'jquery';
import Cookie from '@component/common/src/util/Cookie';
import Coremetrics from '@component/common/src/util/Coremetrics';
import cmAttributes from '@component/common/src/util/CoremetricsAttributes';
import CacheManager from '@component/common/src/util/CacheManager';
import AccessibleRadioGroup from '@component/common/src/components/accessibility/AccessibleRadioGroup';
import tagManager from '@component/common/src/util/TagManagerUtil';
import ProductThumbnail from '../ProductThumbnail';
import ProductImage from '../../components/bcom/ProductImage';
import template from '../../templates/partials/component-product-thumbnail/bcom/product-thumbnail.hbs';
import '../../scss/bcom/product-thumbnail.scss';

let killswitches;
let context;
export default ProductThumbnail.extend({
  template,
  bootstrap(cmParams, slotId) {
    ProductImage.meta = { properties: killswitches };
    ProductImage.attachAdditionalImagesByCollection(this.$el.find('.thumbnailImageContainer'));
    this.updateProductThumbnailUrl(cmParams, slotId);
    this.updateSelectedColor();
    this.displaySelectedJumboSwatch();
    this.makeAccessible();
  },
  ui: {
    thumbnailImage: '.thumbnailImage',
    colorSwatch: '.colorSwatch',
    badgeHeader: '.badgeHeader',
    badgeRebate: '.badgeRebate',
    productLink: '.productDescLink',
    mobileSwatch: '.colorSwatch span',
  },
  events: {
    'mouseover @ui.colorSwatch': 'swatchSelection',
    'mouseout @ui.colorSwatch': 'swatchSelection',
    'click @ui.colorSwatch': 'swatchSelection',
    'click @ui.mobileSwatch': 'handleSwatchRedirectionOnMobile',
    'mouseover @ui.badgeHeader': 'badgeToolTip',
    'mouseout @ui.badgeHeader': 'badgeToolTip',
    'click @ui.badgeRebate': 'badgeRebate',
    'click @ui.productLink': 'updateParams',
  },
  initialize() {
    if (killswitches === undefined) {
      killswitches = this.options.props;
    }
    if (context === undefined) {
      ({ context } = this.options);
    }
    if (this.model) {
      /* Getting KS to pass into product model as they are on initial page load */
      this.model = new Backbone.Model(this.model.get('product'));
      this.model.set({
        meta: {
          properties: killswitches,
          context,
        },
      });
    }
  },
  updateProductThumbnailUrl(cmParams, slotId) {
    const productUrl = this.$el.find('.productDescLink');
    const shopByBrandRegex = /^(\S+)[?&]cm_sp=shop_by_brand(\S+)$/;
    let shopByBrand;
    let attribute39 = cmAttributes.attributeToArray()[38] || '';
    let pnParams = [];
    const { searchPass } = this.options;
    const shippingCountry = Cookie.get('shippingCountry') || 'US';
    // populating brandIndex
    if (window.location.href.match(shopByBrandRegex)) {
      shopByBrand = true;
    }
    _.each(productUrl, (val, idx) => {
      if (shopByBrand) {
        productUrl[idx].href = `${productUrl[idx].href}&brandIndex=1`;
      }
      if (cmParams) {
        productUrl[idx].href += cmParams + encodeURIComponent(`&spp=${parseInt(slotId + 1, 10)}`);
      } else {
        productUrl[idx].href += encodeURIComponent(`#fn=spp=${parseInt(slotId + 1, 10)}`);
      }

      if (attribute39) {
        pnParams = attribute39.split('|');
        if (pnParams.length > 2) {
          pnParams[2] = parseInt(slotId + 1, 10);
        }
        attribute39 = pnParams.join('|');
        productUrl[idx].href += encodeURIComponent(`&pn=${attribute39}`);
      }
      // Populating rsid in thumbnail url
      productUrl[idx].href += encodeURIComponent('&rsid=undefined');

      // Attribute 36
      if (searchPass && shippingCountry === 'US') {
        productUrl[idx].href += encodeURIComponent(`&smp=${searchPass}`);
      }
    });
  },
  displaySelectedJumboSwatch() {
    const jumboSwatchUrl = this.$el.find('li.colorSwatch .swatchSelected').data('jumboswatchurl');
    const jumboSwatchOffset = this.$el.find('li.colorSwatch .swatchSelected').data('jumboswatchoffset');
    const swatchProductId = this.$el.find('.productThumbnailImage').attr('id');
    if (jumboSwatchUrl && jumboSwatchOffset && swatchProductId) {
      this.showHideJumboSwatch(swatchProductId, jumboSwatchUrl, jumboSwatchOffset, true);
    }
  }, // Updating Color Selection when users traverse back from PDP Page
  updateSelectedColor() {
    let selectedColor;
    const productId = this.$el ? this.$el.attr('id') : '';
    if (productId) {
      selectedColor = CacheManager.getSession(productId);
      if (selectedColor) {
        this.$el.find(`.colorSwatch div[title^='${selectedColor.replace(/([:.[\],=@'])/g, '\\$1')}']`).click();
      }
    }
  },
  makeAccessible() {
    const $radioGroup = this.$el.find('.colorSwatches');
    const $swatches = $radioGroup.find('.colorSwatch[role="radio"]:visible');
    let $selectedSwatch;
    let hasSelection;

    /* having no color is something okay and expected */
    if ($swatches.length) {
      $selectedSwatch = $radioGroup.find('.colorSwatch .swatchSelected').closest('.colorSwatch');
      hasSelection = $selectedSwatch.length;

      this.radioGroup = new AccessibleRadioGroup({
        parentSelector: $radioGroup,
        defaultCallback(event, $itemToSelect) {
          this.selectRadio($itemToSelect);

          if (event.type === 'keydown') {
            event.preventDefault();
            $itemToSelect.click();
          }
        },
      });

      if (hasSelection) {
        this.radioGroup.selectRadio($selectedSwatch, {
          giveItFocus: false,
        });
      } else {
        this.radioGroup.setFocusable($swatches, false);
        this.radioGroup.setFocusable($swatches.first(), true);
      }

      this.radioGroup.attach();
    }
  },
  handleSwatchRedirectionOnMobile() {
    if (window.innerWidth < 600) {
      window.location = this.$el.children()[0].href;
    }
  },
  swatchSelection(e) {
    ProductThumbnail.prototype.swatchSelection.call(this, e);
    const swatchSelection = $(e.currentTarget).children('div');
    let swatchProductPreview = swatchSelection.data('preview');
    const swatchProductId = swatchSelection.parents('.colorSwatchesContainer').data('colorswatchproduct');
    const thumbnailImage = swatchSelection.parents().find(`#img_${swatchProductId}`);
    const jumboSwatchUrl = swatchSelection.data('jumboswatchurl');
    let pageID;
    const imageArray = [];
    const urlTemplate = swatchSelection.data('urltemplate') || '';
    const imageContainer = swatchSelection
      .parents()
      .find(`#img_${swatchProductId}`)
      .find('img');
    const imageRegex = /\d\/optimized\/\d+_fpx.tif/i;
    if (!$(e.currentTarget).hasClass('swatchColorsMore')) {
      if (e.type === 'mouseover' && !swatchSelection.hasClass('swatchSelected')) {
        if (swatchSelection.attr('data-altimage')) {
          thumbnailImage.addClass('altImage');
          thumbnailImage.attr('data-altimage', 'true');
        } else {
          thumbnailImage.removeClass('altImage');
          thumbnailImage.attr('data-altimage', '');
        }
      } else if (e.type === 'click') {
        if (swatchSelection.attr('data-altimage')) {
          thumbnailImage.addClass('altImage');
          thumbnailImage.attr('data-altimage', 'true');
        } else {
          thumbnailImage.removeClass('altImage');
          thumbnailImage.attr('data-altimage', '');
        }
      } else if (e.type === 'mouseout') {
        swatchProductPreview = this.$el.find('.swatchSelected').data('preview');
        if (this.$el.find('.swatchSelected').length > 0) {
          if (this.$el.find('.swatchSelected').attr('data-altImage')) {
            thumbnailImage.addClass('altImage');
            thumbnailImage.attr('data-altimage', 'true');
          } else {
            thumbnailImage.removeClass('altImage');
            thumbnailImage.attr('data-altimage', '');
          }
        } else if (thumbnailImage.attr('data-altimage')) {
          thumbnailImage.addClass('altImage');
        } else {
          thumbnailImage.removeClass('altImage');
        }
      }
      if (_.isUndefined(jumboSwatchUrl)) {
        if (swatchProductPreview) {
          thumbnailImage.attr('srcset', swatchProductPreview);
          let result = imageRegex.exec(swatchProductPreview);
          while (result) {
            swatchProductPreview = swatchProductPreview.replace(result, '');
            imageArray.push(result[0]);
            result = imageRegex.exec(swatchProductPreview);
          }
        } else if (this.model && this.model.get('imagery')) {
          // case - when no selected color and hovering on the swatches without clicking
          imageArray.push(this.model.get('imagery').primaryImage.filePath);
          if (this.model.get('imagery').additionalImageSource.length > 1) {
            imageArray.push(this.model.get('imagery').additionalImageSource[1].filePath);
          }
        }

        // imageArray = swatchProductPreview.match(/\d\/optimized\/\d+_fpx.tif/i);
        if (imageArray.length > 0) {
          _.each(imageContainer, (image, index) => {
            if (imageArray[index]) {
              $(image).attr('src', `${urlTemplate.replace(/\[IMAGEFILEPATH\]/gi, imageArray[index])}&wid=280&hei=350`);
              $(image).removeClass('hidden');
            } else {
              $(image).attr('src', '#');
              $(image).addClass('hidden');
            }
          });
        }
      } else {
        thumbnailImage.attr('src', swatchProductPreview);
        thumbnailImage.attr('srcset', swatchProductPreview);
      }
    }
    // Trigerring element tags for Bcom
    if (e.type === 'click') {
      cmAttributes.reset();
      if (this.options.pageID) {
        cmAttributes.addAttribute(this.options.pageID, 2);
      }
      cmAttributes.addAttribute(swatchProductId, 29);
      if ($(e.currentTarget).hasClass('swatchColorsMore')) {
        // Trigerring Link Click Tag
        Coremetrics.createLinkClickTag({
          href: $(e.currentTarget)
            .find('a')
            .attr('href'),
          name: 'Swatch-more',
          pageID,
        });
        // Trigerring Element Tag
        Coremetrics.createElementTag({
          elementID: 'Swatch-more',
          elementCategory: 'Browse Grid',
          attributes: cmAttributes.attributeToArray(),
        });
      } else {
        Coremetrics.createElementTag({
          elementID: 'Swatch-click',
          elementCategory: 'Browse Grid',
          attributes: cmAttributes.attributeToArray(),
        });
      }
    }
  },
  updateParams(event) {
    let selectedColor;
    const productId = $(event.currentTarget)
      .closest('.productThumbnail')
      .attr('id');

    const selectedSwatchDiv = $(event.currentTarget)
      .closest('.productThumbnail')
      .find('.colorSwatchesContainer .swatchSelected');
    if (selectedSwatchDiv) {
      selectedColor = selectedSwatchDiv.attr('title');
    }
    if (selectedColor) {
      CacheManager.setSession(productId, selectedColor);
    }

    if (killswitches.bcomCanvasResponsiveEnabled) {
      CacheManager.setSession('selectedProductID', parseInt(productId, 10));
    }

    this.fireTagOnClick(event, productId);

    this.$el.trigger('component::productThumbnail::clicked', [productId]);
    return true;
  },
  fireTagOnClick(e, pId) {
    const elem = $(e.currentTarget);
    const liElm = elem.closest('li');
    const itemPosition = elem
      .closest('ul')
      .children('li')
      .index(liElm);
    let utagData = {};
    const itemPos = itemPosition < 0 ? '' : itemPosition + 1;
    utagData = {
      event_name: 'product click',
      product_id: [pId || ''],
      product_position: [itemPos],
    };
    tagManager.fireTag('view', utagData);
  },
});
