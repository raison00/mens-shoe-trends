// #### Example usage:
//      {{#condition "<value1> <operator> <value2>"}}
//      <content>
//    [ {{else}} <else content> ]
//    {{/condition}}
//
//  Assumptions: operators are separated by spaces
//    (x === '1' || x === '2') is not supported
//    use
//    (x === '1') || (x === '2')
//    ($scope.key === 'value') - (NOTE: no quotes around $scope.key) $scope.key will pull the value of key from the
//    scope using Utils.get("scope.key", options)
//    Multiple expressions are allowed, just need to separate each within parenthesis:
//    a === true && b === 'abc' || c === 'def' && d === false is not supported
//    (a === true) && ((b === 'abc') || ((c === 'def') && (d === false))) is supported
//    flagA && (flagB || (flagC && flagD)) is supported. (Same as above but easier to read :D )
//    Outer parenthesis are NOT supported
//    (flagA && flagB) is not supported
//    flagA && flagB is supported
//  Usable values:
//    Handlebars variables with @ - Example: @index, @key, @first, @last
//    this - Handlebars current context
//    Scope variables created with set helper - Example $scope.key
//  Available operators
//    || - Logical OR
//    && - Logical AND
//    ===, !== - Identity comparison(no type conversion)
//    ==, != - Equality comparison(type conversion)
//    <, >, <=, >= - Relational comparison
//    %, +, -, *, / - Mathematical operations

module.exports = function (expression, options) {
  const Utils = require('./Utils');

  return Utils.callOtherHelper.call(this, 'if', [Utils.evaluate(expression, this, options), options]);
};
