import semver from 'semver';
import test from 'ava';
import pkg from './package.json';

test('it should have all of the necessary dependencies', (t) => {
  t.deepEqual(Object.keys(pkg.dependencies), [
    'backbone',
    'backbone-relational',
    'backbone.babysitter',
    'backbone.marionette',
    'backbone.radio',
    'backbone.wreqr',
    'compass-mixins',
    'fastclick',
    'hammerjs',
    'handlebars',
    'iscroll',
    'jquery',
    'jquery-mask-plugin',
    'jquery-ui',
    'js-cookie',
    'moment',
    'slick-carousel',
    'swfobject',
    'underscore',
    'zeroclipboard',
  ]);
});

test('it should resolve the correct semantic version for backbone', (t) => {
  const version = pkg.dependencies.backbone;
  t.true(semver.satisfies('1.2.3', version));
  t.false(semver.satisfies('1.2.4', version));
});

test('it should resolve the correct semantic version for backbone-relational', (t) => {
  const version = pkg.dependencies['backbone-relational'];
  t.true(semver.satisfies('0.10.0', version));
  t.true(semver.satisfies('0.10.1000', version));
  t.false(semver.satisfies('0.11.0', version));
});

test('it should resolve the correct semantic version for backbone.babysitter', (t) => {
  const version = pkg.dependencies['backbone.babysitter'];
  t.true(semver.satisfies('0.1.0', version));
  t.true(semver.satisfies('0.1.1000', version));
  t.false(semver.satisfies('0.2.0', version));
});

test('it should resolve the correct semantic version for backbone.marionette', (t) => {
  const version = pkg.dependencies['backbone.marionette'];
  t.true(semver.satisfies('2.4.4', version));
  t.false(semver.satisfies('2.4.5', version));
});

test('it should resolve the correct semantic version for backbone.wreqr', (t) => {
  const version = pkg.dependencies['backbone.wreqr'];
  t.true(semver.satisfies('1.3.0', version));
  t.true(semver.satisfies('1.3.1000', version));
  t.false(semver.satisfies('1.4.0', version));
});

test('it should resolve the correct semantic version for compass-mixins', (t) => {
  const version = pkg.dependencies['compass-mixins'];
  t.true(semver.satisfies('0.12.0', version));
  t.true(semver.satisfies('0.12.1000', version));
  t.false(semver.satisfies('0.13.0', version));
});

test('it should resolve the correct semantic version for fastclick', (t) => {
  const version = pkg.dependencies.fastclick;
  t.true(semver.satisfies('1.0.0', version));
  t.true(semver.satisfies('1.0.1000', version));
  t.false(semver.satisfies('1.1.0', version));
});

test('it should resolve the correct semantic version for hammerjs', (t) => {
  const version = pkg.dependencies.hammerjs;
  t.true(semver.satisfies('2.0.0', version));
  t.true(semver.satisfies('2.0.1000', version));
  t.false(semver.satisfies('2.1.0', version));
});

test('it should resolve the correct semantic version for handlebars', (t) => {
  const version = pkg.dependencies.handlebars;
  t.true(semver.satisfies('4.0.0', version));
  t.true(semver.satisfies('4.0.1000', version));
  t.false(semver.satisfies('4.1.0', version));
});

test('it should resolve the correct semantic version for iscroll', (t) => {
  const version = pkg.dependencies.iscroll;
  t.true(semver.satisfies('5.1.0', version));
  t.true(semver.satisfies('5.1.1000', version));
  t.false(semver.satisfies('5.2.0', version));
});

test('it should resolve the correct semantic version for jquery', (t) => {
  const version = pkg.dependencies.jquery;
  t.true(semver.satisfies('1.11.0', version));
  t.true(semver.satisfies('1.11.1000', version));
  t.false(semver.satisfies('1.12.0', version));
});

test('it should resolve the correct semantic version for jquery-mask-plugin', (t) => {
  const version = pkg.dependencies['jquery-mask-plugin'];
  t.true(semver.satisfies('1.11.0', version));
  t.true(semver.satisfies('1.11.1000', version));
  t.false(semver.satisfies('1.12.0', version));
});

test('it should resolve the correct semantic version for jquery-ui', (t) => {
  const version = pkg.dependencies['jquery-ui'];
  t.true(semver.satisfies('1.10.0', version));
  t.true(semver.satisfies('1.10.1000', version));
  t.false(semver.satisfies('1.11.0', version));
});

test('it should resolve the correct semantic version for js-cookie', (t) => {
  const version = pkg.dependencies['js-cookie'];
  t.true(semver.satisfies('2.1.0', version));
  t.true(semver.satisfies('2.1.1000', version));
  t.false(semver.satisfies('2.2.0', version));
});

test('it should resolve the correct semantic version for moment', (t) => {
  const version = pkg.dependencies.moment;
  t.true(semver.satisfies('2.6.0', version));
  t.false(semver.satisfies('2.6.1000', version));
  t.false(semver.satisfies('2.7.0', version));
});

test('it should resolve the correct semantic version for slick-carousel', (t) => {
  const version = pkg.dependencies['slick-carousel'];
  t.true(semver.satisfies('1.8.0', version));
  t.true(semver.satisfies('1.8.1000', version));
  t.false(semver.satisfies('1.9.0', version));
});

test('it should resolve the correct semantic version for swfobject', (t) => {
  const version = pkg.dependencies.swfobject;
  t.true(semver.satisfies('2.2.0', version));
  t.true(semver.satisfies('2.2.1000', version));
  t.false(semver.satisfies('2.3.0', version));
});

test('it should resolve the correct semantic version for underscore', (t) => {
  const version = pkg.dependencies.underscore;
  t.true(semver.satisfies('1.8.0', version));
  t.true(semver.satisfies('1.8.1000', version));
  t.false(semver.satisfies('1.9.0', version));
});

test('it should resolve the correct semantic version for zeroclipboard', (t) => {
  const version = pkg.dependencies.zeroclipboard;
  t.true(semver.satisfies('2.2.0', version));
  t.true(semver.satisfies('2.2.1000', version));
  t.false(semver.satisfies('2.3.0', version));
});
