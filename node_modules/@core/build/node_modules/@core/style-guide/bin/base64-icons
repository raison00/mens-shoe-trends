#!/usr/bin/env node

/*
 * Script that iterates through the given path, searching for SVG files.
 * Encodes the path to each SVG file in base64. Creates individual SCSS partial files for each SVG.
 * Each SCSS file includes classes for full, huge, large, medium, small, and tiny images and stand-alone class for default size.
 * Author: Vanessa
 *
 * @TODO webpack does this for us using the url-loader
 */

// Current Path
var path = require('path');
var fs = require('fs');
// Path to all SVG icons
var walkPath = 'icons/originals';
var iconPreviewFilePath = "./src/templates/encoded-icons.hbs";
fs.writeFile(iconPreviewFilePath, '', function(){ console.log('cleared icon preview template before generating new base64-icons.')} );
var walk = function (dir, done) {
    fs.readdir(dir, function (error, files) {
        if (error) {
            return done(error);
        }
        var i = 0;
        (function next () {
            var file = files[i++];
            if (!file) {
                return done(null);
            }
            // File path + name
            var filePath = dir + '/' + file;
            // console.log("file is ", file);
            // File extenstion
            var ext = path.extname(file);
            if (ext == ".svg"){
                // Check if the object being passed is a file
                fs.stat(filePath, function (error, stat) {
                    if (stat && stat.isDirectory()) {
                        walk(file, function (error) {
                            next();
                        });
                    } else {
                        // Encoded file path + icon
                        var fileName = path.basename(file, ext);
                        data = fs.readFileSync(filePath);
                        var encoded = data.toString('base64');
                        // Path for new scss partials
                        var newFilePath = "./src/scss/encodedIcons/_" + fileName + ".scss";
                        // Create new SCSS file
                        // Create Mix-in

                        var fileContentImage = "background-image: url('data:image/svg+xml;base64," + encoded + "');\n";
                        // Full size icon
                        var fileContentFull = "." + fileName + "-full";
                        var fileContentSizeFull = "height: 40px;\n\twidth: 40px;\n\tbackground-size: 40px 40px;\n\t";
                        // Huge size icon
                        var fileContentHuge = "." + fileName + "-huge";
                        var fileContentSizeHuge = "height: 30px;\n\twidth: 30px;\n\tbackground-size: 30px 30px;\n\t";
                        // Large size icon
                        var fileContentLarge = "." + fileName + "-large";
                        var fileContentSizeLarge = "height: 25px;\n\twidth: 25px;\n\tbackground-size: 25px 25px;\n\t";
                        // Medium size icon
                        var fileContentMedium = "." + fileName + "-medium";
                        var fileContentSizeMedium = "height: 20px;\n\twidth: 20px;\n\tbackground-size: 20px 20px;\n\t";
                        // Small size icon
                        var fileContentSmall = "." + fileName + "-small";
                        var fileContentSizeSmall = "height: 15px;\n\twidth: 15px;\n\tbackground-size: 15px 15px;\n\t";
                        // Tiny size icon
                        var fileContentTiny = "." + fileName + "-tiny";
                        var fileContentSizeTiny = "height: 8px;\n\twidth: 8px;\n\tbackground-size: 8px 8px;\n\t";
                        // Plain SVG (no size specified)
                        // var fileContentPlain = "." + fileName;
                        var fileContentBackground = "background-repeat: no-repeat;\n\t";
                        // var fileContentChaining = fileContentPlain + ",\n" +
                        var fileContentChaining = fileContentFull  + ",\n" +
                                                  fileContentHuge  + ",\n" +
                                                  fileContentLarge + ",\n" +
                                                  fileContentMedium+ ",\n" +
                                                  fileContentSmall + ",\n" +
                                                  fileContentTiny;
                        // Write SCSS content into a new file that will be located in the new file path
                        // Order in which variables are inputed into the new file matters, DO NOT CHANGE
                        var fileContent;

                        fs.writeFile(newFilePath,
                            fileContentChaining+"{\n\t"+fileContentBackground+fileContentImage+"}\n"+
                            fileContentFull+"{\n\t"+fileContentSizeFull+"}\n"+
                            fileContentHuge+"{\n\t"+fileContentSizeHuge+"}\n"+
                            fileContentLarge+"{\n\t"+fileContentSizeLarge+"}\n"+
                            fileContentMedium+"{\n\t"+fileContentSizeMedium+"}\n"+
                            fileContentSmall+"{\n\t"+fileContentSizeSmall+"}\n"+
                            fileContentTiny+"{\n\t"+fileContentSizeTiny+"}\n",
                            (err) => {
                                if (err) throw err;
                                // console.log("_" + fileName + ".scss was succesfully created and saved!");
                        });


                        fs.appendFile(iconPreviewFilePath, '<div class="'+ fileName + '"></div>\n',
                            (err) => {
                                if (err) throw err;
                                // console.log(fileName + " icon added to preview template.");
                        });
                        next();
                    }
                });
            }
            next();
        })();
    });
};

// Error Handler
walk(walkPath, function(error) {
    if (error) {
        throw error;
    }
});
