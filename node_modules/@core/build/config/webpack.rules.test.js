import { stub } from 'sinon';
import test from 'ava';
import _ from 'lodash';

const resolve = require('@core/lib/project/resolve');
const proxyquire = require('proxyquire').noPreserveCache();

let Rules;
let helperPath;
let helperError;

const callback = (err, path) => {
  helperError = err || null;
  helperPath = path || undefined;
};

test.before(() => {
  Rules = proxyquire('./webpack.rules', {
    '@core/lib/handlebars': () => {
      const helperDirs = [resolve('./mock/mock-helpers/helpers1'), resolve('./mock/mock-helpers/helpers2'), resolve('./mock/mock-helpers/helpers3')];
      const partialDirs = [];
      return { partialDirs, helperDirs };
    },
    '@core/lib/project/pkg': () => ({ }),
  });

  stub(console, 'warn');
});

test.after(() => {
  console.warn.restore(); // eslint-disable-line no-console
});

test('Helper not found bad name', (t) => {
  const hbsLoader = _.find(Rules, r => r.loader === 'handlebars-loader');
  hbsLoader.options.helperResolver('ter/badHelper', callback);
  t.is(helperError.message, 'Helper not found error');
  t.is(helperPath, undefined);
});

test('Helper with .', (t) => {
  const hbsLoader = _.find(Rules, r => r.loader === 'handlebars-loader');
  hbsLoader.options.helperResolver('./stubHelper', callback);
  t.is(helperPath, resolve('./mock/mock-helpers/helpers1/stubHelper.js'));
});

test('Helper without .', (t) => {
  const hbsLoader = _.find(Rules, r => r.loader === 'handlebars-loader');
  hbsLoader.options.helperResolver('stubHelper', callback);
  t.is(helperPath, resolve('./mock/mock-helpers/helpers1/stubHelper.js'));
});

test('Helper with subpath', (t) => {
  const hbsLoader = _.find(Rules, r => r.loader === 'handlebars-loader');
  hbsLoader.options.helperResolver('./sub/stubHelper', callback);
  t.is(helperPath, resolve('./mock/mock-helpers/helpers1/sub/stubHelper.js'));
});

test('Helper with deeper subpath', (t) => {
  const hbsLoader = _.find(Rules, r => r.loader === 'handlebars-loader');
  hbsLoader.options.helperResolver('helpers3/sub/stubHelper', callback);
  t.is(helperPath, resolve('./mock/mock-helpers/helpers3/sub/stubHelper.js'));
});

test('Helper with deeper different path', (t) => {
  const hbsLoader = _.find(Rules, r => r.loader === 'handlebars-loader');
  hbsLoader.options.helperResolver('ter/stubHelper', callback);
  t.is(helperPath, resolve('./mock/mock-helpers/helpers2/sub/ter/stubHelper.js'));
});

test('Helper with one occurance', (t) => {
  const hbsLoader = _.find(Rules, r => r.loader === 'handlebars-loader');
  hbsLoader.options.helperResolver('./justOneHelper', callback);
  t.is(helperPath, resolve('./mock/mock-helpers/helpers2/justOneHelper.js'));
});

test('Helper with ./ at start', (t) => {
  const hbsLoader = _.find(Rules, r => r.loader === 'handlebars-loader');
  hbsLoader.options.helperResolver('./justOneHelper', callback);
  t.is(helperPath, resolve('./mock/mock-helpers/helpers2/justOneHelper.js'));
});

test('Helper with ../ at start', (t) => {
  const hbsLoader = _.find(Rules, r => r.loader === 'handlebars-loader');
  hbsLoader.options.helperResolver('../justOneHelper', callback);
  t.is(helperPath, resolve('./mock/mock-helpers/helpers2/justOneHelper.js'));
});

test('Helper with multiple ../ at start', (t) => {
  const hbsLoader = _.find(Rules, r => r.loader === 'handlebars-loader');
  hbsLoader.options.helperResolver('../../../justOneHelper', callback);
  t.is(helperPath, resolve('./mock/mock-helpers/helpers2/justOneHelper.js'));
});

test('Helper with ../ in middle start', (t) => {
  const hbsLoader = _.find(Rules, r => r.loader === 'handlebars-loader');
  hbsLoader.options.helperResolver('/foo/../stubHelper', callback);
  t.is(helperPath, resolve('./mock/mock-helpers/helpers1/stubHelper.js'));
});

test('Helper with no file extension', (t) => {
  const hbsLoader = _.find(Rules, r => r.loader === 'handlebars-loader');
  hbsLoader.options.helperResolver('./noExtension', callback);
  t.is(helperPath, resolve('./mock/mock-helpers/helpers3/noExtension'));
});

test('Helper not found bad path', (t) => {
  const hbsLoader = _.find(Rules, r => r.loader === 'handlebars-loader');
  hbsLoader.options.helperResolver('ter1/stubHelper', callback);
  t.is(helperError.message, 'Helper not found error');
  t.is(helperPath, undefined);
});

test('Exclude custom helper resolver', (t) => {
  Rules = proxyquire('./webpack.rules', {
    '@core/lib/handlebars': () => {
      const helperDirs = [resolve('./mock/mock-helpers/helpers1'), resolve('./mock/mock-helpers/helpers2'), resolve('./mock/mock-helpers/helpers3')];
      const partialDirs = [];
      return { partialDirs, helperDirs };
    },
    '@core/lib/project/pkg': () => ({ config: { excludeCustomResolver: true } }),
  });
  const hbsLoader = _.find(Rules, r => r.loader === 'handlebars-loader');

  t.is(hbsLoader.options.helperResolver, undefined);
});
