const moment = require('moment');
const { BannerPlugin } = require('webpack');
const ExtractTextPlugin = require('extract-text-webpack-plugin');
const UglifyJsPlugin = require('uglifyjs-webpack-plugin');
const { AssetPathsPlugin, ProgressPlugin } = require('@core/lib/webpack');
const { BundleAnalyzerPlugin } = require('webpack-bundle-analyzer');
const resolve = require('@core/lib/project/resolve');

const pkg = require('@core/lib/project/pkg')();

const isProd = process.env.NODE_ENV === 'production';

const getPlugins = () => {
  const plugins = [
    new ProgressPlugin(),
    new BannerPlugin(`date: ${moment().format('LLLL')} name: ${pkg.name} version: ${pkg.version}`),
    new AssetPathsPlugin(),
  ];

  if (isProd) {
    plugins.push(...[
      new ExtractTextPlugin({
        filename: 'common.css',
        allChunks: true,
      }),
      new UglifyJsPlugin({
        sourceMap: true,
        parallel: true,
        cache: true,
        uglifyOptions: {
          mangle: false,
          compress: {
            unused: true,
          },
          output: {
            beautify: false,
            indent_level: 0,
          },
        },
      }),
    ]);
  }

  if (isProd || process.env.NODE_ENV === 'test') {
    /** ****************************************
     *
     * analyzerMode: If prod output html report ('static') else output no html report
     * reportFilename: Is relative to the webpack output directory
     * statsFileName: If prod output JSON file relative to webpack output directory
     *                If test output to resolved directory because HMR is messing with webpack output dir
     *                Test JSON data is used to ensure that all source files have been included in the test coverage bundles
     */
    plugins.push(new BundleAnalyzerPlugin({
      analyzerMode: (isProd ? 'static' : 'disabled'),
      openAnalyzer: false,
      generateStatsFile: true,
      reportFilename: '../../../bundle-analysis/report.html',
      statsFilename: (isProd ? '../../../bundle-analysis/stats.json' : resolve(`./dist/${process.env.ENTRY_POINT || '.'}/bundle-analysis/test-stats.json`)),
      statsOptions: (isProd ? {} : {
        hash: false,
        version: false,
        timings: false,
        assets: false,
        chunks: false,
        cachedAssets: false,
        reasons: false,
        source: false,
        children: false,
        errors: false,
        errorDetails: false,
        warnings: false,
      }),
    }));
  }

  return plugins;
};

module.exports = getPlugins();
