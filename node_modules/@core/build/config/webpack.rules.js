const fs = require('fs-extra');
const _ = require('lodash');
let { partialDirs, helperDirs } = require('@core/lib/handlebars')();
const pkg = require('@core/lib/project/pkg')();

partialDirs = partialDirs.filter(a => fs.existsSync(a));
helperDirs = helperDirs.filter(a => fs.existsSync(a));

const helperObj = {};
const getHelpers = (helperDir) => {
  const results = fs.readdirSync(helperDir);
  results.forEach((result) => {
    // Check if this is a directory
    const resStats = fs.statSync(`${helperDir}/${result}`);
    if (resStats.isDirectory()) {
      getHelpers(`${helperDir}/${result}`);
    } else {
      // Handle valid helpers without extensions.  Other files will be indexed but not referenced.
      const key = (result.endsWith('.js')) ? result.slice(0, -3) : result;
      if (!helperObj[key]) {
        // Key for this helper doesn't exist yet so create it.
        helperObj[key] = [`${helperDir}/${result}`];
      } else if (!helperObj[key].includes(`${helperDir}/${result}`)) {
        // Key for this helper already exists to add it if it's not already in the array.
        helperObj[key].push(`${helperDir}/${result}`);
      }
    }
  });
};


const hbsLoaderOpts = {
  partialDirs,
  helperDirs,
  debug: false,
};

function helperResolver(rawHelper, callback) {
  // Handle helpers starting with ./ or multi depth references
  const helper = rawHelper.split('/').pop();

  // Check for helper being resolved
  const foundHelperObject = helperObj[helper];
  if (foundHelperObject) {
    if (foundHelperObject.length > 1) {
      // If the raw helper begins with ./ ../ or multiples then grab pathing after last ./ else grab it all
      const dotIndex = rawHelper.lastIndexOf('./');
      const helperPathed = (dotIndex > -1) ? rawHelper.slice(dotIndex + 2) : rawHelper; // Adding 2 for the ./ itself
      // Find first match that contains the full path
      const helperFound = _.find(foundHelperObject, o => o.includes(helperPathed));

      if (helperFound) {
        callback(null, helperFound);
      } else {
        callback(new Error('Helper not found error'));
      }
    } else {
      // Grab first one listed - There is no context passed to the resolver of the file the helper is contained within.
      callback(null, foundHelperObject[0]);
    }
  } else {
    callback(new Error('Helper not found error'));
  }
}

if (!pkg.config || !pkg.config.excludeCustomResolver) {
  helperDirs.forEach((helperDir) => {
    getHelpers(helperDir);
  });

  hbsLoaderOpts.helperResolver = helperResolver;
}


module.exports = [
  ...require('./css-loader'),
  require('./babel-loader'),
  {
    test: /\.hbs$/,
    loader: 'handlebars-loader',
    options: hbsLoaderOpts,
  },
  {
    test: /\.(png|jpg|gif|svg)$/,
    loader: 'file-loader',
    options: {
      limit: 10000,
      name: '[name].[ext]?[hash]',
    },
  },
  {
    test: /\.woff(2)?(\?v=[0-9]\.[0-9]\.[0-9])?$/,
    loader: 'url-loader?limit=10000&mimetype=application/font-woff',
  },
  { test: /\.(ttf|eot|svg)(\?v=[0-9]\.[0-9]\.[0-9])?$/, loader: 'file-loader' },
];
