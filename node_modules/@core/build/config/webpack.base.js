const _ = require('lodash');
const path = require('path');

const {
  name,
  outputPath,
  publicPath,
  resolve,
  modules,
  pkg,
} = require('@core/lib/project')();

const entryPoint = process.env.ENTRY_POINT;
const isLibrary = _.get(pkg, 'config.build.library') === true;
const isProd = process.env.NODE_ENV === 'production';

const config = {
  devtool: isProd ? 'source-map' : 'cheap-module-eval-source-map',
  context: path.resolve(__dirname, '../'),
  plugins: require('./webpack.plugins'),
  module: { rules: require('./webpack.rules') },

  // TODO:use chunkhash and name revist using version in file path
  output: {
    path: outputPath(entryPoint),
    publicPath: publicPath(),
    filename: `js/${name}.[name].js`,
    chunkFilename: `js/${name}.[name].[chunkhash].js`,
    jsonpFunction: `${name.replace(/-/g, '_')}_jsonp`,
  },

  resolve: {
    modules,

    /**
     * app alias is needed, because this is currently how components/features reference the
     * page-level application object (marionette).
     */
    alias: {
      app: resolve('app'),
      pageApp: resolve('app'),
    },
  },

  performance: {
    maxEntrypointSize: 300000,
    hints: isProd ? 'warning' : false,
  },
};

if (isLibrary) {
  _.extend(config.output, {
    libraryTarget: 'window',
    library: pkg.name,
  });
}

module.exports = config;
