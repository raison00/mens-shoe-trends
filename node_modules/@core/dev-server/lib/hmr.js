const _ = require('lodash');
const chalk = require('chalk');
const webpack = require('webpack');
const webpackDevMiddleware = require('webpack-dev-middleware');
const webpackHotMiddleware = require('webpack-hot-middleware');
const renderBundle = require('@core/lib/render-bundle');

/**
 * Attach middleware necessary for HMR.
 * Additionally, re-render server bundle with the proper asset paths after each compilation.
 *
 * @see @core/lib/render-bundle
 * @see https://webpack.js.org/concepts/hot-module-replacement/
 */
module.exports = function hmr() {
  // intentionally loading config only when hmr is called
  const clientConfig = require('@core/build/config/webpack.client');
  const { app } = this;

  // modify client config to work with hot middleware
  // @TODO apps should have a single entry point
  clientConfig.entry = _.transform(clientConfig.entry, (result, value, key) => {
    result[key] = ['webpack-hot-middleware/client', value]; // eslint-disable-line no-param-reassign
  }, {});

  clientConfig.output.filename = '[name].js';
  clientConfig.plugins.push(new webpack.HotModuleReplacementPlugin());

  let firstCompileComplete = false; // export should not resolve until the first compile completes
  return new Promise((resolve, reject) => {
    let mostRecentStats;

    // dev middleware
    const clientCompiler = webpack(clientConfig);
    const devMiddleware = webpackDevMiddleware(clientCompiler, {
      publicPath: clientConfig.output.publicPath,
      stats: { colors: true },
    });

    app.use(devMiddleware);

    clientCompiler.plugin('done', (stats) => {
      const { errors } = stats.toJson();

      if (errors.length) {
        if (!firstCompileComplete) {
          reject(new Error('Compile failed'));
        }
      } else {
        mostRecentStats = stats; // needed by process.on('message')
        const render = renderBundle.call(this, stats);

        if (!firstCompileComplete) {
          firstCompileComplete = true;
          render.then(resolve).catch(reject);
        }
      }
    });

    process.on('message', (m) => {
      // console.log('yields', m)
      if (_.has(m, 'entry') && mostRecentStats) {
        renderBundle.call(this, mostRecentStats, m.entry).then(() => {
          // eslint-disable-next-line no-console
          console.log(`${chalk.green('rebuilt index.html for')} ${chalk.cyan(m.entry)}`);
        });
      }
    });

    // hot middleware
    app.use(webpackHotMiddleware(clientCompiler));
  });
};
