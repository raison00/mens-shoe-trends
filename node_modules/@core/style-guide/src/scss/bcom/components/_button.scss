//Bloomies specific CSS here.

@include add-bloomies-colors;
$button-palette: $bloomies-palette !default;

/// Sizes for buttons.
/// @type Map
$button-sizes: (
  default: rem-calc(14),    // 14px  (default, medium)
  small: rem-calc(13),  // 13px
) !default;

@import '~@core/vendor/scss/foundation-6.4.4-rc1/scss/components/button';

/// Sets the visual style of a button.
/// @param {Color} $background [$button-background] - Background color of the button.
/// @param {Color} $background-hover [$button-background-hover] - Background color of the button on hover. Set to `auto` to have the mixin automatically generate a hover color.
/// @param {Color} $color [$button-color] - Text color of the button. Set to `auto` to automatically generate a color based on the background color.
@mixin button-style(
  $background: $button-background,
  $background-hover: $button-background-hover,
  $color: $button-color,
  $background-hover-lightness: $button-background-hover-lightness
) {
  @if $color == auto {
    $color: color-pick-contrast($background, ($button-color, $button-color-alt));
  }

  @if $background-hover == auto {
    $background-hover: scale-color($background, $lightness: $background-hover-lightness);
  }

  background-color: $background;
  color: $color;

    //TODO: Below case requirement should be passed as a parameter in mixin
    text-transform: uppercase;


  &:hover, &:focus {
    background-color: $background-hover;
    color: $color;
  }
}

/// Adds all styles for a button. For more granular control over styles, use the individual button mixins.
/// @param {Boolean} $expand [false] - Set to `true` to make the button full-width.
/// @param {Color} $background [$button-background] - Background color of the button.
/// @param {Color} $background-hover [$button-background-hover] - Background color of the button on hover. Set to `auto` to have the mixin automatically generate a hover color.
/// @param {Color} $color [$button-color] - Text color of the button. Set to `auto` to automatically generate a color based on the background color.
/// @param {Keyword} $style [solid] - Set to `hollow` to create a hollow button. The color defined in `$background` will be used as the primary color of the button.
@mixin button(
  $expand: true,
  $background: $button-background,
  $background-hover: $button-background-hover,
  $color: $button-color,
  $style: $button-fill
) {
  @include button-base;

  @if $style == solid {
    @include button-style($background, $background-hover, $color);
  }

  @else if $style == hollow {
    @include button-hollow;
    @include button-hollow-style($background);
  }

  @if $expand {
    @include button-expand;
  }
}

@mixin button-hollow-style(
  $color: $button-background,
  $hover-lightness: $button-hollow-hover-lightness,
  $border-width: $button-hollow-border-width
) {
  $color-hover: $hover-lightness;

  border: $border-width solid $color;
  color: $color;

  &:hover, &:focus {
    border-color: $color-hover;
    color: $color-hover;
    &.disabled,
    &[disabled] {
      border: $border-width solid $color;
      color: $color;
    }
  }
}

@mixin bloomies-button {
  .button {
    @include button;

    // Sizes
    @each $size, $value in map-remove($button-sizes, default) {
      &.#{$size} {
        font-size: $value;
      }
    }
    &.small {
      padding: rem-calc(10) rem-calc(15);
    }

    &.expanded { @include button-expand; }

    @if $button-responsive-expanded {
      @each $size in $breakpoint-classes {
        @include breakpoint(#{$size} only) {
          &.#{$size}-only-expanded {
            @include button-expand;
          }
        }
        @if $size != $-zf-zero-breakpoint {
          @include breakpoint(#{$size} down) {
            &.#{$size}-down-expanded {
              @include button-expand;
            }
          }

          @include breakpoint(#{$size}) {
            &.#{$size}-expanded {
              @include button-expand;
            }
          }
        }
      }
    }

    // Colors
    @each $name, $color in $button-palette {
      @if $button-fill != hollow {
        &.#{$name} {
          @include button-style($color, auto, auto);
        }
      }
      @else {
        &.#{$name} {
          @include button-hollow-style($color);
        }

        &.#{$name}.dropdown::after {
          border-top-color: $color;
        }
      }
    }

    // Disabled style
    &.disabled,
    &[disabled] {
      @include button-disabled;

      @each $name, $color in $button-palette {
        &.#{$name} {
          @include button-disabled($color, auto);
        }
      }
    }

    // Hollow style
    @if $button-fill != hollow {
      &.secondary {
        @include button-hollow;
        @include button-hollow-style;

        @each $name, $color in $button-palette {
          @if $name == "secondary" {
            $color: $bloomiesBlack;
            &.#{$name} {
              @include button-hollow-style($color);
            }
          }
        }
      }
    }

    // Clear style
    @if $button-fill != clear {
      &.clear {
        @include button-hollow;
        @include button-hollow-style;

        &, &:hover, &:focus {
          &, &.disabled, &[disabled] {
            border-color: transparent;
          }
        }

        @each $name, $color in $button-palette {
          &.#{$name} {
            @include button-hollow-style($color);

            &, &:hover,
            &:focus {
              &,
              &.disabled,
              &[disabled] {
                border-color: transparent;
              }
            }
          }
        }
      }
    }

    // Dropdown arrow
    &.dropdown {
      @include button-dropdown;

      @if $button-fill == hollow {
        &::after {
          border-top-color: $button-background;
        }
      }

      &.hollow {
        &::after {
          border-top-color: $button-background;
        }

        @each $name, $color in $button-palette {
          &.#{$name} {
            &::after {
              border-top-color: $color;
            }
          }
        }
      }
    }

    // Button with dropdown arrow only
    &.arrow-only::after {
      top: -0.1em;
      float: none;
      margin-#{$global-left}: 0;
    }
  }
  a.button {
    text-decoration: none;
    box-sizing: border-box;

    &:focus {
      outline: rem-calc(3) solid $bloomiesBlueOutline;
    }
  }

}
