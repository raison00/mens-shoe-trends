@import '~@core/vendor/scss/foundation-6.4.4-rc1/scss/components/button';


/// Sets the visual style of a button.
/// @param {Color} $background [$button-background] - Background color of the button.
/// @param {Color} $background-hover [$button-background-hover] - Background color of the button on hover. Set to `auto` to have the mixin automatically generate a hover color.
/// @param {Color} $color [$button-color] - Text color of the button. Set to `auto` to automatically generate a color based on the background color.
@mixin button-style(
  $background: $button-background,
  $background-hover: $button-background-hover,
  $color: $button-color,
  $background-hover-lightness: $button-background-hover-lightness,
  $primary: $primary-color,
  $secondary: $button-background-secondary
) {
  // override border-color for mcom
  @if $background == $secondary {
    border-color: $button-color-alt;
  } @elseif $background == $primary {
    border-color: $background;
  }
  text-transform: $button-text-transform;
  font-weight: $button-font-weight;

  @if $color == auto {
    $color: color-pick-contrast($background, ($button-color, $button-color-alt));
  }
  @if $background-hover == auto {
    $background-hover: scale-color($background, $lightness: $background-hover-lightness);
  }
  background-color: $background;
  color: $color;
  &:hover, &:focus {
    background-color: $background-hover;
    color: $color;
  }
}



@mixin macys-button {
  button,.button {
    @include button;

    // Sizes
    @each $size, $value in map-remove($button-sizes, default) {
      &.#{$size} {
        font-size: $value;
      }
    }
    &.small {
      // @debug #{strip-unit(rem-calc(8, 14))};
      padding: #{strip-unit(rem-calc(8, 14))}em #{strip-unit(rem-calc(16, 14))}em;
    }
    &.tiny{ 
      padding: #{strip-unit(rem-calc(5, 14))}em #{strip-unit(rem-calc(5, 14))}em; 
    }
    &.expanded { @include button-expand; }

    @if $button-responsive-expanded {
      @each $size in $breakpoint-classes {
        @include breakpoint(#{$size} only) {
          &.#{$size}-only-expanded {
            @include button-expand;
          }
        }
        @if $size != $-zf-zero-breakpoint {
          @include breakpoint(#{$size} down) {
            &.#{$size}-down-expanded {
              @include button-expand;
            }
          }

          @include breakpoint(#{$size}) {
            &.#{$size}-expanded {
              @include button-expand;
            }
          }
        }
      }
    }

    // Colors
    @each $name, $color in $button-palette {

      // setup tertiary button as clear style for MCOM
      @debug $name;
      @if $button-fill != hollow {
        @if $name == "tertiary" {
          &.#{$name} {
            @include button-hollow-style($color);
            background-color: transparent;
            border-color: transparent;
            text-decoration: underline;
            &:hover,
              &:focus {
                text-decoration: none;
                border-color: transparent;
                &.disabled,
                &[disabled] {
                  border-color: transparent;
                }
              }
          }
        }
        @else{
          // primary and secondary button styles for MCOM
          &.#{$name} {
            @include button-style($color, auto, auto);
          }
        }
      }
      @else {
        &.#{$name} {
          @include button-hollow-style($color);
        }

        &.#{$name}.dropdown::after {
          border-top-color: $color;
        }
      }
    }

    // Disabled style
    &.disabled,
    &[disabled] {
      @include button-disabled;

      @each $name, $color in $button-palette {
        &.#{$name} {
          @include button-disabled($color, auto);
        }
      }
    }

    // Hollow style
    @if $button-fill != hollow {
      &.hollow {
        @include button-hollow;
        @include button-hollow-style;

        @each $name, $color in $button-palette {
          &.#{$name} {
            @include button-hollow-style($color);
          }
        }
      }
    }

    // Clear style
    @if $button-fill != clear {
      &.clear {
        @include button-hollow;
        @include button-hollow-style;

        &, &:hover, &:focus {
          &, &.disabled, &[disabled] {
            border-color: transparent;
          }
        }

        @each $name, $color in $button-palette {
          &.#{$name} {
            @include button-hollow-style($color);

            &, &:hover,
            &:focus {
              &,
              &.disabled,
              &[disabled] {
                border-color: transparent;
              }
            }
          }
        }
      }
    }
    ////////////////////////////////////////////////////////
    // MCOM does not use dropdown with button, 
    // we use broser default dropdown for <select> input
    // for "split-button" like drop-down, see button-group
    ////////////////////////////////////////////////////////

    // // Dropdown arrow
    // &.dropdown {
    //   @include button-dropdown;

    //   @if $button-fill == hollow {
    //     &::after {
    //       border-top-color: $button-background;
    //     }
    //   }

    //   &.hollow {
    //     &::after {
    //       border-top-color: $button-background;
    //     }

    //     @each $name, $color in $button-palette {
    //       &.#{$name} {
    //         &::after {
    //           border-top-color: $color;
    //         }
    //       }
    //     }
    //   }
    // }

    //   // Button with dropdown arrow only
    //   &.arrow-only::after {
    //     top: -0.1em;
    //     float: none;
    //     margin-#{$global-left}: 0;
    //   }
  }
  a.button {
    &,
    &:hover,
    &:focus {
      text-decoration: none;
    }
  }
  button.icon-button{
    border: none;
    height: 40px;
    width: 40px;
    background-color: inherit;
    &.center {
      background-position: center;
    }
    &:hover, &:focus {
      background-color: $light-gray;
    }
    &.small {
      height: 30px;
      width: 30px;
    }
    &.tiny {
      height: 24px;
      width: 24px;
    }
  }
  .button.qvLauncher,
  .qvLauncher {
    // @include button-hollow-style($button-qvLauncher-color, $button-hollow-hover-lightness, $button-hollow-border-width);
    color: $button-qvLauncher-color;
    border-color: $button-qvLauncher-border-color;
    font-weight: $button-qvLauncher-font-weight;
    opacity: $button-qvLauncher-opacity;
    background-color: $button-qvLauncher-background-color;
    &:hover, &:focus {
      color: $button-qvLauncher-color;
      border-color: $button-qvLauncher-border-color;
      font-weight: $button-qvLauncher-font-weight;
      opacity: 0.8;
      background-color: smart-scale($button-qvLauncher-background-color, 10%);    
    }
    &.disabled,
    &[disabled] {
      @include button-disabled($button-qvLauncher-background-color, $button-qvLauncher-color);
    }
  }
}







