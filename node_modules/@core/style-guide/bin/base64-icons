#!/usr/bin/env node

/*
 * Author: Vanessa, Kristine Lai, Davis Yi
 * 
 * Script that iterates through the given path, searching for SVG files.
 * Encodes the path to each SVG file in base64. Creates individual SCSS partial files for each SVG.
 * Each SCSS file includes classes for full, huge, large, medium, small, and tiny images and stand-alone class for default size.
 *
 * @TODO webpack does this for us using the url-loader
 */

//Import Statements
const fs = require('fs');
const { extname, basename } = require('path');
const { spawnSync } = require('child_process');


//CONSTS
const BRAND = (process.argv[2] === undefined) ? 'mcom' : process.argv[2].toLowerCase();
const ICON_WALK_PATH = `icons/${BRAND}/originals`;
const ICON_PREVIEW_FILE_PATH = `./src/templates/partials/style-guide/${BRAND}/encoded-icons.hbs`;
const ICON_TARGET_PATH = `./src/scss/${BRAND}/encodedIcons`
const ICON_SIZE_SCSS = '@import "../../common/settings/icons_size";\n';
const SIZE = ['full', 'huge', 'large', 'medium', 'small', 'tiny', 'default'];


/**
 * Name: styleTemplate
 * @param filename - name of the file
 * @param size - Size of Icons 
 * Description: Style Template creates SASS styles for each size of icons and returns string of styles.
 */
const styleTemplate = ( filename, size ) => {
    const ARGUMENT = (size === 'default') ? `$${filename}`:`$${filename} , $icon-size-${size}`; 
    return `.${filename}-${size} {\n\t@include svg-icon( ${ARGUMENT} );\n}\n\n`;
};


/**
 * Name: createTargetDir
 * Description: createTargetDir will overwrite src/scss/<brand>/encodedIcon folder.
 */
const createTargetDir = () => {
    if (!fs.existsSync(ICON_TARGET_PATH)){
        fs.mkdirSync(ICON_TARGET_PATH);
    } else {
        spawnSync(`rm -rf ${ICON_TARGET_PATH} && mkdir ${ICON_TARGET_PATH}`, [], {
            shell: true,
            stdio: 'inherit'
        });
    }
}

/**
 * Name: Walk
 * @param done - callback funtion that throws error message if there is any
 * Description: Recursive function that walks through icons/<brand> folder recursively, 
 * read each svg files, base64 encode it, and create correspond scss files in
 * src/scss/<brand>/encodedIcons folder. 
 */
const walk = (done) => {
    console.log('walk called');
    
    fs.readdir(ICON_WALK_PATH, (error, files) => {
        if (error) {
            return done(error);
        }

        let i = 0;
        
        (function next () {
            let file = files[i++];
            if (!file) {
                return done(null);
            }
            // File path + name
            let filePath = `${ICON_WALK_PATH}/${file}`;

            // File extenstion
            let ext = extname(file);
            if (ext === ".svg"){
                // Check if the object being passed is a file
                fs.stat(filePath, (error, stat) => {
                    if (stat && stat.isDirectory()) {
                        walk( file, error => next() );
                    } else {
                        // Encoded file path + icon
                        let fileName = basename(file, ext);
                        data = fs.readFileSync(filePath);
                        let encoded = data.toString('base64');

                        // Create new SCSS file
                        const newFilePath =  `${ICON_TARGET_PATH}/_${fileName}.scss`;                        

                        // Creart icon css variable
                        const ICON_VAR = `$${fileName}: url("data:image/svg+xml;base64,${encoded}");\n`;

                        // Iterate through on given size and create style
                        let style = '';
                        SIZE.forEach( size  => style += styleTemplate( fileName, size ));
                        
                        // Write SCSS content into a new file that will be located in the new file path
                        // Order in which variables are inputed into the new file matters, DO NOT CHANGE

                        fs.writeFile(newFilePath,
                            `${ICON_SIZE_SCSS}\n`+
                            `${ICON_VAR}\n`+
                            style,
                            (err) => {
                                if (err) throw err;
                                console.log(`_${fileName}.scss was succesfully created and saved!`);
                        });


                        fs.appendFile(ICON_PREVIEW_FILE_PATH, `<div class="${fileName}-large"></div>\n`,
                            (err) => {
                                if (err) throw err;
                                console.log(`${fileName} icon added to preview template.`);
                        });

                        next();
                    }
                });
            }
            next();
        })();
    });
};


/**
 * Name: runEncoding
 * Description: Main function that calls createTargetDir and then calls walk recursive function.
 */
const runEncoding = () => {
    console.log(`The brand is ${BRAND}`);
    //Create encoded icon scss folder (recreate one if exist)
    createTargetDir();
    
    // Clear preview template
    fs.writeFile(ICON_PREVIEW_FILE_PATH, '', () => { console.log('cleared mcon icon preview template before generating new base64-icons.')} );

    // Error Handler
    walk((error) => {
        if (error) throw error;
    });
}


//Run Encoding function by default
runEncoding();
