const _ = require('lodash');
const fs = require('fs-extra');
const path = require('path');
const requireAll = require('require-all');
const resolve = require('../project/resolve');
const recurse = require('../project/recurse');

module.exports = (projectPath) => {
  const helperDirs = [
    resolve('src/js/helpers'),
    resolve('src/helpers'), // @TODO remove legacy path
  ];
  const partialDirs = [
    resolve('src/templates/partials'),
    resolve('views/partials'), // @TODO remove legacy path
  ];

  // Handle parent calling dependency for helpers and partials - only needed by macysui.
  // @TODO remove when macys ui is retired. redundant.
  if (projectPath !== __dirname) {
    helperDirs.push(resolve(`${projectPath}/src/js/helpers`));
    helperDirs.push(resolve(`${projectPath}/src/helpers`)); // @TODO remove legacy path
    partialDirs.push(resolve(`${projectPath}/src/templates/partials`));
    partialDirs.push(resolve(`${projectPath}/views/partials`)); // @TODO remove legacy path
  }

  // These always resolve to the active parent no a dependency
  recurse((project) => {
    helperDirs.push(resolve(`${project.root}/src/js/helpers`));
    helperDirs.push(resolve(`${project.root}/src/helpers`)); // @TODO remove legacy path
    partialDirs.push(resolve(`${project.root}/src/templates/partials`));
    partialDirs.push(resolve(`${project.root}/views/partials`)); // @TODO remove legacy path
  });

  // resolve common helpers/partials
  helperDirs.push(resolve('node_modules/@component/common/src/helpers_converted')); // @TODO remove legacy path
  helperDirs.push(resolve('node_modules/@component/common-helpers/src/server-helpers'));
  partialDirs.push(resolve('node_modules/@component/common/views/partials')); // @TODO remove legacy path
  helperDirs.push(path.resolve('helpers'));
  partialDirs.push(path.resolve('partials'));

  /**
   * Unfortunately, handlebars-loader (used by webpack build) just expects an array of paths,
   * whereas express-handlebars (used by SSR) expects an object of actual handler functions,
   * keyed by handler name. Luckily, require-all exists to help us out.
   *
   * Exported as a function because it is an expensive operation.
   *
   * @see https://www.npmjs.com/package/require-all
   */
  const helpers = () => {
    let result = {};

    /**
     * @TODO
     *
     * Currently, some helper dirs include helpers that are not node-friendly, for example they
     * use define(), or require client-side libraries. This is because they are currently
     * all expected to be processed by webpack, and expect the handlebars-runtime.
     *
     * There is currently no clear separation of what can get rendered where (SSR vs. not), which
     * needs to change. Technically all templates should be bundled, and the handlebars-runtime
     * should not be required. It is also very expensive to use.
     *
     * For now, create a clone of helperDirs that omits directories which contain non-node-friendly
     * modules. Without this, the handlebars engine will yell when attempting to import them.
     */
    const omit = [
      resolve('node_modules/@component/common/src/helpers'),
      resolve('node_modules/@component/common-helpers/src/helpers'),
    ];
    const temp = _.remove(_.clone(helperDirs), helperDir => !_.includes(omit, helperDir));

    _.each(temp, (helperDir) => {
      // if the helper directory doesn't exist, simply ignore  it
      if (fs.existsSync(helperDir)) { // has to be synchronous for _.transform
        const helpersForDir = requireAll({
          dirname: helperDir,
          filter: /.+\.js$/,
          excludeDirs: /^\.(git)$/,
          recursive: true,
          map: name => path.basename(name, '.js'),
        });

        // this assumes the helper dirs only contain helper files; may be harmful.
        result = { ...result, ...helpersForDir };
      }
    });

    return result;
  };

  return { partialDirs, helperDirs, helpers };
};
