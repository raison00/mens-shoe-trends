const _ = require('underscore');
const { getChildProperty, setChildProperty } = require('@core/util/object');

module.exports = class Store {
  constructor(store = {}) {
    this.store = store;
  }

  get(propPath) {
    const data = (propPath ? getChildProperty(this.store, propPath) : this.store); // call without propPath to get the full tree
    return _.clone(data); // return a shallow copy instead of a reference
  }

  set(propPath, data) {
    if (!propPath) {
      throw new Error('store.set() must be called with a "propPath"');
    }

    setChildProperty(_.clone(data), propPath, this.store); // store a shallow copy instead of a reference
  }

  replaceState(state) {
    this.store = {};

    // loop through keys and call store.set() to ensure the object is shallow copied instead of stored by reference
    Object.keys(state).forEach((key) => {
      this.set(key, state[key]);
    });
  }
};
