/* eslint-disable */
const expUtil = require('./ExpServersideUtil');

module.exports = (function () {
  const queryString = function (search) {
    let queryStr = search,
      queryArr = queryStr.replace('?', '').split('&'),
      queryParams = {};

    for (let q = 0, qArrLength = queryArr.length; q < qArrLength; q++) {
      const qArr = queryArr[q].split('=');
      queryParams[qArr[0]] = qArr[1];
    }

    return queryParams;
  };

  const filteredKeys = function (obj, filter) {
    let key,
      keys = [];
    for (key in obj) {
      if (obj.hasOwnProperty(key) && filter.test(key)) {
        keys.push(key);
      }
    }
    return keys;
  };

  const regionCodes = ['AD', 'AE', 'AF', 'AFR', 'AG', 'AI', 'AL', 'AM', 'AO', 'AQ', 'AR', 'AS', 'ASIA', 'AT', 'AU', 'AUSNZ', 'AW', 'AX', 'AZ',
    'BA', 'BB', 'BD', 'BE', 'BF', 'BG', 'BH', 'BI', 'BJ', 'BL', 'BM', 'BN', 'BO', 'BQ', 'BR', 'BS', 'BT', 'BV', 'BW', 'BY', 'BZ', 'CA', 'CAN', 'CAR', 'CC',
    'CD', 'CF', 'CG', 'CH', 'CI', 'CK', 'CL', 'CM', 'CN', 'CO', 'CR', 'CU', 'CV', 'CW', 'CX', 'CY', 'CZ', 'DE', 'DJ', 'DK', 'DM', 'DO', 'DR', 'DZ', 'EC', 'EE',
    'EG', 'EH', 'ER', 'ES', 'ET', 'EUR', 'FI', 'FJ', 'FK', 'FM', 'FO', 'FR', 'GA', 'GB', 'GD', 'GE', 'GF', 'GG', 'GH', 'GI', 'GL', 'GM', 'GN', 'GP', 'GQ', 'GR',
    'GS', 'GT', 'GU', 'GW', 'GY', 'HK', 'HM', 'HN', 'HR', 'HT', 'HU', 'IC', 'ID', 'IE', 'IL', 'IM', 'IN', 'INTL', 'IO', 'IQ', 'IR', 'IS', 'IT', 'JE', 'JM',
    'JO', 'JP', 'KE', 'KG', 'KH', 'KI', 'KM', 'KN', 'KP', 'KR', 'KW', 'KY', 'KZ', 'LA', 'LATAM', 'LB', 'LC', 'LI', 'LK', 'LR', 'LS', 'LT', 'LU', 'LV', 'LY',
    'MA', 'MC', 'MD', 'ME', 'MEX', 'MF', 'MG', 'MH', 'MIDE', 'MK', 'ML', 'MM', 'MN', 'MO', 'MP', 'MQ', 'MR', 'MS', 'MT', 'MU', 'MV', 'MW', 'MX', 'MY', 'MZ',
    'NA', 'NC', 'NE', 'NF', 'NG', 'NI', 'NL', 'NO', 'NP', 'NR', 'NU', 'NZ', 'OM', 'PA', 'PE', 'PF', 'PG', 'PH', 'PK', 'PL', 'PM', 'PN', 'PR', 'PS', 'PT', 'PW',
    'PY', 'QA', 'RE', 'RO', 'RS', 'RU', 'RW', 'SA', 'SB', 'SC', 'SD', 'SE', 'SG', 'SH', 'SI', 'SJ', 'SK', 'SL', 'SM', 'SN', 'SO', 'SR', 'SS', 'ST', 'SV', 'SX',
    'SY', 'SZ', 'TC', 'TD', 'TF', 'TG', 'TH', 'TJ', 'TK', 'TL', 'TM', 'TN', 'TO', 'TR', 'TT', 'TV', 'TW', 'TZ', 'UA', 'UG', 'UM', 'US', 'UY', 'UZ', 'VA', 'VC',
    'VE', 'VG', 'VI', 'VN', 'VU', 'WF', 'WS', 'YE', 'YT', 'ZA', 'ZM', 'ZW', 'US_REGION_1', 'US_REGION_2', 'US_REGION_3', 'US_REGION_4', 'US_REGION_5',
  ];

  const getMultiValueCookie = function (name, multiValueCookie, cookie) {
    let result,
      mvcParts,
      plen,
      j,
      items,
      MVC_SEPARATOR = '3_87_',
      MVC_EQUATOR = '1_92_',
      MVC_EMPTY_STRING = '4_02_';
    if (!cookie) {
      return;
    }
    if (typeof multiValueCookie !== 'undefined') {
      if (cookie[multiValueCookie]) {
        mvcParts = cookie[multiValueCookie].split(MVC_SEPARATOR);
        plen = mvcParts.length;
        for (j = 0; j < plen; j++) {
          items = mvcParts[j].split(MVC_EQUATOR);
          if (items[0] === name) {
            result = (items[1] === MVC_EMPTY_STRING) ? '' : items[1];
            break;
          }
        }
      }
    } else {
      result = cookie[name];
    }
    return result;
  };

  const getDeviceTypeFromCookie = function (cookie) {
    return getMultiValueCookie('DT', 'MISCGCs', cookie);
  };

  const getShippingCountryFromCookie = function (cookie) {
    let shippingCountry = 'US';
    if (cookie && cookie.shippingCountry !== undefined) {
      shippingCountry = cookie.shippingCountry;
    }
    return shippingCountry;
  };

  const getUserStatusFromCookie = function (cookie) {
    if (!cookie) {
      cookie = [];
    }
    return {
      getUserName() {
        return getMultiValueCookie('UserName', 'MISCGCs', cookie);
      },
      isSignedIn() {
        return cookie.SignedIn === '1';
      },
      isSoftSignedIn() {
        return (getUserName() && !this.isSignedIn());
      },
    };
  };

  const getSanitizedContextParams = function (requestParams, cookie, recipeIds) {
    // all context parameters with allowed values.
    const params = {
      _application: {
        defaultValue: 'SITE',
        allowed: ['SITE', 'ASSOCIATE', 'MOBILE', 'MEW', 'SEO_LINK_MODULE', 'SEARCH_AND_SEND', 'MSA'],
      },
      _navigationType: {
        defaultValue: 'BROWSE',
        allowed: ['SEARCH', 'BROWSE', 'LANDING'],
      },
      _deviceType: {
        defaultValue: 'PC',
        allowed: ['PC', 'TABLET', 'PHONE', 'POS'],
      },
      _shoppingMode: {
        defaultValue: 'SITE',
        allowed: ['SITE', 'WEDDING_REGISTRY', 'STORE'],
      },
      _regionCode: {
        defaultValue: 'US',
        allowed: regionCodes,
      },
      _customerState: {
        defaultValue: 'GUEST',
        allowed: ['SIGNED_IN', 'GUEST', 'RECOGNIZED'],
      },
      _memberShip: {
        defaultValue: undefined,
        allowed: ['NON_MEMBER', 'THIRD_PARTY', 'BASE_CREDITCARD', 'TOP_OF_THE_LIST', 'ALL_MEMBERS'],
      },
      _customerExperiment: undefined,
      _userId: undefined,
      _sessionId: undefined,
      _storeLocation: undefined,
      _additionalStoreLocations: undefined,
    };

    // get context parameters from request; validate parameters with allowed values, and construct new request params.
    const contextParams = {};

    // append parameters
    for (const param in params) {
      if (params.hasOwnProperty(param)) {
        if (params[param] && params[param].defaultValue) {
          contextParams[param] = params[param].defaultValue;
        }
        if (requestParams[param]) {
          if (!params[param].allowed || params[param].allowed.indexOf(requestParams[param]) > -1) {
            contextParams[param] = requestParams[param];
          }
        }
      }
    }

    // Set device type from cookie
    let deviceType = getDeviceTypeFromCookie(cookie);
    if (deviceType) {
      deviceType = deviceType.toUpperCase();
    }
    if (params._deviceType.allowed.indexOf(deviceType) > -1) {
      contextParams._deviceType = deviceType;
    }

    // Set region code from shippingCountry cookie.
    const shippingCountry = getShippingCountryFromCookie(cookie);
    if (params._regionCode.allowed.indexOf(shippingCountry) > -1) {
      contextParams._regionCode = shippingCountry;
    }

    const UserStatus = getUserStatusFromCookie(cookie);
    if (UserStatus.isSignedIn()) {
      contextParams._customerState = 'SIGNED_IN';
    } else if (UserStatus.isSoftSignedIn()) {
      contextParams._customerState = 'RECOGNIZED';
    }

    if (cookie && cookie.currency) {
      contextParams.currencyCode = cookie.currency;
    }

    if (typeof recipeIds !== 'undefined' && recipeIds.length >= 1) {
      contextParams._customerExperiment = encodeURI(recipeIds.join(','));
    }
    return contextParams;
  };

  const getSearchPageUrlFromRequest = function (req) {
    let url = req.originalUrl,
      cookie = req.cookies,
      brandValue;

    const pathname = url.substr(0, (url.indexOf('?') > -1 ? url.indexOf('?') : url.length));

    const search = url.substr(url.indexOf('?'));
    const requestParams = queryString(search);

    const weddingRegistryPattern = /(.*)(\/wedding-registry|\/registry\/wedding|&registry=wedding|&registry=true|application=REGISTRY|mode=wedding)(.*)/i;
    const weddingRegistryMatch = (url.search(weddingRegistryPattern) > -1);

    const searchPattern = /(.*)(\/shop\/featured|\/wedding\/search|\/shop\/search|\/buy\/)(.*)/i;
    const searchMatch = (url.search(searchPattern) > -1);

    if (pathname) {
      const domain = (process.env.XAPI_DOMAIN !== undefined) ? process.env.XAPI_DOMAIN : req.headers.host;
      let XapiUrl = `http://${domain}/xapi/discover/v1/page?pathname=${pathname.replace(/&/g, '%26')}`;

      const recipeIds = expUtil.getServersideRecipeIds(req);

      const contextParams = getSanitizedContextParams(requestParams, cookie, recipeIds);

      if (weddingRegistryMatch) {
        contextParams._shoppingMode = 'WEDDING_REGISTRY';
      }
      if (searchMatch) {
        contextParams._navigationType = 'SEARCH';
      }
      if (requestParams.id) {
        XapiUrl += `&id=${requestParams.id}`;
      }
      if (requestParams.CategoryID) {
        XapiUrl += `&CategoryID=${requestParams.CategoryID}`;
      }
      if (requestParams.ss) {
        XapiUrl += `&ss=${requestParams.ss}`;
      }
      if (requestParams.keyword) {
        XapiUrl += `&keyword=${requestParams.keyword.replace(/&/g, '%26')}`;
      }

      // Converting ISO-8859-1 to UTF-8 encoding for brand parameter.
      if (requestParams.brand) {
        try {
          brandValue = requestParams.brand || '';
          // Just to check whether incoming brand value is in UTF-8.
          decodeURIComponent(brandValue);
        } catch (ex) {
          // If UTF-8 decoding fails try with ISO-8859-1.
          brandValue = brandValue.replace(/\+/g, '%20');
          brandValue = encodeURIComponent(unescape(brandValue));
        }
        XapiUrl += `&brand=${brandValue.replace(/&/g, '%26')}`;
      }
      if (requestParams.mode) {
        XapiUrl += `&mode=${requestParams.mode}`;
      }

      const cmParams = filteredKeys(requestParams, /^cm_/);
      for (const itr in cmParams) {
        XapiUrl += `&${cmParams[itr]}=${requestParams[cmParams[itr]]}`;
      }

      for (const param in contextParams) {
        if (contextParams.hasOwnProperty(param)) {
          XapiUrl += `&${param}=${contextParams[param]}`;
        }
      }
      return XapiUrl;
    }
    console.log('xapi request not invoked.');
    throw new Error('xapi parameters invalid');
  };

  const getCacheKeyFromRequest = function (query, cookies) {
    let delimiter = '_',
      context = getSanitizedContextParams(query, cookies);
    return context._shoppingMode + delimiter + context._regionCode + delimiter + context._application + delimiter + context._deviceType + delimiter + context._navigationType;
  };

  const generateContextUrlParams = function (context) {
    const StringUtils = require('./StringUtil');
    let queryString = '',
      params = [],
      id = StringUtils.getURLParameter('id'),
      categoryID = StringUtils.getURLParameter('CategoryID'),
      keyword = StringUtils.getURLParameter('keyword'),
      brand = StringUtils.getDecodedParamValue('brand'),
      mode = StringUtils.getURLParameter('mode');

    if (id) {
      params.push(`id=${id}`);
    }
    if (categoryID) {
      params.push(`CategoryID=${categoryID}`);
    }
    if (keyword) {
      params.push(`keyword=${keyword.replace(/&/g, '%26')}`);
    }
    if (mode) {
      params.push(`mode=${mode}`);
    }
    if (brand) {
      params.push(`brand=${brand.replace(/&/g, '%26').replace(/\+/g, '%20')}`);
    }
    if (context.application) {
      params.push(`_application=${context.application}`);
    }
    if (context.navigationType) {
      params.push(`_navigationType=${context.navigationType}`);
    }
    if (context.deviceType) {
      params.push(`_deviceType=${context.deviceType}`);
    }
    if (context.shoppingMode) {
      params.push(`_shoppingMode=${context.shoppingMode}`);
    }
    if (context.regionCode) {
      params.push(`_regionCode=${context.regionCode}`);
    }
    if (context.customerExperiment) {
      params.push(`_customerExperiment=${context.customerExperiment}`);
    }
    if (context.currencyCode) {
      params.push(`currencyCode=${context.currencyCode}`);
    }

    if (context.signedIn) {
      params.push('_customerState=' + 'SIGNED_IN');
    } else if (context.softSignedIn) {
      params.push('_customerState=' + 'RECOGNIZED');
    } else {
      params.push('_customerState=' + 'GUEST');
    }

    /* if (gridState) {
            for (var key in gridState) {
                params.push(key + "=" + gridState[key]);
            }
        } */

    if (params.length) {
      queryString = `&${params.join('&')}`;
    }
    return queryString;
  };
  return {
    generateContextUrlParams,
    getSearchPageUrlFromRequest,
    getCacheKeyFromRequest,
    getContext: getSanitizedContextParams,
  };
}());
