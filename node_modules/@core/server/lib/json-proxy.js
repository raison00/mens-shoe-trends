/**
 * @file json-proxy.js
 *
 * An express middleware for proxying to an external JSON API. See the README for more details
 *
 * @see https://code.devops.fds.com/polaris/core/server/tree/master#serverjsonproxyoptions
 */
const _ = require('lodash');
const chalk = require('chalk');
const request = require('request-promise');
const { resolve } = require('url');

const isDev = process.env.NODE_ENV === 'development';

module.exports = function jsonProxy({
  propPath,
  host = process.env.XAPI_HOST,
  url,
  headers = {},
  completeRequest = false,
  sharedState = true,
  filter,
  renderFilter,
  sharedStateFilter,
}) {
  if (!host) {
    throw new Error('server.proxy requires "host".');
  }

  if (!completeRequest && !propPath) {
    throw new Error('server.proxy requires "propPath" to store the results, since "completeRequest" is false.');
  }

  // Allow specific filters for rendering and shared state. Fall back to a common filter function, if exists
  const filteredResult = (result, _filter = filter) => {
    if (_.isFunction(_filter)) {
      return _filter(result);
    }

    return result;
  };

  return (req, res, next) => {
    // if url is not supplied to proxy, use the incoming request's url
    const uri = url || req.url;

    const complete = (result) => {
      if (completeRequest) {
        res.json(result);
      } else {
        _.set(req.locals.context, propPath, filteredResult(result, renderFilter));

        // used by the server bundle renderer to set window.__INITIAL_STATE__. @see @core/lib/store and @core/server/ssr
        if (sharedState) {
          req.locals.store.set(propPath, filteredResult(result, sharedStateFilter));
        }

        next();
      }
    };

    if (isDev && this.mock && this.mockRoutes[uri]) {
      return complete(_.cloneDeep(this.mockRoutes[uri])); // deep clone the mock data else changes to context will be carried between routes
    } else if (isDev && this.mock) {
      console.warn(chalk.bold.yellow(`No mock route found for ${chalk.cyan(uri)}. Proxying to ${chalk.cyan(host)}`)); // eslint-disable-line no-console
    }

    return request({
      url: resolve(host, uri),
      headers,
      json: true,
    }).then(complete).catch((err) => {
      console.error(err); // eslint-disable-line no-console
      res.sendStatus(500);
    });
  };
};
