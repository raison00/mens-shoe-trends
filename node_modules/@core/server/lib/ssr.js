/**
 * Server-side rendering (SSR) handling
 *
 * - Runs when the server.start() method is called, to ensure that the middleware is attached
 *   after all other custom middleware (since SSR middleware should be the fallback)
 *      - @see ./index.js
 * - Sets up the express rendering engine using express-handlebars, providing knowledge
 *   of all views, partials, and helpers necessary for rendering
 * - Attaches middleware that completes the request by rendering the appropriate template
 *   via the configured handlebars engine, with the that exists in res.locals.context
 */
const _ = require('lodash');
const exphbs = require('express-handlebars');
const resolve = require('@core/lib/project/resolve');

// arguments contain webpack stats
module.exports = function ssr({ helpers, partialsDir }) {
  const { app } = this;
  const hbs = exphbs.create({
    extname: '.hbs',
    helpers,
    partialsDir,
    layoutsDir: './',
    compilerOptions: { preventIndent: true },
  });
  const resetEngine = () => app.engine('.hbs', hbs.engine); // reset to default (non-local) engine

  app.set('view engine', '.hbs');
  app.engine('.hbs', hbs.engine);
  app.set('views', resolve('src/templates'));

  this.renderRoute = (req, res, template = 'main') => {
    let localhbs = hbs;
    let localHelpers = helpers;
    const compileEveryRequest = req.locals.partialsDir || req.locals.helpers;

    // allows per-request definition of partials/helpers for applications like Marketing Campaigns.
    // NOTE: THIS IS INCREDIBLY INEFFICIENT
    if (compileEveryRequest) {
      const localPartialsDir = _.union(req.locals.partialsDir, partialsDir);
      localHelpers = _.defaults(req.locals.helpers, helpers);

      localhbs = exphbs.create({
        extname: '.hbs', helpers: localHelpers, partialsDir: localPartialsDir, layoutsDir: './',
      });
      app.engine('.hbs', localhbs.engine);
    }

    req.locals.context.layout = 'index';

    res.render(template, {
      ...req.locals.context,

      // __INITIAL_STATE__ is used to populate window.__INITIAL_STATE__. @see @core/lib/render-bundle/index.template.html
      __INITIAL_STATE__: JSON.stringify(req.locals.store.get()),
    });

    resetEngine();
  };

  app.get('*', (req, res) => {
    this.renderRoute(req, res);
  });
};
