/**
 * Sets up common express middleware
 *
 * - Runs very early in on Server constructor
 *      - @see ./index.js
 * - Sets common middleware:
 *      - cookie-parser: https://www.npmjs.com/package/cookie-parser
 *      - express-device: https://www.npmjs.com/package/express-device
 * - Sets up static file server via express.static
 *      - @see https://expressjs.com/en/starter/static-files.html
 * - Consumes the project's server/middleware.js to generate res.locals.context
 *      - @see ../index.js
 */

const _ = require('lodash');
const bodyParser = require('body-parser');
const cookieParser = require('cookie-parser');
const device = require('express-device');
const express = require('express');
const path = require('path');
const compression = require('compression');
const resolve = require('@core/lib/project/resolve');
const legacyMiddleware = require('./legacy-middleware');
const publicPath = require('@core/lib/project/base');
const Store = require('@core/lib/store/Store');
const pkg = require('@core/lib/project/pkg')();

module.exports = function common() {
  const { app } = this;
  const preventGzipped = _.get(pkg, 'config.preventGzipped', false);

  app.use([
    bodyParser.urlencoded({ extended: true }),
    bodyParser.json(),
    cookieParser(),
    device.capture(),

    (req, res, next) => {
      const analyticsURL = (process.env.analyticsURL || '//libs.coremetrics.com/v4.18.130/eluminate.js');
      let customAnalytics = process.env.customAnalyticsURL;

      if (!customAnalytics) {
        if (process.env.ENTRY_POINT === 'bcom') {
          customAnalytics = 'https://assets.bloomingdales.com/navapp/javascript/cmcustom.js';
        } else {
          customAnalytics = 'https://www.macys.com/web20/assets/script/coremetrics/cmcustom.js';
        }
      }

      req.locals = {
        context: {
          entryPoint: process.env.ENTRY_POINT,
          analyticsURL,
          customAnalytics,
          TAG_MNGR_ENV: process.env.TAG_MNGR_ENV || 'dev',
        },
      };

      next();
    },

    (req, res, next) => {
      // create a store on the request object so that state is maintained per-request
      /* eslint-disable no-underscore-dangle */
      req.locals.context.__INITIAL_STATE__ = {}; // should never be used directly
      req.locals.store = new Store(req.locals.context.__INITIAL_STATE__);

      // @TODO - the above __INITIAL_STATE__ is only needed for backwards-compatible support of discovery pages.
      // Once disco updates its libraries and uses store.set(), store can be set up like this:
      // req.locals.store = new Store();
      /* eslint-enable no-underscore-dangle */

      // environment properties shared by the client and server
      const sharedProperties = ['ASSET_HOST'];
      const properties = _.pick(process.env, sharedProperties);
      req.locals.store.set('properties', properties);
      next();
    },
  ]);

  if (!preventGzipped) {
    app.use(compression());
  }

  app.use('/', express.static(resolve(path.join('dist', process.env.ENTRY_POINT || ''))));

  // Only listen for public path if it's set
  if (publicPath) {
    app.use(`${publicPath}/`, express.static(resolve(path.join('dist', process.env.ENTRY_POINT || ''))));
  }

  if (this.options.legacyMiddleware) {
    legacyMiddleware.apply(this);
  }
};
