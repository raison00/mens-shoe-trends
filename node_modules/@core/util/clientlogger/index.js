// Simple logger module
// Let's come back to this and re-evaluate logger libraries
// log4js AMD, etc.
// ignoring browsers w/o a console for now
{
  // logging is off in production by default
  let loggingEnabled = true;
  const loc = window.location;
  const host = loc.host;

  // enabled by default in qa and local environments
  if (host.indexOf('.com') !== -1 && host.indexOf('.fds.com') === -1 && host.indexOf('localhost') === -1) {
    // likely production so
    if (loc.search.search('[?&]debug=[^&]+') === -1) {
      // not debug mode either
      loggingEnabled = false;
    }
  }

  try {
    // //////////////////////////////////////////////////////
    // although we are using local storage we don't want to
    // use the storage module as we may need logging
    // in that module
    // do not change how this is done
    // //////////////////////////////////////////////////////
    // disable logging because you don't want to look at it
    if (loggingEnabled && localStorage.getItem('disableLogger')) {
      loggingEnabled = false;
    } else if (localStorage.getItem('enableLogger')) {
      // if running the page in debug mode or if some value for debug is set in localStorage,
      // then turn logging on
      loggingEnabled = true;
    }
  } catch (e) {} // eslint-disable-line no-empty

  function callConsoleMethod(method, args) {
    if (loggingEnabled) {
      if (typeof console === 'object' && typeof console[method] === 'function') {
        console[method](...args);
      }
    }
    return true;
  }

  function error(...args) {
    return callConsoleMethod('error', args);
  }

  function warn(...args) {
    return callConsoleMethod('warn', args);
  }

  function info(...args) {
    return callConsoleMethod('info', args);
  }

  function log(...args) {
    return callConsoleMethod('log', args);
  }

  function dir(...args) {
    return callConsoleMethod('dir', args);
  }

  function time(...args) {
    return callConsoleMethod('time', args);
  }

  function timeEnd(...args) {
    return callConsoleMethod('timeEnd', args);
  }

  module.exports = {
    error,
    warn,
    info,
    dir,
    log,
    time,
    timeEnd,
  };
}
