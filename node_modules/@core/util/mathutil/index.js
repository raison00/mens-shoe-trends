// #MODULE - MathUtil
// > Author: Brenda Jin
// >
// > Create Date: January 29, 2014
// >
// ##DESCRIPTION: This module will contain utilities for number manipulation. This only includes floats and integers.
// If your "number" has a special character like a `$`, it probably belongs in StringUtil.js

{
  const toPercent = function (numerator, denominator, decimalPlaces) {
    if (numerator === undefined || denominator === undefined || decimalPlaces === undefined) {
      throw new Error('toPercent requires three arguments: numerator, denominator, and decimalPlaces');
    }

    // the + sign ensures that the value returns as datatype number
    return +((numerator / denominator) * 100).toFixed(decimalPlaces);
  };

  const divide = function (dividend, divisor, options) {
    let quotient = dividend / divisor;

    if (dividend === undefined || divisor === undefined || typeof dividend !== 'number' || typeof divisor !== 'number') {
      throw new Error('divide only accepts numbers for dividend and divisor');
    }

    if (divisor === 0) {
      throw new Error('divide does not accept 0 as a divisor');
    }

    if (arguments.length > 2 && options !== undefined && typeof options !== 'object') {
      throw new Error('divide options argument should be an object');
    }

    if (options !== undefined && options.roundUp !== undefined && options.roundUp === true) {
      quotient = parseInt(quotient, 10);
      quotient += dividend % divisor > 0 ? 1 : 0;
    }

    return quotient;
  };

    // ###Method - formatNumber(num, pattern) public method to format number with commas
    // > parameters
    // >
    // + *num* - number or string like 123 or '123'
    // + *pattern* string like #,### or #,###.00
    // > returns
    // >
    // + String with formatted number example 1,223,334.57
  const formatNumber = function (num, pattern) {
    let mantissaPrecision = 0;
    const arr = [];

    if (pattern === undefined || pattern === '') {
      this.pattern = '#,###.###';
    } else {
      this.pattern = pattern;
    }

    if (Number.isNaN(Number(num))) {
      return num;
    }
    let innerNum = parseFloat(num);
    const patterns = this.pattern.toString().split('.');
    if (this.pattern.indexOf('.') !== -1) {
      mantissaPrecision = patterns[1].length;
    }

    if (mantissaPrecision === 0) {
      innerNum = Math.round(innerNum);
    } else {
      innerNum = innerNum.toFixed(mantissaPrecision);
    }

    if (this.pattern.indexOf(',') === -1) {
      return innerNum;
    }

    const integerPattern = patterns[0];
    const commaSeparator = integerPattern.lastIndexOf(',');
    const commaSeparatorLength = integerPattern.length - (commaSeparator + 1);

    const regex = new RegExp(
      `(\\d)(?=(\\d{${commaSeparatorLength}})+(?!\\d))`,
      'g',
    );

    const parts = innerNum.toString().split('.');
    parts[0] = parts[0].replace(regex, '$1,');
    // if the number is an integer convert to float with zeroes suffixed for
    // display
    if (mantissaPrecision && parts.length === 1) {
      arr.length = parseInt(mantissaPrecision, 10) + 1;
      parts[1] = arr.join('0');
    }
    if (mantissaPrecision && parts.length === 2 && parts[1].length > mantissaPrecision) {
      parts[1] = parts[1].substring(0, mantissaPrecision);
    }
    return parts.join('.');
  };


  function metersToMiles(val) {
    return !Number.isNaN(Number(val)) ? +(val * 0.00062137) : 0;
  }

  module.exports = {
    toPercent,
    divide,
    metersToMiles,
    formatNumber,
  };
}
